
package com.sbi.yb.services.repository.impl;


import com.sbi.microservice.framework.exception.TechnicalException;
import com.sbi.yb.services.constants.UtilsConstant;
import com.sbi.yb.services.repository.BankSystemDAO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;


@Component
public class BankSystemDAOFactory{
    private static final Logger logger = LoggerFactory.getLogger(BankSystemDAOFactory.class);

    private final BankSystemDAO switchDAOImpl;
    private final BankSystemDAO coreDAOImpl;

    @Autowired
    public BankSystemDAOFactory(@Qualifier("switchDAOImpl") final BankSystemDAO switchDAOImpl,
                                @Qualifier("coreDAOImpl")final BankSystemDAO coreDAOImpl) {
        this.switchDAOImpl = switchDAOImpl;
        this.coreDAOImpl = coreDAOImpl;

    }
    public BankSystemDAO getBankSystemDAO(String txnPath) {

        if (logger.isDebugEnabled())
            logger.debug("getBankSystemDAO(String txnPath) ");

        if (txnPath != null && !txnPath.trim().equalsIgnoreCase(UtilsConstant.EMPTY)) {

            if (txnPath.equalsIgnoreCase(UtilsConstant.CORE_TO_CORE) || txnPath.equalsIgnoreCase(UtilsConstant.CORE_TO_NONCORE) || txnPath.equalsIgnoreCase("CMC")) {
                if (logger.isDebugEnabled())
                    logger.debug("getBankSystemDAO(String txnPath) ");
                return coreDAOImpl;

            } else {
                if (logger.isDebugEnabled())
                    logger.debug("getBankSystemDAO(String txnPath) ");
                return switchDAOImpl;
            }
        } else {
            throw new TechnicalException("Error Code", "Error Message");
        }
    }
}
























package com.sbi.yb.services.repository.impl;


/**
 *
 *  @version 1.0
 * @author V1017583
 *
 */


import com.sbi.microservice.framework.constant.ErrorCodes;
import com.sbi.microservice.framework.exception.TechnicalException;

import com.sbi.yb.services.constants.SQLConstants;
import com.sbi.yb.services.constants.UtilsConstant;
import com.sbi.yb.services.repository.SBINameValueMasterDAO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Repository
public class SBINameValueMasterDAOImpl implements SBINameValueMasterDAO {
    private  static final Logger logger = LoggerFactory.getLogger(SBINameValueMasterDAOImpl.class);

    private NamedParameterJdbcTemplate jdbcTemplate;

    @Autowired
    public SBINameValueMasterDAOImpl(NamedParameterJdbcTemplate jdbcTemplate){
        this.jdbcTemplate = jdbcTemplate;
    }


    /**
     * This below method is used to fetch details of data stored in SBI_NAME_VALUE_MASTER
     *
     * @return
     */
    public Map<String, String> getNameValueMasterData()  {

        logger.info("getNameValueMasterData() {}" , UtilsConstant.METHODBEGIN);
        Map<String, String> data = null;
        try {
            List<Map<String, String>> nameList = jdbcTemplate.query(SQLConstants.NAME_VALUE_DATA,
                    new NameValueMasterDataRowMapper());
            data = nameList.get(0);
            logger.info("Data of query  {}" , data);
            if (logger.isDebugEnabled()) {
                logger.info("data : {}" , data);
            }

        } catch(DataAccessException ex) {
            logger.error("getNameValueMasterData() exception occured {}" ,ex.getMessage());
            throw new TechnicalException(UtilsConstant.CONNECTION_ESTABLISH, ErrorCodes.DB_ACCESS_FAILURE);
        }
        logger.info("getNameValueMasterData() {}" , UtilsConstant.METHODEND);
        return data;
    }


    static class NameValueMasterDataRowMapper implements RowMapper <Map<String, String>>  {
        Map<String, String> data = new HashMap<>();

        public  Map<String, String>  mapRow(ResultSet rs, int index) throws SQLException {
            data.put(rs.getString(1), rs.getString(2));
            return data;
        }
    }

    /**
     *
     * This below method is used to fetch the Cutt-off time of NEFT and RTGS transaction
     * @return
     */
    public Map<String, String> getCutOffTime(){

        logger.info("getCutOffTimeData() {}" , UtilsConstant.METHODBEGIN);
        Map<String, String> data = null;
        try {
            List<Map<String, String>> cutOffList = jdbcTemplate.query(SQLConstants.CUT_OFF_TIME_VALUE, new NameValueMasterDataRowMapper());
            data =  cutOffList.get(0);

            logger.info("data {}", data);

        } catch(DataAccessException ex) {
            logger.error("getCutOffTime() exception occured {}" ,ex.getMessage());
            throw new TechnicalException(UtilsConstant.CONNECTION_ESTABLISH,ErrorCodes.DB_ACCESS_FAILURE);
        }
        logger.info("getCutOffTimeData() {}" , UtilsConstant.METHODEND);
        return data;
    }




    public Map getSBICoreErrorData()
    {

        logger.info("getSBICoreErrorData() ");
        Map data = null;
        try
        {
            List l = jdbcTemplate.query(SQLConstants.SBI_CORE_ERROR_DATA, new NameValueMasterDataRowMapper());
            data = (Map) l.get(0);
            if (logger.isDebugEnabled())
            {
                logger.debug("data :" + data);
            }

        }
        catch (DataAccessException ex)
        {
            throw new TechnicalException(UtilsConstant.CONNECTION_ESTABLISH,ErrorCodes.DB_ACCESS_FAILURE);
        }
        logger.info("getSBICoreErrorData() ");
        return data;
    }




    public Map findAllBranchName()
    {

        logger.info("findAllBranchName() " );
        Map data = null;
        try
        {
            List branchData = jdbcTemplate.query(SQLConstants.BRANCH_CODE_NAME_QUERY, new NameValueMasterDataRowMapper());
            data = (Map) branchData.get(0);
            if (logger.isDebugEnabled())
            {
                logger.debug("data :" + data);
            }

        }
        catch (DataAccessException ex)
        {
            throw new TechnicalException(UtilsConstant.CONNECTION_ESTABLISH,ErrorCodes.DB_ACCESS_FAILURE);
        }
        logger.info("findAllBranchName() ");
        return data;
    }

    /*	CR-5655 Ramanan M - BEGIN - NRE check through Product Code	*/
    public Map findAllNREProductCodes()
    {

        logger.info("findAllNREProductCodes ");
        Map data = null;
        try
        {
            List nreProductCodeData = jdbcTemplate.query(SQLConstants.NRE_PRODUCT_CODE_QUERY, new NameValueMasterDataRowMapper());
            if(nreProductCodeData != null && nreProductCodeData.size() > 0) {
                data = (Map) nreProductCodeData.get(0);
            }
            if (logger.isDebugEnabled())
            {
                logger.debug("FindAll NRE ProductCodes Data :" + data);
            }

        }
        catch (DataAccessException ex)
        {
            throw new TechnicalException(UtilsConstant.CONNECTION_ESTABLISH,ErrorCodes.DB_ACCESS_FAILURE);
        }
        logger.info("findAllNREProductCodes " );
        return data;
    }


    public Map getSBISwitchErrorData()
    {

        logger.info("getSBISwitchErrorData() ");
        Map data = null;
        try
        {
            List l = jdbcTemplate.query(SQLConstants.SBI_SWITCH_ERROR_DATA, new NameValueMasterDataRowMapper());
            data = (Map) l.get(0);
            if (logger.isDebugEnabled())
            {
                logger.debug("data :" + data);
            }
        }
        catch (DataAccessException ex)
        {
            throw new TechnicalException(UtilsConstant.CONNECTION_ESTABLISH,ErrorCodes.DB_ACCESS_FAILURE);
        }
        logger.info("getSBISwitchErrorData() ");
        return data;
    }

}

