I'll provide comprehensive JUnit test cases for each method in the AuthorizationEchequeService class. Here are the test cases with full coverage:

1. Test Class Setup and Main Method Tests

```java
package com.sbi.yb.services.service.impl;

import com.sbi.microservice.framework.exception.BusinessException;
import com.sbi.microservice.framework.model.CorporateProfile;
import com.sbi.microservice.framework.services.CorporateService;
import com.sbi.yb.services.cache.ReferenceDataCache;
import com.sbi.yb.services.constants.MergerConstants;
import com.sbi.yb.services.constants.UtilsConstant;
import com.sbi.yb.services.model.CorpTransaction;
import com.sbi.yb.services.model.CorporateTransactionLeg;
import com.sbi.yb.services.repository.AuthorizeOrRejectSelectionListDAO;
import com.sbi.yb.services.repository.DealerPaymentDAO;
import com.sbi.yb.services.repository.ValidationFilterDAO;
import com.sbi.yb.services.service.ManageTransactionServiceDetails;
import com.sbi.yb.services.utils.CorpTransactionUtil;
import com.sbi.yb.services.utils.ImpsTransactionUtil;
import com.sbi.yb.services.utils.TransactionRequestMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AuthorizationEchequeServiceTest {

    @Mock
    private CorporateService corporateService;

    @Mock
    private AuthorizeOrRejectSelectionListDAO authorizeOrRejectSelectionListDAO;

    @Mock
    private DealerPaymentDAO dealerPaymentDAOImpl;

    @Mock
    private ValidationFilterDAO validationFilterDAOImpl;

    @Mock
    private CutoffTimeService cutoffTimeService;

    @Mock
    private ReferenceDataCache referenceDataCache;

    @Mock
    private ManageTransactionServiceDetails manageTransactionDetails;

    @Mock
    private ImpsTransactionUtil impsTransactionUtil;

    @Mock
    private RequestMapperFactory requestMapperFactory;

    @Mock
    private CorpTransactionUtil corpTransactionUtil;

    @InjectMocks
    private AuthorizationEchequeService authorizationEchequeService;

    private CorporateTransactionLeg debitLeg;
    private CorpTransaction corpTransaction;
    private LocalDateTime currentTime;

    @BeforeEach
    void setUp() {
        currentTime = LocalDateTime.now();
        
        debitLeg = new CorporateTransactionLeg();
        debitLeg.setEchequeNo("CS123456");
        debitLeg.setAuthFlag("YES");
        debitLeg.setCurrentAuthLevel("1");
        debitLeg.setScheduledDate(currentTime.plusDays(1));
        debitLeg.setBranchCode("012345");
        debitLeg.setAccountNo("123456789");
        debitLeg.setAmount("1000.00");
        debitLeg.setMerchantCode("IMPS");
        
        corpTransaction = new CorpTransaction();
        corpTransaction.setDebit(debitLeg);
    }

    @Test
    void testAuthorizeEcheques_NullInput() {
        // When
        List<CorporateTransactionLeg> result = authorizationEchequeService.authorizeEcheques(null, "user1", "corp123", "gstn123");
        
        // Then
        assertNull(result);
    }

    @Test
    void testAuthorizeEcheques_ValidInput() {
        // Given
        List<CorporateTransactionLeg> transactionDetails = Arrays.asList(debitLeg);
        when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
        when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);
        when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
            .thenReturn(createUserProfileMap());
        when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
        when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

        // When
        List<CorporateTransactionLeg> result = authorizationEchequeService.authorizeEcheques(transactionDetails, "user1", "corp123", "gstn123");
        
        // Then
        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void testAuthorizeEcheques_PastScheduledDate() {
        // Given
        debitLeg.setScheduledDate(currentTime.minusDays(1));
        List<CorporateTransactionLeg> transactionDetails = Arrays.asList(debitLeg);
        when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
        when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);
        when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
            .thenReturn(createUserProfileMap());
        when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
        when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

        // When
        List<CorporateTransactionLeg> result = authorizationEchequeService.authorizeEcheques(transactionDetails, "user1", "corp123", "gstn123");
        
        // Then
        assertNotNull(result);
    }

    @Test
    void testAuthorizeEcheques_ABSMergerBranch() {
        // Given
        debitLeg.setBranchCode("112345"); // Starts with 1 which is in ABSMerger
        List<CorporateTransactionLeg> transactionDetails = Arrays.asList(debitLeg);
        when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
        when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);
        when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
            .thenReturn(createUserProfileMap());
        when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
        when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

        // When
        List<CorporateTransactionLeg> result = authorizationEchequeService.authorizeEcheques(transactionDetails, "user1", "corp123", "gstn123");
        
        // Then
        assertNotNull(result);
    }
}
```

2. Debit Leg Authorization Details Tests

```java
@Test
void testDebitLegAuthorizationDetails_AuthFlagYes() {
    // Given
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);
    when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
        .thenReturn(createUserProfileMap());
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.debitLegAuthorizationDetails(
        debitLeg, currentTime.plusDays(1), currentTime, userName, debitBankCode, corporateId, gstnNo);

    // Then
    assertNotNull(result);
}

@Test
void testDebitLegAuthorizationDetails_AuthFlagNo() {
    // Given
    debitLeg.setAuthFlag("NO");
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";

    // When
    CorporateTransactionLeg result = authorizationEchequeService.debitLegAuthorizationDetails(
        debitLeg, currentTime.plusDays(1), currentTime, userName, debitBankCode, corporateId, gstnNo);

    // Then
    assertNotNull(result);
    assertEquals("Echeque cannot be authorized", result.getStatus());
}

@Test
void testDebitLegAuthorizationDetails_DealerPaymentMode() {
    // Given
    debitLeg.setMerchantCode("DEALER");
    debitLeg.setEchequeNo("CM123456");
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);
    when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
        .thenReturn(createUserProfileMap());
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.debitLegAuthorizationDetails(
        debitLeg, currentTime.plusDays(1), currentTime, userName, debitBankCode, corporateId, gstnNo);

    // Then
    assertNotNull(result);
}

@Test
void testDebitLegAuthorizationDetails_IMPSPaymentMode() {
    // Given
    debitLeg.setMerchantCode("IMPS");
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);
    when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
        .thenReturn(createUserProfileMap());
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.debitLegAuthorizationDetails(
        debitLeg, currentTime.plusDays(1), currentTime, userName, debitBankCode, corporateId, gstnNo);

    // Then
    assertNotNull(result);
}
```

3. Validation Methods Tests

```java
@Test
void testValidatingOtherTransactionDetails_ValidSchedule() {
    // Given
    LocalDateTime payDate = currentTime.plusDays(1);
    String paymentMode = "NEFT";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.validatingOtherTransactionDetails(
        debitLeg, payDate, paymentMode, debitBankCode);

    // Then
    assertNotNull(result);
}

@Test
void testValidatingOtherTransactionDetails_InvalidSchedule() {
    // Given
    debitLeg.setCurrentAuthLevel("0");
    LocalDateTime payDate = currentTime.plusDays(1);
    String paymentMode = "NEFT";
    String debitBankCode = "0";
    LocalDateTime nextDate = currentTime.plusDays(2);
    
    when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(false);
    when(cutoffTimeService.getNextWorkingDate(any(), anyString(), anyString())).thenReturn(nextDate);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.validatingOtherTransactionDetails(
        debitLeg, payDate, paymentMode, debitBankCode);

    // Then
    assertNotNull(result);
    assertEquals("50", result.getCurrentAuthLevel());
}

@Test
void testValidatingImpsDetails_ValidTime() {
    // Given
    LocalDateTime payDate = currentTime.plusDays(1);
    String paymentMode = "IMPS";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(false);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.validatingImpsDetails(
        debitLeg, payDate, paymentMode, debitBankCode);

    // Then
    assertNotNull(result);
}

@Test
void testValidatingImpsDetails_InvalidTime() {
    // Given
    debitLeg.setCurrentAuthLevel("0");
    LocalDateTime payDate = currentTime.plusDays(1);
    String paymentMode = "IMPS";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isScheduleTrue(anyString(), anyString())).thenReturn(true);
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);

    // When & Then
    assertThrows(BusinessException.class, () -> 
        authorizationEchequeService.validatingImpsDetails(debitLeg, payDate, paymentMode, debitBankCode));
}

@Test
void testValidatingDealerDetails_ValidTime() {
    // Given
    debitLeg.setCurrentAuthLevel("0");
    LocalDateTime payDate = currentTime.plusDays(1);
    String paymentMode = "DEALER";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(true);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.validatingDealerDetails(
        debitLeg, payDate, paymentMode, debitBankCode);

    // Then
    assertNotNull(result);
    verify(dealerPaymentDAOImpl).findExceedingConsignOutstanding(anyString());
    verify(dealerPaymentDAOImpl).findInterestRoutineExecution(anyString());
}

@Test
void testValidatingDealerDetails_InvalidTime() {
    // Given
    debitLeg.setCurrentAuthLevel("0");
    LocalDateTime payDate = currentTime.plusDays(1);
    String paymentMode = "DEALER";
    String debitBankCode = "0";
    
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(false);

    // When & Then
    assertThrows(BusinessException.class, () -> 
        authorizationEchequeService.validatingDealerDetails(debitLeg, payDate, paymentMode, debitBankCode));
}
```

4. Current Auth Level and Post Transaction Tests

```java
@Test
void testSetCurrentAuthLevelInTransaction_CSTransaction() {
    // Given
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";
    
    debitLeg.setEchequeNo("CS123456");
    debitLeg.setCurrentAuthLevel("0");
    
    Map<String, String> transactionLimitData = new HashMap<>();
    transactionLimitData.put("CS_CUTOFF_START_TIME_0", "09:00");
    
    when(cutoffTimeService.isValidDateAndTime(any(), anyString(), anyString())).thenReturn(false);
    when(cutoffTimeService.getNextWorkingDate(any(), anyString(), anyString()))
        .thenReturn(currentTime.plusDays(1));
    when(referenceDataCache.getTransactionLimit()).thenReturn(transactionLimitData);
    when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
        .thenReturn(createUserProfileMap());
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.setCurrentAuthLevelInTransaction(
        debitLeg, currentTime, currentTime.plusDays(1), debitBankCode, userName, corporateId, gstnNo);

    // Then
    assertNotNull(result);
    assertEquals("50", result.getCurrentAuthLevel());
}

@Test
void testSetCurrentAuthLevelInTransaction_COT_AADHAR_Transaction() {
    // Given
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";
    
    debitLeg.setEchequeNo("CO123456");
    debitLeg.setMerchantCode("AADHAR");
    debitLeg.setCurrentAuthLevel("1");
    
    when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString()))
        .thenReturn(createUserProfileMap());
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.setCurrentAuthLevelInTransaction(
        debitLeg, currentTime, currentTime.plusDays(1), debitBankCode, userName, corporateId, gstnNo);

    // Then
    assertNotNull(result);
    assertEquals("85", result.getCurrentAuthLevel());
}

@Test
void testSetCurrentAuthLevelInTransaction_UserType8() {
    // Given
    String userName = "user1";
    String corporateId = "corp123";
    String gstnNo = "gstn123";
    String debitBankCode = "0";
    
    Map<String, Object> userMap = new HashMap<>();
    userMap.put("user_type", "8");
    userMap.put("mobile_no", "9876543210");
    
    when(validationFilterDAOImpl.getUserProfileDetails(anyString(), anyString())).thenReturn(userMap);
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.setCurrentAuthLevelInTransaction(
        debitLeg, currentTime, currentTime.plusDays(1), debitBankCode, userName, corporateId, gstnNo);

    // Then
    assertNotNull(result);
    assertEquals("99", result.getCurrentAuthLevel());
}

@Test
void testPostTransaction_OnlineMode() {
    // Given
    String corporateId = "corp123";
    String userName = "user1";
    String mobileNo = "9876543210";
    String gstnNo = "gstn123";
    
    debitLeg.setCurrentAuthLevel("0");
    
    CorporateProfile corporateProfile = new CorporateProfile("corp123", "Test Corp", "Address1", "Address2", 
                                                          "City", "State", "123456", "contact@test.com");
    
    when(corporateService.getCorporateProfile(anyString())).thenReturn(corporateProfile);
    when(requestMapperFactory.getRequestMapper(anyString())).thenReturn(mock(TransactionRequestMapper.class));
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);

    // When
    CorporateTransactionLeg result = authorizationEchequeService.postTransaction(
        debitLeg, corporateId, userName, mobileNo, gstnNo);

    // Then
    assertNotNull(result);
    verify(corporateService).getCorporateProfile(corporateId);
}

@Test
void testPostTransaction_FileMode() {
    // Given
    String corporateId = "corp123";
    String userName = "user1";
    String mobileNo = "9876543210";
    String gstnNo = "gstn123";
    
    debitLeg.setCurrentAuthLevel("1");
    debitLeg.setEchequeNo("CQ123456");
    
    when(corpTransactionUtil.postTransaction(any(), anyString(), anyString())).thenReturn(corpTransaction);
    when(manageTransactionDetails.setEchequePropeties(any())).thenReturn(debitLeg);
    when(requestMapperFactory.getRequestMapper(anyString())).thenReturn(mock(TransactionRequestMapper.class));

    // When
    CorporateTransactionLeg result = authorizationEchequeService.postTransaction(
        debitLeg, corporateId, userName, mobileNo, gstnNo);

    // Then
    assertNotNull(result);
}
```

5. Utility Methods Tests

```java
@Test
void testGetEchequeStatus_AuthorizedSuccessfully() {
    // Given
    debitLeg.setCurrentAuthLevel("0");
    
    // When
    String result = authorizationEchequeService.getEchequeStatus(debitLeg);
    
    // Then
    assertEquals("Echeque Authorized successfully.", result);
}

@Test
void testGetEchequeStatus_AwaitingSecondLevel() {
    // Given
    debitLeg.setCurrentAuthLevel("2");
    
    // When
    String result = authorizationEchequeService.getEchequeStatus(debitLeg);
    
    // Then
    assertEquals("Echeque Authorized successfully. Awaiting for second level authorization.", result);
}

@Test
void testGetTransactionName_CD() {
    // Given
    debitLeg.setEchequeNo("CD123456");
    
    // When
    String result = authorizationEchequeService.getTransactionName(debitLeg);
    
    // Then
    assertEquals("CORP_DD", result);
}

@Test
void testGetTransactionName_CK() {
    // Given
    debitLeg.setEchequeNo("CK123456");
    
    // When
    String result = authoriz
