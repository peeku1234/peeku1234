public boolean linkAccounts(String userName, String linkedUserName) throws DAOException {
    logger.info("linkAccounts() {}", LoggingConstants.METHODBEGIN);
    
    if (logger.isDebugEnabled()) {
        logger.debug("username: {}, linkedUserName: {}", userName, linkedUserName);
    }
    
    try {
        // Validate input parameters
        if (userName == null || linkedUserName == null || 
            userName.trim().isEmpty() || linkedUserName.trim().isEmpty()) {
            throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE);
        }

        Map<String, Object> inParams = new HashMap<>();
        inParams.put(DAOConstants.USER_NAME, userName);
        inParams.put(DAOConstants.LINKED_USER_NAME, linkedUserName);

        List<SqlParameter> parameterList = new ArrayList<>();
        parameterList.add(new SqlParameter(DAOConstants.USER_NAME, Types.VARCHAR));
        parameterList.add(new SqlParameter(DAOConstants.LINKED_USER_NAME, Types.VARCHAR));
        parameterList.add(new SqlOutParameter(DAOConstants.STATUS, Types.VARCHAR));

        CallableStatementCreatorFactory statementFactory = new CallableStatementCreatorFactory(
                "{call LINK_ACCOUNTS(?,?,?)}", parameterList);

        CallableStatementCreator callableStatement = statementFactory.newCallableStatementCreator(inParams);

        Map<String, Object> result = getJdbcTemplate().call(callableStatement, parameterList);
        String linkAccountStatus = (String) result.get(DAOConstants.STATUS);
        logger.info("Value Returned by Procedure: {}", linkAccountStatus);

        if (!"true".equalsIgnoreCase(linkAccountStatus)) {
            throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE);
        }

        return true;
        
    } catch (DataAccessException ex) {
        logger.error("linkAccounts() exception occurred: {}", ex.getMessage());
        throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE);
    } finally {
        logger.info("linkAccounts() {}", LoggingConstants.METHODEND);
    }
}
