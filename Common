package com.sbi.yb.service.impl;

import com.sbi.microservice.framework.constant.ErrorCodes;
import com.sbi.microservice.framework.exception.TechnicalException;
import com.sbi.yb.constants.ManageBeneStatusCode;
import com.sbi.yb.model.*;
import com.sbi.yb.repository.ManageFileBeneficiaryDao;
import com.sbi.yb.service.ManageFileBeneficiaryService;
import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.CommonRequestPayload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static com.sbi.yb.constants.ManageBeneStatusCode.*;
import static com.sbi.yb.constants.QueryConstants.APPROVE_3P_BY_OID;
import static com.sbi.yb.constants.QueryConstants.APPROVE_D3P_BY_OID_BEN;
import static com.sbi.yb.constants.QueryConstants.APPROVE_D3P_BY_OID_COMPBEN;
import static com.sbi.yb.constants.QueryConstants.APPROVE_D3P_BY_TYPE_BEN;
import static com.sbi.yb.constants.QueryConstants.APPROVE_D3P_BY_TYPE_COMPBEN;
import static com.sbi.yb.constants.QueryConstants.APPROVE_DIBTP_BY_OID;
import static com.sbi.yb.constants.QueryConstants.APPROVE_DIBTP_BY_TYPE;
import static com.sbi.yb.constants.QueryConstants.APPROVE_OR_REJECT_3P_BY_TYPE;
import static com.sbi.yb.constants.QueryConstants.APPROVE_OR_REJECT_IBTP_BY_OID;
import static com.sbi.yb.constants.QueryConstants.APPROVE_OR_REJECT_IBTP_BY_TYPE;
import static com.sbi.yb.constants.QueryConstants.REJECT_3P_BY_OID;
import static com.sbi.yb.constants.QueryConstants.REJECT_D3P_BY_OID_BEN;
import static com.sbi.yb.constants.QueryConstants.REJECT_D3P_BY_OID_COMPBEN;
import static com.sbi.yb.constants.QueryConstants.REJECT_D3P_BY_TYPE_BEN;
import static com.sbi.yb.constants.QueryConstants.REJECT_D3P_BY_TYPE_COMPBEN;
import static com.sbi.yb.constants.QueryConstants.REJECT_DIBTP_BY_OID;
import static com.sbi.yb.constants.QueryConstants.REJECT_DIBTP_BY_TYPE;
import static com.sbi.yb.constants.QueryConstants.SAVE_WAC_AUDIT_TRAIL;
import static com.sbi.yb.constants.UtilConstants.*;


/*
 * @author V1017263
 * @version 1.0
 */


@Service
public class ManageFileBeneficiaryServiceImpl implements ManageFileBeneficiaryService {

  private static final Logger logger = LoggerFactory.getLogger(ManageFileBeneficiaryServiceImpl.class);

  private final ManageFileBeneficiaryDao manageFileBeneficiaryDaoImpl;

  public ManageFileBeneficiaryServiceImpl(final ManageFileBeneficiaryDao manageFileBeneficiaryDao) {
    this.manageFileBeneficiaryDaoImpl = manageFileBeneficiaryDao;
  }

  /*
   * This method is to approve beneficiaries
   * @param approveRejectBeneRequest
   * @return int number of records updated
   */

  @Override
  public List<BeneficiaryFile> getFileListByTab(
          BeneficiaryFileRequest request, AtomicInteger totalCount) {
    List<BeneficiaryFile> beneficiaryFiles;
    try {
      logger.info("Fetching files by tab: {}", request.getTabName());
      beneficiaryFiles = manageFileBeneficiaryDaoImpl.getBeneFiles(request, totalCount);
    } catch (DataAccessException dataAccessException) {
      logger.info("Data access exception occurred while fetching beneficiary list");
      throw new TechnicalException(dataAccessException.getMessage(), ErrorCodes.DB_ACCESS_FAILURE);
    }
    return beneficiaryFiles;
  }

  public BeneficiaryDetails getFileDetailsByTab(
          BeneficiaryDetailsRequest request, AtomicInteger totalCount) {
    BeneficiaryDetails beneficiaryDetails;
    try {
      logger.info("Inside the ManageFileBeneficiaryListServiceImpl "
              + "getFileDetailsByTab STARTS");

      String corporateId = request.getCorporateAlias();

      if (!TAB_NAMES.contains(request.getTabName())) {
        throw new IllegalArgumentException("Invalid tab name: " + request.getTabName());
      }

      // Get data from DAO
      beneficiaryDetails = manageFileBeneficiaryDaoImpl.getFileDetails(corporateId, request.getFileReferenceNo());
      logger.info("Inside the ManageFileBeneficiaryListServiceImpl getFileDetailsByTab ENDS");
    } catch (DataAccessException dataAccessException) {
      logger.info("Data access exception occurred while fetching beneficiary details");
      throw new TechnicalException(dataAccessException.getMessage(), ErrorCodes.DB_ACCESS_FAILURE);
    }
    // GET BENE DATA
    return getBeneficiaryDetails(beneficiaryDetails, request, totalCount);
  }


  private BeneficiaryDetails getBeneficiaryDetails(
          BeneficiaryDetails detail, BeneficiaryDetailsRequest request, AtomicInteger totalCount) {
    try {
      // Get beneficiaries based on status
      List<Beneficiary> beneficiaries = getBeneficiaries(detail.getFileReferenceNo(),
              request.getStatus());

      if (request.getBenTypeAction() != null && Objects.equals(request.getStatus(), "Failure")) {
        beneficiaries = setTypeActionBeneficiariesOnFailure(beneficiaries,
                request.getBenTypeAction(), request.getFileReferenceNo());
      } else if (request.getBenTypeAction() != null) {
        beneficiaries = setTypeActionBeneficiaries(beneficiaries,
                request.getBenTypeAction(), request.getFileReferenceNo());
      }

      // searchBy if 3 or more characters
      String searchBy = request.getSearchBy();
      if (searchBy != null && searchBy.trim().length() >= 3) {
        String searchLower = searchBy.trim().toLowerCase();
        beneficiaries = beneficiaries.stream().filter(b -> b.getName() != null && b.getName().toLowerCase().contains(searchLower) || b.getAccountNumber() != null && b.getAccountNumber().toLowerCase().contains(searchLower))
                .toList();
      }

      // Store total count
      totalCount.set(beneficiaries.size());

      setCountsAndStatus(detail, request.getStatus());

      List<Beneficiary> paginateResults = paginateResult(request, beneficiaries);

      detail.setBeneficiaries(paginateResults);
    } catch (DataAccessException dataAccessException) {
      logger.info("Data access exception occurred while fetching beneficiary details");
      throw new TechnicalException(dataAccessException.getMessage(), ErrorCodes.DB_ACCESS_FAILURE);
    }
    return detail;
  }


  private List<Beneficiary> getBeneficiaries(String fileRefNo, String status) {
    if (Objects.equals(status, "All")) {
      return manageFileBeneficiaryDaoImpl.getAllBeneficiaries(fileRefNo);
    } else {
      return manageFileBeneficiaryDaoImpl.getBeneficiariesByStatus(fileRefNo, status);
    }
  }

  private void setCountsAndStatus(BeneficiaryDetails detail, String status) {
    // Get counts from DAO
    Map<String, Integer> totalCounts = manageFileBeneficiaryDaoImpl
            .getBeneficiaryCounts(detail.getFileReferenceNo());

    // Set counts
    detail.setBeneficiaryStatusCount(totalCounts);
    // Set count summary
    if (Objects.equals(status, "All")) {
      Map<String, Integer> actionTypeCounts = manageFileBeneficiaryDaoImpl
              .getActionTypeCounts(detail.getFileReferenceNo());
      detail.setCountSummary(getBeneficiaryRequestTypes(actionTypeCounts));
    } else {
      Map<String, Integer> actionTypeCountsByStatus = manageFileBeneficiaryDaoImpl
              .getActionTypeCountsByStatus(detail.getFileReferenceNo(), status);
      detail.setCountSummary(getBeneficiaryRequestTypes(actionTypeCountsByStatus));
    }

    // Set approval status
    detail.setApprovalStatus(determineApprovalStatus(
            totalCounts.getOrDefault(BENEFICIARY_COUNT, 0),
            totalCounts.getOrDefault(APPROVED_COUNT, 0),
            totalCounts.getOrDefault(REJECTED_COUNT, 0),
            totalCounts.getOrDefault(PENDING_COUNT, 0)));
  }

  private List<Beneficiary> paginateResult(
          BeneficiaryDetailsRequest request, List<Beneficiary> beneficiaries) {
    int start = (request.getPageNo() - 1) * request.getPageSize();
    int end = Math.min(start + request.getPageSize(), beneficiaries.size());
    return start >= beneficiaries.size() ? Collections.emptyList()
            : beneficiaries.subList(start, end);
  }

  private List<Beneficiary> setTypeActionBeneficiariesOnFailure(
          List<Beneficiary> beneficiaries, String benTypeAction, String fileRefNo) {
    List<Beneficiary> result = new ArrayList<>();
    for (Beneficiary beneficiary : beneficiaries) {
      List<Beneficiary> actionBeneficiaries = manageFileBeneficiaryDaoImpl
              .getBeneficiariesByTypeActionOnFailure(
                      beneficiary.getName(), beneficiary.getAccountNumber(),
                      beneficiary.getCode(), benTypeAction, fileRefNo);
      result.addAll(actionBeneficiaries);
    }
    return result;
  }

  private List<Beneficiary> setTypeActionBeneficiaries(List<Beneficiary> beneficiaries,
                                                       String benTypeAction, String fileRefNo) {
    List<Beneficiary> result = new ArrayList<>();
    for (Beneficiary beneficiary : beneficiaries) {
      List<Beneficiary> actionBeneficiaries = manageFileBeneficiaryDaoImpl
              .getBeneficiariesByTypeAction(beneficiary.getName(), beneficiary.getAccountNumber(),
                      beneficiary.getCode(), benTypeAction, fileRefNo);
      result.addAll(actionBeneficiaries);
    }
    return result;
  }

  public UploaderResponse getUploaderList(CommonRequestPayload request) {
    logger.info("Inside the ManageFileBeneficiaryListServiceImpl getUploaderList STARTS");

    String corporateId = request.getCorporateAlias();
    List<String> uploaderList;
    // Get data from DAO
    uploaderList = manageFileBeneficiaryDaoImpl.getUploaderList(corporateId, request.getUserName());

    UploaderResponse uploaderResponse = new UploaderResponse();

    uploaderResponse.setUploaders(uploaderList);
    logger.info("Inside the ManageFileBeneficiaryListServiceImpl "
            + "getUploaderList ENDS");
    // GET UPLOADER NAMES
    return uploaderResponse;
  }

  private String determineApprovalStatus(int total, int approved, int rejected, int pending) {
    if (approved == total && total > 0) {
      return "Approved";
    }
    if (rejected == total && total > 0) {
      return "Rejected";
    }
    if (approved > 0 || rejected > 0) {
      return "Partially Approved";
    }
    if (pending > 0) {
      return "Pending";
    }
    return "-";
  }

  private List<BeneficiaryRequestType> getBeneficiaryRequestTypes(
          Map<String, Integer> countingMap) {
    return List.of(new BeneficiaryRequestType(SAME, ADD, countingMap
                    .getOrDefault(SAME_BANK_ADD, 0)),
            new BeneficiaryRequestType(SAME, DELETE, countingMap
                    .getOrDefault(SAME_BANK_DELETE, 0)),
            new BeneficiaryRequestType(OTHER, ADD, countingMap
                    .getOrDefault(OTHER_BANK_ADD, 0)),
            new BeneficiaryRequestType(OTHER, DELETE, countingMap
                    .getOrDefault(OTHER_BANK_DELETE, 0)));
  }


  @Override
  public int approveBeneficiary(ApproveRejectBeneRequest approveRejectBeneRequest) {

    int approvedCount = 0;
    try {
      /*
       * Get corporate user cooling limit
       */
      int coolingPeriod = Integer.parseInt(Optional.ofNullable(manageFileBeneficiaryDaoImpl.getValueFromNameValueMasterByNameAndStatus(CORPORATE_USER_COOLING_LIMIT))
              .orElseThrow(() -> new ValidationException(INVALID_COOLING_PERIOD, "")));
      logger.info("Cooling period limit for corporate user is {}", coolingPeriod);
      /*
       * if approval/Rejection requested on 'type & action'
       */
      if (approveRejectBeneRequest.getBeneActionLevel() == ACTION_BY_TYPE_ACTION) {
        logger.info("Approval requested for all beneficiaries in a category");
        if (ZERO == coolingPeriod)
          approvedCount = approveBeneficiaryByTypeAction(approveRejectBeneRequest);
        else
          approvedCount = approveBeneficiaryByTypeActionWithCoolingPeriod(approveRejectBeneRequest);
      }
      /*
       * if 1 or more beneficiaries selected for approval
       */
      else if (approveRejectBeneRequest.getBeneActionLevel() == ACTION_BY_BENEFICIARY) {
        logger.info("Approval requested in beneficiary level");
        if (ZERO == coolingPeriod)
          approvedCount = approveBeneficiaryByOid(approveRejectBeneRequest);
        else
          approvedCount = approveBeneficiaryByOidWithCoolingPeriod(approveRejectBeneRequest);

      }
      manageFileBeneficiaryDaoImpl.validateAndSaveToWACReferenceStatus(approveRejectBeneRequest.getFileReferenceNo());
    } catch (NumberFormatException numberFormatException) {
      logger.info("Not able to parse cooling period value");
      throw new ValidationException(INVALID_COOLING_PERIOD, "Invalid corporate user cooling period");
    } catch (DataAccessException dataAccessException) {
      logger.info("Data access exception occurred while approving beneficiary");
      throw new TechnicalException(dataAccessException.getMessage(), ErrorCodes.DB_ACCESS_FAILURE);
    }
    return approvedCount;
  }

  private int approveBeneficiaryByOidWithCoolingPeriod(ApproveRejectBeneRequest approveRejectBeneRequest) {
    return ZERO;
  }

  /**
   * This method is to reject beneficiaries
   *
   * @param approveRejectBeneRequest
   * @return int number of records updated
   */
  @Override
  public int rejectBeneficiary(ApproveRejectBeneRequest approveRejectBeneRequest) {

    int rejectedCount = 0;
    try {
      /*
       * if rejection requested on 'type & action'
       * ('type & action' : same bank add, same bank delete, other bank add, other bank delete)
       */
      if (approveRejectBeneRequest.getBeneActionLevel() == ACTION_BY_TYPE_ACTION) {
        logger.info("Rejection requested for all beneficiaries in a category");
        rejectedCount = rejectBeneficiaryByTypeAction(approveRejectBeneRequest);
      }

      /*
       * if 1 or more beneficiaries selected for rejection
       */
      else if (approveRejectBeneRequest.getBeneActionLevel() == ACTION_BY_BENEFICIARY) {
        logger.info("Rejection requested in beneficiary level");
        rejectedCount = rejectBeneficiaryByOid(approveRejectBeneRequest);
      }
    } catch (DataAccessException dataAccessException) {
      logger.info("Data access exception occurred while rejecting beneficiary");
      throw new TechnicalException(dataAccessException.getMessage(), ErrorCodes.DB_ACCESS_FAILURE);
    }
    return rejectedCount;
  }

  /**
   * @param approveRejectBeneRequest
   * @return int number of beneficiaries approved
   */
  public int approveBeneficiaryByTypeAction(ApproveRejectBeneRequest approveRejectBeneRequest) {
    logger.info("approveBeneficiaryByTypeAction() - ApproveRejectBeneRequest : {}", approveRejectBeneRequest);
    int approvedCount = switch (approveRejectBeneRequest.getBeneTypeAction()) {
      case SAME_BANK_ADD_BENE -> {
        SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                .addValue(STATUS, 1)
                .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());
        logger.info("Same Bank-Add approval - TYPE");
        yield manageFileBeneficiaryDaoImpl.update(APPROVE_OR_REJECT_3P_BY_TYPE, parameters);
      }
      case OTHER_BANK_ADD_BENE -> {
        SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                .addValue(STATUS, ACTIVE)
                .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());
        logger.info("Other Bank-Add approval - TYPE");
        yield manageFileBeneficiaryDaoImpl.update(APPROVE_OR_REJECT_IBTP_BY_TYPE, parameters);
      }
      case SAME_BANK_DELETE_BENE -> {
        if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType())) {
          SqlParameterSource parameters = new MapSqlParameterSource()
                  .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                  .addValue(STATUS, 3)
                  .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                  .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());
          logger.info("Same Bank-Delete approval - COMPOSITE - TYPE");
          yield manageFileBeneficiaryDaoImpl.update(APPROVE_D3P_BY_TYPE_COMPBEN, parameters);
        } else {
          SqlParameterSource parameters = new MapSqlParameterSource()
                  .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                  .addValue(STATUS, APPROVED)
                  .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                  .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());
          logger.info("Same Bank-Delete approval - NON-COMPOSITE - TYPE");
          yield manageFileBeneficiaryDaoImpl.update(APPROVE_D3P_BY_TYPE_BEN, parameters);
        }
      }
      case OTHER_BANK_DELETE_BENE -> {
        SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                .addValue(STATUS, INACTIVE)
                .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());
        logger.info("Other Bank-Delete approval - TYPE");
        yield manageFileBeneficiaryDaoImpl.update(APPROVE_DIBTP_BY_TYPE, parameters);
      }
      default -> throw new ValidationException(INVALID_TYPE_ACTION, "Invalid beneficiary type & action");
    };
    logger.info("Total beneficiary records approved is {} for file type {}", approvedCount, approveRejectBeneRequest.getBeneTypeAction());
    if (approvedCount <= 0) {
      throw new ValidationException(ManageBeneStatusCode.NO_RECORDS_TO_APPROVE, "No beneficiary found to approve");
    }
    if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType()))
      manageFileBeneficiaryDaoImpl.validateAndSaveToWACReferenceStatus(approveRejectBeneRequest.getFileReferenceNo());
    return approvedCount;
  }

  /**
   * @param approveRejectBeneRequest
   * @return int number of beneficiaries approved
   */
  public int approveBeneficiaryByOid(ApproveRejectBeneRequest approveRejectBeneRequest) {
    int[] batchApprovedCount = switch (approveRejectBeneRequest.getBeneTypeAction()) {
      case SAME_BANK_ADD_BENE -> {
        logger.info("Same Bank-Add approval - OID");
        yield manageFileBeneficiaryDaoImpl.batchUpdate(APPROVE_3P_BY_OID, approveRejectBeneRequest.getBeneficiaryIds()
                .stream().map(oid -> new MapSqlParameterSource()
                        .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                        .addValue(STATUS, ACTIVE)
                        .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                        .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
      }
      case OTHER_BANK_ADD_BENE -> {
        logger.info("Other Bank-Add approval - OID");
        yield manageFileBeneficiaryDaoImpl.batchUpdate(APPROVE_OR_REJECT_IBTP_BY_OID, approveRejectBeneRequest.getBeneficiaryIds()
                .stream().map(oid -> new MapSqlParameterSource()
                        .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                        .addValue(STATUS, ACTIVE)
                        .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                        .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
      }
      case SAME_BANK_DELETE_BENE -> {
        if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType())) {
          logger.info("Same Bank-Delete approval - COMPOSITE - OID");
          yield manageFileBeneficiaryDaoImpl.batchUpdate(APPROVE_D3P_BY_OID_COMPBEN, approveRejectBeneRequest.getBeneficiaryIds()
                  .stream().map(oid -> new MapSqlParameterSource()
                          .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                          .addValue(STATUS, 3)
                          .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                          .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
        } else {
          logger.info("Same Bank-Delete approval - NON-COMPOSITE - OID");
          yield manageFileBeneficiaryDaoImpl.batchUpdate(APPROVE_D3P_BY_OID_BEN, approveRejectBeneRequest.getBeneficiaryIds()
                  .stream().map(oid -> new MapSqlParameterSource()
                          .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                          .addValue(STATUS, APPROVED)
                          .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                          .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
        }
      }
      case OTHER_BANK_DELETE_BENE -> {
        logger.info("Other Bank-Delete approval - OID");
        yield manageFileBeneficiaryDaoImpl.batchUpdate(APPROVE_DIBTP_BY_OID, approveRejectBeneRequest.getBeneficiaryIds()
                .stream().map(oid -> new MapSqlParameterSource()
                        .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                        .addValue(STATUS, INACTIVE)
                        .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                        .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
      }
      default -> throw new ValidationException(INVALID_TYPE_ACTION, "Invalid beneficiary type & action");
    };
    int approvedCount = ZERO;
    if (Optional.ofNullable(batchApprovedCount).isPresent()) {
      logger.info("Batch update approved counts: {}", Arrays.toString(batchApprovedCount));
      approvedCount = Arrays.stream(batchApprovedCount).sum();
      logger.info("Total beneficiary records approved is {} for type & action {}", approvedCount, approveRejectBeneRequest.getBeneTypeAction());
      if (approvedCount <= 0) {
        throw new ValidationException(ManageBeneStatusCode.NO_RECORDS_TO_APPROVE, "No beneficiary found to approve");
      }
      if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType()))
        manageFileBeneficiaryDaoImpl.validateAndSaveToWACReferenceStatus(approveRejectBeneRequest.getFileReferenceNo());
    } else
      throw new TechnicalException(ErrorCodes.DB_ACCESS_FAILURE, "Something went wrong while accessing database.Please try later");
    return approvedCount;
  }

  public int approveBeneficiaryByTypeActionWithCoolingPeriod(ApproveRejectBeneRequest approveRejectBeneRequest) {
    return ZERO;
  }

  /**
   * @param approveRejectBeneRequest
   * @return int number of beneficiaries rejected
   */
  public int rejectBeneficiaryByTypeAction(ApproveRejectBeneRequest approveRejectBeneRequest) {
    int rejectedCount = switch (approveRejectBeneRequest.getBeneTypeAction()) {
      case SAME_BANK_ADD_BENE -> {
        logger.info("Same Bank-Add rejection - TYPE");
        SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                .addValue(STATUS, 2)
                .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());

        yield manageFileBeneficiaryDaoImpl.update(APPROVE_OR_REJECT_3P_BY_TYPE, parameters);
      }
      case OTHER_BANK_ADD_BENE -> {
        logger.info("Other Bank-Add rejection - TYPE");
        SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                .addValue(STATUS, REJECTED_SMALLCASE)
                .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());

        yield manageFileBeneficiaryDaoImpl.update(APPROVE_OR_REJECT_IBTP_BY_TYPE, parameters);
      }
      case SAME_BANK_DELETE_BENE -> {
        if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType())) {
          logger.info("Same Bank-Delete rejection - COMPOSITE - TYPE");
          SqlParameterSource parameters = new MapSqlParameterSource()
                  .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                  .addValue(STATUS, 1)
                  //can't be added to rtgs or 3rd party as there is no link after rejection
                  //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                  .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());
          yield manageFileBeneficiaryDaoImpl.update(REJECT_D3P_BY_TYPE_COMPBEN, parameters);
        } else {
          logger.info("Same Bank-Delete rejection - NON-COMPOSITE - TYPE");
          SqlParameterSource parameters = new MapSqlParameterSource()
                  .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                  .addValue(STATUS, REJECTED)
                  //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                  .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());

          yield manageFileBeneficiaryDaoImpl.update(REJECT_D3P_BY_TYPE_BEN, parameters);
        }
      }
      case OTHER_BANK_DELETE_BENE -> {
        logger.info("Other Bank-Delete rejection - TYPE");
        SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                .addValue(STATUS, ACTIVE)
                //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                .addValue(SNO, approveRejectBeneRequest.getFileReferenceNo());

        yield manageFileBeneficiaryDaoImpl.update(REJECT_DIBTP_BY_TYPE, parameters);
      }
      default -> throw new ValidationException(INVALID_TYPE_ACTION, "Invalid beneficiary type & action");
    };
    logger.info("Total beneficiary records rejected is {} for file type {}", rejectedCount, approveRejectBeneRequest.getBeneTypeAction());

    if (rejectedCount <= ZERO) {
      logger.info("No records found to reject");
      throw new ValidationException(ManageBeneStatusCode.NO_RECORDS_TO_REJECT, "No beneficiary found to reject");
    }

    saveToWACAuditTrail("rejectBeneficiaryByTypeAction", "", approveRejectBeneRequest);

    if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType())) {
      logger.info("ValidateAndSaveToWACReferenceStatus() is invoked as file type is COMPOSITE beneficiary");
      manageFileBeneficiaryDaoImpl.validateAndSaveToWACReferenceStatus(approveRejectBeneRequest.getFileReferenceNo());
    }
    return rejectedCount;
  }

  /**
   * @param approveRejectBeneRequest
   * @return int number of beneficiaries rejected
   */
  public int rejectBeneficiaryByOid(ApproveRejectBeneRequest approveRejectBeneRequest) {
    int[] batchRejectedCount = switch (approveRejectBeneRequest.getBeneTypeAction()) {
      case SAME_BANK_ADD_BENE -> {
        logger.info("Same Bank-Add rejection - OID");
        yield manageFileBeneficiaryDaoImpl.batchUpdate(REJECT_3P_BY_OID, approveRejectBeneRequest.getBeneficiaryIds()
                .stream().map(oid -> new MapSqlParameterSource()
                        .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                        .addValue(STATUS, 2)
                        .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                        //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                        .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
      }
      case OTHER_BANK_ADD_BENE -> {
        logger.info("Other Bank-Add rejection - OID");
        yield manageFileBeneficiaryDaoImpl.batchUpdate(APPROVE_OR_REJECT_IBTP_BY_OID, approveRejectBeneRequest.getBeneficiaryIds()
                .stream().map(oid -> new MapSqlParameterSource()
                        .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                        .addValue(STATUS, REJECTED_SMALLCASE)
                        .addValue(USERNAME, approveRejectBeneRequest.getUserName())
                        //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                        .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
      }
      case SAME_BANK_DELETE_BENE -> {
        if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType())) {
          logger.info("Same Bank-Delete rejection - COMPOSITE - OID");
          yield manageFileBeneficiaryDaoImpl.batchUpdate(REJECT_D3P_BY_OID_COMPBEN, approveRejectBeneRequest.getBeneficiaryIds()
                  .stream().map(oid -> new MapSqlParameterSource()
                          .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                          .addValue(STATUS, 1)
                          //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                          .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
        } else {
          logger.info("Same Bank-Delete rejection - NON-COMPOSITE - OID");
          yield manageFileBeneficiaryDaoImpl.batchUpdate(REJECT_D3P_BY_OID_BEN, approveRejectBeneRequest.getBeneficiaryIds()
                  .stream().map(oid -> new MapSqlParameterSource()
                          .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                          .addValue(STATUS, REJECTED)
                          //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                          .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
        }
      }
      case OTHER_BANK_DELETE_BENE -> {
        logger.info("Other Bank-Delete rejection - OID");
        yield manageFileBeneficiaryDaoImpl.batchUpdate(REJECT_DIBTP_BY_OID, approveRejectBeneRequest.getBeneficiaryIds()
                .stream().map(oid -> new MapSqlParameterSource()
                        .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
                        //.addValue("rejectionReason", approveRejectBeneRequest.getComments())
                        .addValue(OID, oid)).toArray(SqlParameterSource[]::new));
      }
      default -> throw new ValidationException(INVALID_TYPE_ACTION, "Invalid beneficiary type & action");
    };
    int rejectedCount = ZERO;
    if (Optional.ofNullable(batchRejectedCount).isPresent()) {
      logger.info("Batch update rejected counts: {}", Arrays.toString(batchRejectedCount));
      rejectedCount = Arrays.stream(batchRejectedCount).sum();
      logger.info("Total beneficiary records rejected is {} for type & action {}", rejectedCount, approveRejectBeneRequest.getBeneTypeAction());
      if (rejectedCount <= ZERO) {
        logger.info(" No records found to reject");
        throw new ValidationException(ManageBeneStatusCode.NO_RECORDS_TO_REJECT, "No beneficiary found to reject");
      }
      approveRejectBeneRequest.getBeneficiaryIds().forEach(oid ->
              saveToWACAuditTrail("rejectBeneficiaryByOid", oid.toString(), approveRejectBeneRequest));
      if (COMPOSITE_BENE.equals(approveRejectBeneRequest.getFileType())) {
        logger.info(" ValidateAndSaveToWACReferenceStatus() is invoked as file type is COMPOSITE beneficiary");
        manageFileBeneficiaryDaoImpl.validateAndSaveToWACReferenceStatus(approveRejectBeneRequest.getFileReferenceNo());
      }
    } else
      throw new TechnicalException(ErrorCodes.DB_ACCESS_FAILURE, "Something went wrong while accessing database.Please try later");
    return rejectedCount;
  }

  public void saveToWACAuditTrail(String methodName, String oid, ApproveRejectBeneRequest approveRejectBeneRequest) {
    try {
      logger.info("saveToWACAuditTrail() - Method : {} , oid : {}", methodName, oid);
      SqlParameterSource sqlParameterSource = new MapSqlParameterSource()
              .addValue("auditCode", COMPB001)
              .addValue("className", this.getClass().getName())
              .addValue("methodName", methodName)
              .addValue(USERNAME, approveRejectBeneRequest.getUserName())
              .addValue(FILENAME, approveRejectBeneRequest.getFileName())
              .addValue("fileType", approveRejectBeneRequest.getBeneTypeAction())
              .addValue(CORPORATE_ID, approveRejectBeneRequest.getCorporateAlias())
              .addValue("rejectedId", oid).addValue("field6", "")
              .addValue("field7", "").addValue("field8", "")
              .addValue("field9", "").addValue("field10", "")
              .addValue("field11", "").addValue("field12", "")
              .addValue("field13", "").addValue("field14", "")
              .addValue("field15", "").addValue("field16", "")
              .addValue("field17", "").addValue("field18", "")
              .addValue("field19", "").addValue("field20", "");
      int count = manageFileBeneficiaryDaoImpl.update(SAVE_WAC_AUDIT_TRAIL, sqlParameterSource);
      logger.info("Saved to WAC_AUDIT_TRAIL - Inserted Row count in audit {}.", count);
    } catch (DataAccessException dataAccessException) {
      logger.error("DataAccessException while saving details to WAC_AUDIT_TRAIL : {}", dataAccessException.getMessage());
    } catch (Exception exception) {
      logger.info("Failed to insert in wac_audit_trail for userName : {} and fileName : {} ", approveRejectBeneRequest.getUserName(), approveRejectBeneRequest.getFileName());
      logger.error("Exception message : {} ", exception.getMessage());
    }
  }


}
