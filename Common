import java.text.SimpleDateFormat;
import java.util.Date;

public class EChequeGenerator {

    public static class EChequeResult {
        public String masterInsertQuery;
        public String[] paramInsertQueries;
        public String errorMessage;
    }

    public EChequeResult insertecheque(
            CorporateLeg p_debitleg, 
            CorporateLeg[] p_creditleg,
            String p_transactionpath) {

        EChequeResult result = new EChequeResult();
        final int constvalue = 1;
        final int constzerovalue = 0;

        try {
            if (p_debitleg != null) {
                // Extract values from debit leg
                String strrefno = p_debitleg.reference_no;
                String strdebitacc = p_debitleg.account_no;
                String strdebitbr = p_debitleg.branch_code;
                double lngdebitamount = Double.parseDouble(p_debitleg.amount);
                
                // Handle dates
                Date echeque_date;
                int schvalue = p_debitleg.scheduled;
                int schprocessed;
                Date schdate;

                if (schvalue == 0) {
                    echeque_date = p_debitleg.scheduled_date != null ? 
                                  p_debitleg.scheduled_date : new Date();
                    schprocessed = 1;
                    schdate = p_debitleg.scheduled_date;
                } else {
                    echeque_date = new Date();
                    schprocessed = 0;
                    schdate = new Date();
                }

                // Other fields
                String strcorprefno = p_debitleg.thirdpartyref;
                String strmerchcode = p_debitleg.merchant_code;
                String strdesc = p_debitleg.remarks;
                String strusername = p_debitleg.username;
                String l_businessline_id = p_debitleg.businessline_id;
                int strcurrentauthlevel = p_debitleg.current_auth_level;
                String strcorporateid = p_debitleg.corporate_id;
                String strsupplierid = p_debitleg.supplier_id;
                String strbeneficiary = p_debitleg.beneficiary;
                String strfilename = ""; // Assuming empty if not provided

                // Determine mc_processed
                String strmcprocessed = determineMcProcessed(p_transactionpath, strrefno);

                // Get next OID - in real code this would come from a sequence
                long intoid = System.currentTimeMillis(); // Temporary placeholder

                // Handle GVF RTGS commission transaction
                String l_credit_status_code = null;
                if ((strrefno.startsWith("CR") || strrefno.startsWith("CN")) && 
                    strcorporateid.startsWith("IM")) {
                    // This would normally come from a database query
                    l_credit_status_code = "'gvf_process_eod'"; // Example value
                }

                // Generate master insert query
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                result.masterInsertQuery = String.format(
                    "INSERT INTO sbicorp_echeque_master " +
                    "(OID, echeque_no, store_id, creation_time, status, " +
                    "deleted, last_mod_time, account_no, branch_code, " +
                    "echeque_date, echeque_amount, description, audited, " +
                    "maker, current_auth_level, audited_by, " +
                    "system_edited, system_edited_reason, READ, " +
                    "corporate_id, auth_type, corrupted, " +
                    "corruption_reason, scheduled, scheduled_date, " +
                    "processed, beneficiary, auth_option, " +
                    "corp_ref_no, file_name, supplier_id, reference_no, " +
                    "mc_processed, merchant_code, auth1_name, auth2_name, " +
                    "businessline_id, email_sent, scheduled_date_string, credit_status_code) " +
                    "VALUES (%d, '%s', 101, SYSDATE, 1, " +
                    "0, SYSDATE, '%s', '%s', " +
                    "TO_DATE('%s', 'YYYY-MM-DD HH24:MI:SS'), %.2f, '%s', %d, " +
                    "'%s', %d, null, " +
                    "%d, NULL, %d, " +
                    "'%s', %d, %d, " +
                    "NULL, %d, TO_DATE('%s', 'YYYY-MM-DD HH24:MI:SS'), " +
                    "%d, '%s', %d, " +
                    "'%s', '%s', '%s', '%s', " +
                    "'%s', '%s', NULL, NULL, " +
                    "'%s', %d, NULL, %s)",
                    intoid, strrefno, 
                    strdebitacc, strdebitbr, 
                    dateFormat.format(echeque_date), lngdebitamount, strdesc, constvalue,
                    strusername, strcurrentauthlevel,
                    constvalue, constvalue,
                    strcorporateid, constzerovalue, constvalue,
                    schvalue, dateFormat.format(schdate),
                    schprocessed, strbeneficiary, constvalue,
                    strcorprefno, strfilename, strsupplierid, strrefno,
                    strmcprocessed, strmerchcode,
                    l_businessline_id, constvalue, 
                    l_credit_status_code != null ? l_credit_status_code : "NULL");

                // Generate parameter insert queries if additional params exist
                if (p_debitleg.additionalparams != null && !p_debitleg.additionalparams.isEmpty()) {
                    String[] params = p_debitleg.additionalparams.split("#\\|#");
                    result.paramInsertQueries = new String[params.length - 1];
                    
                    for (int i = 1; i < params.length; i++) {
                        String[] keyValue = params[i].split("`~`");
                        if (keyValue.length >= 2) {
                            result.paramInsertQueries[i-1] = String.format(
                                "INSERT INTO sbicorp_echeque_supplier_param " +
                                "(OID, param, VALUE, reference_no) " +
                                "VALUES (%d, '%s', '%s', '%s')",
                                intoid, keyValue[0], keyValue[1], strrefno);
                        }
                    }
                }
            }
        } catch (Exception e) {
            result.errorMessage = e.getMessage();
        }

        return result;
    }

    private String determineMcProcessed(String p_transactionpath, String strrefno) {
        if ("CC".equals(p_transactionpath) || "NCNC".equals(p_transactionpath) || 
            strrefno.startsWith("ID")) {
            return "0";
        } else if ("CNC".equals(p_transactionpath) || "NCC".equals(p_transactionpath) || 
                 "CMC".equals(p_transactionpath) || "NCMC".equals(p_transactionpath)) {
            return "1";
        }
        return strrefno.startsWith("CB") ? "0" : "1";
    }

    public static class CorporateLeg {
        public String reference_no;
        public String account_no;
        public String branch_code;
        public String amount;
        public int scheduled;
        public Date scheduled_date;
        public String thirdpartyref;
        public String merchant_code;
        public String remarks;
        public String username;
        public String businessline_id;
        public int current_auth_level;
        public String corporate_id;
        public String supplier_id;
        public String beneficiary;
        public String additionalparams;
    }
}








import java.sql.*;
import java.util.Date;

public class EChequeService {
    
    // Database connection - TODO: Get this properly in your application
    private Connection connection;
    
    // Constants matching the PL/SQL version
    private final int constvalue = 1;
    private final int constzerovalue = 0;
    
    public String insertecheque(CorporateLeg p_debitleg, CorporateLeg[] p_creditleg, 
                              String p_transactionpath) {
        
        // Initialize variables with same names as PL/SQL
        String strrefno = null;
        String strdebitacc = null;
        String strdebitbr = null;
        String strcorporateid = null;
        String strcorprefno = null;
        String strmerchcode = null;
        String strdesc = null;
        long intoid = 0;
        Date echeque_date = null;
        String strusername = null;
        String strmcprocessed = null;
        double lngdebitamount = 0;
        Date schdate = null;
        int schvalue = 1;
        int schprocessed = 0;
        String strsupplierid = null;
        String strfilename = null;
        int strcurrentauthlevel = 1;
        String sqlerrorcode = "";
        String strbeneficiary = null;
        String l_businessline_id = null;
        String l_credit_status_code = null;
        
        try {
            if (p_debitleg != null) {
                // Set values from debit leg object
                strrefno = p_debitleg.reference_no;
                strdebitacc = p_debitleg.account_no;
                strdebitbr = p_debitleg.branch_code;
                lngdebitamount = Double.parseDouble(p_debitleg.amount);
                
                // Handle scheduled date logic
                if (p_debitleg.scheduled == 0) {
                    if (p_debitleg.scheduled_date != null) {
                        echeque_date = p_debitleg.scheduled_date;
                    }
                    schprocessed = 1;
                } else {
                    echeque_date = new Date(); // Current date/time
                    schprocessed = 0;
                }
                
                // Set other fields
                strcorprefno = p_debitleg.thirdpartyref;
                strmerchcode = p_debitleg.merchant_code;
                strdesc = p_debitleg.remarks;
                strusername = p_debitleg.username;
                l_businessline_id = p_debitleg.businessline_id;
                strcurrentauthlevel = p_debitleg.current_auth_level;
                schvalue = p_debitleg.scheduled;
                
                if (schvalue == 0) {
                    schdate = p_debitleg.scheduled_date;
                } else {
                    schdate = new Date();
                }
                
                strcorporateid = p_debitleg.corporate_id;
                strsupplierid = p_debitleg.supplier_id;
                strbeneficiary = p_debitleg.beneficiary;
                
                // Determine mc_processed value
                if (p_transactionpath.equals("CC") || 
                    p_transactionpath.equals("NCNC") || 
                    strrefno.startsWith("ID")) {
                    strmcprocessed = "0";
                } else if (p_transactionpath.equals("CNC") || 
                         p_transactionpath.equals("NCC") || 
                         p_transactionpath.equals("CMC") || 
                         p_transactionpath.equals("NCMC")) {
                    strmcprocessed = "1";
                }
                
                if (strrefno.startsWith("CB")) {
                    strmcprocessed = "0";
                } else {
                    strmcprocessed = "1";
                }
                
                // Get next OID from sequence
                String oidQuery = "SELECT oid_sequence.NEXTVAL FROM DUAL";
                Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery(oidQuery);
                if (rs.next()) {
                    intoid = rs.getLong(1);
                }
                
                // Handle GVF RTGS commission transaction
                if ((strrefno.startsWith("CR") || strrefno.startsWith("CN")) && 
                    strcorporateid.startsWith("IM")) {
                    
                    String vendorQuery = "SELECT decode(COUNT(1),0,null,'gvf_process_eod') " +
                                       "FROM SBI_GVF_VENDOR_MASTER WHERE VENDOR_CODE = ?";
                    PreparedStatement pstmt = connection.prepareStatement(vendorQuery);
                    pstmt.setString(1, l_businessline_id);
                    ResultSet vendorRs = pstmt.executeQuery();
                    if (vendorRs.next()) {
                        l_credit_status_code = vendorRs.getString(1);
                    }
                }
                
                // Insert into echeque master table
                String insertQuery = "INSERT INTO sbicorp_echeque_master " +
                    "(OID, echeque_no, store_id, creation_time, status, " +
                    "deleted, last_mod_time, account_no, branch_code, " +
                    "echeque_date, echeque_amount, description, audited, " +
                    "maker, current_auth_level, audited_by, " +
                    "system_edited, system_edited_reason, READ, " +
                    "corporate_id, auth_type, corrupted, " +
                    "corruption_reason, scheduled, scheduled_date, " +
                    "processed, beneficiary, auth_option, " +
                    "corp_ref_no, file_name, supplier_id, reference_no, " +
                    "mc_processed, merchant_code, auth1_name, auth2_name, " +
                    "businessline_id, email_sent, scheduled_date_string, credit_status_code) " +
                    "VALUES (?, ?, 101, SYSDATE, 1, " +
                    "0, SYSDATE, ?, ?, " +
                    "?, ?, ?, ?, " +
                    "?, ?, null, " +
                    "1, NULL, 1, " +
                    "?, 0, 1, " +
                    "NULL, ?, ?, " +
                    "?, ?, 1, " +
                    "?, ?, ?, ?, " +
                    "?, ?, NULL, NULL, " +
                    "?, 1, NULL, ?)";
                
                PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                // Set all parameters...
                insertStmt.setLong(1, intoid);
                insertStmt.setString(2, strrefno);
                // ... (set all other parameters)
                insertStmt.executeUpdate();
                
                // Handle additional parameters
                if (p_debitleg.additionalparams != null && !p_debitleg.additionalparams.isEmpty()) {
                    String[] params = p_debitleg.additionalparams.split("#\\|#");
                    for (int i = 1; i < params.length; i++) {
                        String[] keyValue = params[i].split("`~`");
                        if (keyValue.length >= 2) {
                            String paramSql = "INSERT INTO sbicorp_echeque_supplier_param " +
                                           "(OID, param, VALUE, reference_no) VALUES (?, ?, ?, ?)";
                            PreparedStatement paramStmt = connection.prepareStatement(paramSql);
                            paramStmt.setLong(1, intoid);
                            paramStmt.setString(2, keyValue[0]); // param name
                            paramStmt.setString(3, keyValue[1]); // param value
                            paramStmt.setString(4, strrefno);
                            paramStmt.executeUpdate();
                        }
                    }
                }
            }
        } catch (SQLException e) {
            sqlerrorcode = e.getMessage();
        }
        
        return sqlerrorcode;
    }
    
    // Simple CorporateLeg class matching PL/SQL structure
    public static class CorporateLeg {
        public String reference_no;
        public String account_no;
        public String branch_code;
        public String amount;
        public int scheduled;
        public Date scheduled_date;
        public String thirdpartyref;
        public String merchant_code;
        public String remarks;
        public String username;
        public String businessline_id;
        public int current_auth_level;
        public String corporate_id;
        public String supplier_id;
        public String beneficiary;
        public String additionalparams;
    }
}
