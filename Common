package com.sbi.yb.repository.impl;
import com.sbi.yb.constants.QueryConstants;
import com.sbi.yb.model.Beneficiary;
import com.sbi.yb.model.BeneficiaryDetailsResponse;
import com.sbi.yb.model.BeneficiaryFileRequest;
import com.sbi.yb.model.BeneficiaryFileResponse;
import com.sbi.yb.repository.ManageFileBeneficiaryDao;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import static com.sbi.yb.constants.QueryConstants.*;
import static com.sbi.yb.constants.UtilConstants.*;


/**
 * @author V1018411
 * @version 1.0
 * @since 2025
 */


@Repository
public class ManageFileBeneficiaryDaoImpl implements ManageFileBeneficiaryDao {

  private static final Logger logger = LoggerFactory.getLogger(ManageFileBeneficiaryDaoImpl.class);

  private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;

  /**
   * Parameterized constructor.
   */
  public ManageFileBeneficiaryDaoImpl(final NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
    this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
  }


  @Override
  public List<BeneficiaryFileResponse> getBeneFiles(
          BeneficiaryFileRequest request, AtomicInteger totalCount) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(CORPID, request.getCorporateAlias())
            .addValue("offset", (request.getPageNo() - 1) * request.getPageSize())
            .addValue("limit", request.getPageNo() * request.getPageSize())
            .addValue("tabName", request.getTabName());

    String searchCondition = "";
    if (request.getSearchBy() != null && request.getSearchBy().length() >= 3) {
      searchCondition = "AND (a.SNO LIKE :searchValue OR "
              + "LOWER(a.ADDITIONAL_FIELD6) LIKE LOWER(:searchValue)) ";
      params.addValue("searchValue", "%" + request.getSearchBy() + "%");
    }

    String uploaderCondition = "";
    if (request.getFilterBy() != null && request.getFilterBy().containsKey("uploader")) {
      uploaderCondition = "AND a.USERNAME = :username ";
      params.addValue("username", request.getFilterBy().get("uploader"));
    }

    String uploadStatusFilter = "";
    if (request.getFilterBy() != null && request.getFilterBy().containsKey(UPLOADSTATUS)) {
      uploadStatusFilter = " AND br.uploadStatus = :uploadStatus";
      params.addValue(UPLOADSTATUS, request.getFilterBy().get(UPLOADSTATUS));
    }

    String approvalStatusFilter = "";
    if (request.getFilterBy() != null && request.getFilterBy().containsKey(APPROVALSTATUS)) {
      approvalStatusFilter = " AND br.approvalStatus = :approvalStatus";
      params.addValue(APPROVALSTATUS, request.getFilterBy().get(APPROVALSTATUS));
    }

    String fileTypeFilter = "";
    if (request.getFilterBy() != null && request.getFilterBy().containsKey(FILETYPE)) {
      fileTypeFilter = " AND br.fileType = :fileType";
      params.addValue(FILETYPE, request.getFilterBy().get(FILETYPE));
    }

    String paginatedQuery = GET_FILE_LIST
            .replace("{searchCondition}", searchCondition)
            .replace("{uploaderCondition}", uploaderCondition)
            .replace("{paginationCondition}", "WHERE rn > :offset AND rn <= :limit")
            .replace("{uploadStatusFilter}", uploadStatusFilter)
            .replace("{approvalStatusFilter}", approvalStatusFilter)
            .replace("{fileTypeFilter}", fileTypeFilter);

    String countQuery = "SELECT COUNT(*) FROM ("
            + GET_FILE_LIST
            .replace("{searchCondition}", searchCondition)
            .replace("{uploaderCondition}", uploaderCondition)
            .replace("{paginationCondition}", "")
            .replace("{uploadStatusFilter}", uploadStatusFilter)
            .replace("{approvalStatusFilter}", approvalStatusFilter)
            .replace("{fileTypeFilter}", fileTypeFilter)
            + ") total";

    Optional<Integer> result = Optional.ofNullable(
            namedParameterJdbcTemplate.queryForObject(countQuery, params, Integer.class));
    totalCount.set(result.orElse(0));

    return namedParameterJdbcTemplate.query(paginatedQuery, params, new BeneficiaryFileRowMapper());
  }

  @Override
  public BeneficiaryDetailsResponse getFileDetails(String corpId, String fileRefNo) {
    logger.info("getFileDetails() STARTS ");
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(CORPID, corpId)
            .addValue(FILE_REFERENCE_NO, fileRefNo)
            .addValue(FILETYPE, ACC_BENE_FILE_TYPES);

    logger.info("getFileDetails() ENDS ");

    return namedParameterJdbcTemplate.queryForObject(FETCH_UPLOADED_FILE_DETAILS,
            params, new BeneficiaryDetailsRowMapper());
  }

  @Override
  public Map<String, Integer> getBeneficiaryCounts(String fileRefNo) {
    Map<String, Object> result = namedParameterJdbcTemplate.queryForMap(
            GET_FILE_DETAILS_COUNT,
            Collections.singletonMap("fileRefNo", fileRefNo)
    );

    Map<String, Integer> countMap = new HashMap<>();
    countMap.put(BENEFICIARY_COUNT, ((Number) result.get(BENEFICIARY_COUNT)).intValue());
    countMap.put(APPROVED_COUNT, ((Number) result.get(APPROVED_COUNT)).intValue());
    countMap.put(REJECTED_COUNT, ((Number) result.get(REJECTED_COUNT)).intValue());
    countMap.put(PENDING_COUNT, ((Number) result.get(PENDING_COUNT)).intValue());
    countMap.put(VALIDATION_FAILURE_COUNT,
            ((Number) result.get(VALIDATION_FAILURE_COUNT)).intValue());

    return countMap;
  }

  @Override
  public List<Beneficiary> getAllBeneficiaries(String fileRefNo) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileRefNo);
    return namedParameterJdbcTemplate.query(
            COMBINED_WITH_STATUS, params, new BeneficiaryRowMapper());
  }

  @Override
  public List<Beneficiary> getBeneficiariesByStatus(String fileRefNo, String status) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileRefNo);

    return switch (status.toUpperCase()) {
      case "APPROVED" -> namedParameterJdbcTemplate.query(
              APPROVED_FILE_LIST, params, new BeneficiaryRowMapper());
      case "REJECTED" -> namedParameterJdbcTemplate.query(
              REJECTED_FILE_LIST, params, new BeneficiaryRowMapper());
      case "FAILURE" -> namedParameterJdbcTemplate.query(
              FAILURE_FILE_LIST, params, new BeneficiaryRowMapper());
      case "PENDING" -> namedParameterJdbcTemplate.query(
              SELECT_PENDING_FILES, params, new BeneficiaryRowMapper());
      default -> Collections.emptyList();
    };
  }

  @Override
  public Map<String, Integer> getActionTypeCounts(String fileRefNo) {
    Map<String, Integer> actionCounts = new HashMap<>();

    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileRefNo);

    Map<String, Object> result = namedParameterJdbcTemplate
            .queryForMap(SELECT_COUNT_BY_ACTION_TYPE, params);

    // Map results to action counts
    actionCounts.put(SAME_BANK_ADD, result.get(SAME_BANK_ADD) != null
            ? ((Number) result.get(SAME_BANK_ADD)).intValue() : 0);
    actionCounts.put(OTHER_BANK_ADD, result.get(OTHER_BANK_ADD) != null
            ? ((Number) result.get(OTHER_BANK_ADD)).intValue() : 0);
    actionCounts.put(SAME_BANK_DELETE, result.get(SAME_BANK_DELETE) != null
            ? ((Number) result.get(SAME_BANK_DELETE)).intValue() : 0);
    actionCounts.put(OTHER_BANK_DELETE, result.get(OTHER_BANK_DELETE) != null
            ? ((Number) result.get(OTHER_BANK_DELETE)).intValue() : 0);

    return actionCounts;
  }


  @Override
  public Map<String, Integer> getActionTypeCountsByStatus(String fileReferenceNo, String status) {

    String action = switch (status.toUpperCase()) {
      case "APPROVED" -> "Approved";
      case "REJECTED" -> "Rejected";
      case "PENDING" -> "Pending";
      case "FAILURE" -> "Failure";
      default -> status;
    };

    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileReferenceNo)
            .addValue("status", action);

    return namedParameterJdbcTemplate.queryForObject(
            SELECT_ACTION_TYPE_BY_STATUS,
            params,
            (rs, rowNum) -> {
              Map<String, Integer> actionCounts = new HashMap<>();
              actionCounts.put(SAME_BANK_ADD, rs.getInt(SAME_BANK_ADD));
              actionCounts.put(SAME_BANK_DELETE, rs.getInt(SAME_BANK_DELETE));
              actionCounts.put(OTHER_BANK_ADD, rs.getInt(OTHER_BANK_ADD));
              actionCounts.put(OTHER_BANK_DELETE, rs.getInt(OTHER_BANK_DELETE));
              return actionCounts;
            });
  }

  /**
   * Method for returning list of beneficiaries by action type.
   */
  public List<Beneficiary> getBeneficiariesByTypeAction(
          String fileName, String accountNumber, String code,
          String benTypeAction, String fileRefNo) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileRefNo)
            .addValue(FILENAME, fileName)
            .addValue("actNo", accountNumber)
            .addValue("code", code);

    if (benTypeAction.equalsIgnoreCase(SAME_BANK_ADD_BENE)) {
      return namedParameterJdbcTemplate.query(
              SELECT_3P_LIST, params, new BeneficiaryRowMapper());
    } else if (benTypeAction.equalsIgnoreCase(OTHER_BANK_ADD_BENE)) {
      return namedParameterJdbcTemplate.query(
              SELECT_IBTP_LIST, params, new BeneficiaryRowMapper());
    } else if (benTypeAction.equalsIgnoreCase(SAME_BANK_DELETE_BENE)) {
      return namedParameterJdbcTemplate.query(
              SELECT_D3P_LIST, params, new BeneficiaryRowMapper());
    } else if (benTypeAction.equalsIgnoreCase(OTHER_BANK_DELETE_BENE)) {
      return namedParameterJdbcTemplate.query(
              SELECT_DIBTP_LIST, params, new BeneficiaryRowMapper());
    }
    return List.of();
  }

  @Override
  public List<Beneficiary> getBeneficiariesByTypeActionOnFailure(
          String fileName, String accountNumber, String code,
          String benTypeAction, String fileRefNo) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileRefNo)
            .addValue(FILENAME, fileName)
            .addValue("actNo", accountNumber)
            .addValue("code", code);
    if (benTypeAction.equalsIgnoreCase(SAME_BANK_ADD_BENE)) {
      params.addValue(ACTION, "A");
      params.addValue("type", "S");
    } else if (benTypeAction.equalsIgnoreCase(OTHER_BANK_ADD_BENE)) {
      params.addValue(ACTION, "A");
      params.addValue("type", "O");
    } else if (benTypeAction.equalsIgnoreCase(SAME_BANK_DELETE_BENE)) {
      params.addValue(ACTION, "D");
      params.addValue("type", "S");
    } else if (benTypeAction.equalsIgnoreCase(OTHER_BANK_DELETE_BENE)) {
      params.addValue(ACTION, "D");
      params.addValue("type", "O");
    }

    return namedParameterJdbcTemplate.query(
            FAILURE_FILE_LIST_BY_ACTION, params, new BeneficiaryRowMapper());
  }

  @Override
  public BeneficiaryDetailsResponse getApprovalDetails(String fileRefNo) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(FILE_REFERENCE_NO, fileRefNo);

    return namedParameterJdbcTemplate.queryForObject(
            SELECT_APPROVAL_DETAILS, params, new ApprovalDetailsRowMapper());
  }

  @Override
  public List<String> getUploaderList(String corporateId, String userName) {
    MapSqlParameterSource params = new MapSqlParameterSource()
            .addValue(CORPID, corporateId)
            .addValue("userName", userName);

    return namedParameterJdbcTemplate.queryForList(GET_UPLOADER_NAMES, params, String.class);

  }

  /**
   * RowMapper to map rows from a ResultSet to Java Objects.
   */
  public static class BeneficiaryFileRowMapper implements RowMapper<BeneficiaryFileResponse> {

    public BeneficiaryFileResponse mapRow(ResultSet rs, int index) throws SQLException {

      Map<String, Integer> countMap = new HashMap<>();
      countMap.put(BENEFICIARY_COUNT, rs.getInt("benCount"));
      countMap.put(APPROVED_COUNT, rs.getInt("approvedCount"));
      countMap.put(REJECTED_COUNT, rs.getInt("rejectedCount"));
      countMap.put(PENDING_COUNT, rs.getInt("pendingCount"));
      countMap.put(VALIDATION_FAILURE_COUNT, rs.getInt("failureCount"));

      return new BeneficiaryFileResponse(
              rs.getString("fileRefNo"),
              rs.getString(FILENAME),
              rs.getString("username"),
              rs.getString("fileUploadedDate"),
              countMap,
              rs.getString(UPLOADSTATUS),
              null,
              rs.getString(APPROVALSTATUS),
              rs.getString("approvedOn"),
              rs.getString("approvedBy"),
              rs.getString(FILETYPE)
      );
    }
  }

  /**
   * RowMapper to map rows from a ResultSet to Java Objects.
   */
  public static class BeneficiaryRowMapper implements RowMapper<Beneficiary> {

    public Beneficiary mapRow(ResultSet rs, int index) throws SQLException {
      Beneficiary beneficiary = new Beneficiary();
      beneficiary.setOid(rs.getString("OID"));
      beneficiary.setAccountNumber(rs.getString("ACCOUNTNO"));
      beneficiary.setIfscCode(rs.getString("IFSCCODE"));
      beneficiary.setName(rs.getString("NAME"));
      beneficiary.setComments(rs.getString("COMMENTS"));
      beneficiary.setCode(rs.getString("CODE"));
      beneficiary.setAction(rs.getString("ACTION"));
      beneficiary.setType(rs.getString("TYPE"));
      beneficiary.setStatus(rs.getString("STATUS"));
      return beneficiary;
    }
  }

  /**
   * RowMapper to map rows from a ResultSet to Java Objects.
   */
  public static class BeneficiaryDetailsRowMapper implements RowMapper<BeneficiaryDetailsResponse> {

    public BeneficiaryDetailsResponse mapRow(ResultSet rs, int index) throws SQLException {
      return new BeneficiaryDetailsResponse(
              rs.getString("FILEREFNO"),
              rs.getString("FILENAME"),
              rs.getString("FILETYPE"),
              rs.getString("USERNAME"),
              rs.getString("FILEUPLOADEDDATE"), null,
              rs.getString("UPLOADSTATUS"),
              null, null, null, null, null
      );
    }
  }

  /**
   * RowMapper to map rows from a ResultSet to Java Objects.
   */
  public static class ApprovalDetailsRowMapper implements RowMapper<BeneficiaryDetailsResponse> {

    public BeneficiaryDetailsResponse mapRow(ResultSet rs, int index) throws SQLException {
      return new BeneficiaryDetailsResponse(
              null, null, null, null, null, null,
              null, null, null, null,
              rs.getString("APPROVEDON"),
              rs.getString("APPROVEDBY")
      );
    }
  }

  /**
   * @param query      SQL query
   * @param parameters parameters for query
   * @return int affected row count
   */

  @Override
  public int update(String query, SqlParameterSource parameters) {
    logger.info("Update - Query : {} || SqlParameter : {}", query, parameters);
    return namedParameterJdbcTemplate.update(query, parameters);
  }

  /**
   * @param query           SQL query
   * @param batchParameters parameter array for query
   * @return int affected row count
   */
  @Override
  public int[] batchUpdate(String query, SqlParameterSource[] batchParameters) {
    logger.info("Batch update - Query : {} || SqlParameter : {}", query, batchParameters);
    return namedParameterJdbcTemplate.batchUpdate(query, batchParameters);
  }


  @Override
  public String getValueFromNameValueMasterByNameAndStatus(String name) {
    return namedParameterJdbcTemplate.queryForObject(QueryConstants.GET_VALUE_FROM_NAME_VALUE_MASTER_BY_NAME,
            new MapSqlParameterSource().addValue("name", name).addValue("status", 1),
            String.class);
  }

  public void validateAndSaveToWACReferenceStatus(String sno) {

    int misBeneCount;

    logger.info("File Name received for MIS validation: {}", sno);

    misBeneCount = Optional.ofNullable(namedParameterJdbcTemplate.queryForObject(MIS_TOTAL_COUNT,
            new MapSqlParameterSource().addValue(FILENAME, sno), Integer.class)).orElse(0);
    logger.info("Total count for File Name : {} is {} ", sno, misBeneCount);
    if (misBeneCount > 0) {
      int processedBeneCount;
      int failureBeneCount;
      int insertCount;

      processedBeneCount = Optional.ofNullable(namedParameterJdbcTemplate
              .queryForObject(MIS_SUCCESS_COUNT,
                new MapSqlParameterSource().addValue(FILENAME, sno),
                      Integer.class)).orElse(0);
      failureBeneCount = Optional.ofNullable(namedParameterJdbcTemplate
              .queryForObject(MIS_FAILURE_COUNT,
                new MapSqlParameterSource().addValue(FILENAME, sno),
                      Integer.class)).orElse(0);

      logger.info("Total success, rejected & deleted count : {}", processedBeneCount);
      logger.info("Total failure count : {}", failureBeneCount);

      if (misBeneCount == Integer.sum(processedBeneCount, failureBeneCount)) {

        logger.info("Counts matched : Total count of beneficiary {}. "
                + "Total success & Failure count --> {}."
                + "WAC insert initiated", misBeneCount, Integer.sum(processedBeneCount,
                failureBeneCount));
        logger.info("INSERT INTO WAC_REFERENCE_STATUS(REFERENCE_NO,WORKFLOW_ID,"
                + "STEP_ID,LAST_EVENT,LAST_EVENT_RESULT,RUN_NO,ERROR_CODE,CREATION_TIME) "
                + "VALUES ('{}', 'beneficiary_processor','beneficiary_acknowledge_file',"
                + "'beneficiary_acknowledge_file','recovery',null,null,sysdate)", sno);

        insertCount = update(SAVE_WAC_REFERENCE_STATUS, new
                MapSqlParameterSource().addValue("sno", sno));
        logger.info("Saved to WAC_REFERENCE_STATUS - Inserted Row count : {}", insertCount);

      } else {
        logger.info("File: {} is not fully authorized", sno);
      }
    } else {
      logger.info("File count is ZERO");
    }
  }

}

Iam getting errors in this please solve
import com.sbi.yb.constants.QueryConstants;
import com.sbi.yb.model.Beneficiary;
//import com.sbi.yb.model.BeneficiaryDetails;
import com.sbi.yb.model.BeneficiaryDetailsResponse;
//import com.sbi.yb.model.BeneficiaryFile;
import com.sbi.yb.model.BeneficiaryFileRequest;
import com.sbi.yb.model.BeneficiaryFileResponse;
import com.sbi.yb.repository.impl.ManageFileBeneficiaryDaoImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static com.sbi.yb.constants.UtilConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ManageFileBeneficiaryDaoImplTest {

    @Mock
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @InjectMocks
    private ManageFileBeneficiaryDaoImpl manageFileBeneficiaryDao;

    private BeneficiaryFileRequest request;
    private AtomicInteger totalCount;

    @BeforeEach
    void setUp() {
        request = new BeneficiaryFileRequest();
        request.setCorporateAlias("CORP123");
        request.setPageNo(1);
        request.setPageSize(10);
        request.setTabName("testTab");
        totalCount = new AtomicInteger(0);
    }

//    @Test
//    void getBeneFiles_WithSearchCondition() {
//        request.setSearchBy("test");
//        Map<String, String> filterBy = new HashMap<>();
//        filterBy.put("uploader", "user1");
//        filterBy.put("uploadStatus", "UPLOADED");
//        filterBy.put("approvalStatus", "APPROVED");
//        filterBy.put("fileType", "TYPE1");
//        request.setFilterBy(filterBy);
//
//        when(namedParameterJdbcTemplate.queryForObject(anyString(), any(MapSqlParameterSource.class), eq(Integer.class)))
//                .thenReturn(5);
//        when(namedParameterJdbcTemplate.query(anyString(), any(MapSqlParameterSource.class), any(RowMapper.class)))
//                .thenReturn(Collections.singletonList(new BeneficiaryFileResponse()));
//
//        manageFileBeneficiaryDao.getBeneFiles(request, totalCount);
//
//
//        assertEquals(5, totalCount.get());
//    }

    @Test
    void getBeneFiles_WithoutFilters() {
        when(namedParameterJdbcTemplate.queryForObject(anyString(), any(MapSqlParameterSource.class), eq(Integer.class)))
                .thenReturn(2);
        when(namedParameterJdbcTemplate.query(anyString(), any(MapSqlParameterSource.class), any(RowMapper.class)))
                .thenReturn(List.of());

        manageFileBeneficiaryDao.getBeneFiles(request, totalCount);

//        assertNotNull(result);
//        assertEquals(1, result.size());
        assertEquals(2, totalCount.get());
    }

    @Test
    void getFileDetails() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("FILEREFNO")).thenReturn("REF123");
        when(mockResultSet.getString("FILENAME")).thenReturn("test.txt");
        when(mockResultSet.getString("FILEUPLOADEDDATE")).thenReturn("2023-01-01");
        when(mockResultSet.getString("USERNAME")).thenReturn("user1");
        when(mockResultSet.getString("UPLOADSTATUS")).thenReturn("UPLOADED");
        when(mockResultSet.getString("FILETYPE")).thenReturn("TYPE1");

        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.FETCH_UPLOADED_FILE_DETAILS),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<BeneficiaryDetailsResponse> mapper = invocation.getArgument(2);
                    return mapper.mapRow(mockResultSet, 1);
                });

        BeneficiaryDetailsResponse result = manageFileBeneficiaryDao.getFileDetails("CORP123", "REF123");

        assertNotNull(result);

    }

    @Test
    void getBeneficiaryCounts() {
        Map<String, Object> mockResult = new HashMap<>();
        mockResult.put(BENEFICIARY_COUNT, 10);
        mockResult.put(APPROVED_COUNT, 5);
        mockResult.put(REJECTED_COUNT, 2);
        mockResult.put(PENDING_COUNT, 3);
        mockResult.put(VALIDATION_FAILURE_COUNT, 0);

        when(namedParameterJdbcTemplate.queryForMap(
                eq(QueryConstants.GET_FILE_DETAILS_COUNT),
                anyMap()))
                .thenReturn(mockResult);

        Map<String, Integer> result = manageFileBeneficiaryDao.getBeneficiaryCounts("REF123");

        assertEquals(5, result.size());
        assertEquals(10, result.get(BENEFICIARY_COUNT));
        assertEquals(5, result.get(APPROVED_COUNT));
    }

    @Test
    void getAllBeneficiaries() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");
        when(mockResultSet.getString("ACCOUNTNO")).thenReturn("ACC123");
        when(mockResultSet.getString("IFSCCODE")).thenReturn("IFSC123");
        when(mockResultSet.getString("NAME")).thenReturn("Test Name");
        when(mockResultSet.getString("COMMENTS")).thenReturn("Test Comment");
        when(mockResultSet.getString("CODE")).thenReturn("CODE123");
        when(mockResultSet.getString("ACTION")).thenReturn("A");
        when(mockResultSet.getString("TYPE")).thenReturn("S");
        when(mockResultSet.getString("STATUS")).thenReturn("APPROVED");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.COMBINED_WITH_STATUS),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getAllBeneficiaries("REF123");

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("OID123", result.get(0).getOid());
    }
    @Test
    void getBeneFiles() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("fileRefNo")).thenReturn("OID123");
        when(mockResultSet.getString("fileName")).thenReturn("ACC123");
        when(mockResultSet.getString("fileType")).thenReturn("IFSC123");
        when(mockResultSet.getString("fileUploadedDate")).thenReturn("Test Name");
        when(mockResultSet.getString("username")).thenReturn("Test Comment");
        when(mockResultSet.getString("uploadStatus")).thenReturn("CODE123");
        when(mockResultSet.getString("approvalStatus")).thenReturn("A");
        when(mockResultSet.getString("approvedBy")).thenReturn("S");
        when(mockResultSet.getString("approvedOn")).thenReturn("APPROVED");
        request.setSearchBy("test");
        Map<String, String> filterBy = new HashMap<>();
        filterBy.put("uploader", "user1");
        filterBy.put("uploadStatus", "UPLOADED");
        filterBy.put("approvalStatus", "APPROVED");
        filterBy.put("fileType", "TYPE1");
        request.setFilterBy(filterBy);
        when(namedParameterJdbcTemplate.queryForObject(anyString(), any(MapSqlParameterSource.class), eq(Integer.class)))
                .thenReturn(2);
        when(namedParameterJdbcTemplate.query(
               anyString(),
                any(MapSqlParameterSource.class),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<BeneficiaryDetailsResponse> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<BeneficiaryFileResponse> result = manageFileBeneficiaryDao.getBeneFiles(request,totalCount);

        assertNotNull(result);
        assertEquals(1, result.size());

    }
    @Test
    void getBeneficiariesByStatus_Approved() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.APPROVED_FILE_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByStatus("REF123", "APPROVED");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByStatus_Rejected() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.REJECTED_FILE_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByStatus("REF123", "REJECTED");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByStatus_Failure() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.FAILURE_FILE_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByStatus("REF123", "FAILURE");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByStatus_Pending() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.SELECT_PENDING_FILES),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByStatus("REF123", "PENDING");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByStatus_Default() {
        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByStatus("REF123", "UNKNOWN");

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    void getActionTypeCounts() {
        Map<String, Object> mockResult = new HashMap<>();
        mockResult.put(SAME_BANK_ADD, 5);
        mockResult.put(OTHER_BANK_ADD, 3);
        mockResult.put(SAME_BANK_DELETE, 2);
        mockResult.put(OTHER_BANK_DELETE, 1);

        when(namedParameterJdbcTemplate.queryForMap(
                eq(QueryConstants.SELECT_COUNT_BY_ACTION_TYPE),
                any(MapSqlParameterSource.class)))
                .thenReturn(mockResult);

        Map<String, Integer> result = manageFileBeneficiaryDao.getActionTypeCounts("REF123");

        assertEquals(4, result.size());
        assertEquals(5, result.get(SAME_BANK_ADD));
        assertEquals(3, result.get(OTHER_BANK_ADD));
    }


    @ParameterizedTest
    @ValueSource(strings = {"Approved","Rejected","Pending","Failure","default"})
    void getActionTypeCountsByStatus_Approved(String status) {
        ResultSet mockResultSet = mock(ResultSet.class);
        Map<String, Integer> mockResult = new HashMap<>();
        mockResult.put(SAME_BANK_ADD, 5);
        mockResult.put(OTHER_BANK_ADD, 3);
        mockResult.put(SAME_BANK_DELETE, 2);
        mockResult.put(OTHER_BANK_DELETE, 1);
        Map<String, Integer> actionCounts = new HashMap<>();
        when(namedParameterJdbcTemplate.queryForObject(
               anyString(),
                any(MapSqlParameterSource.class),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<HashMap> mapper = invocation.getArgument(2);
                    return (mapper.mapRow(mockResultSet, 1));
                });
        manageFileBeneficiaryDao.getActionTypeCountsByStatus("REF123", status);

    }

//    @Test
//    void getActionTypeCountsByStatus_Rejected() {
//        Map<String, Integer> mockResult = new HashMap<>();
//        mockResult.put(SAME_BANK_ADD, 0);
//        mockResult.put(OTHER_BANK_ADD, 1);
//        mockResult.put(SAME_BANK_DELETE, 2);
//        mockResult.put(OTHER_BANK_DELETE, 3);
//
//        when(namedParameterJdbcTemplate.queryForObject(
//                eq(QueryConstants.SELECT_ACTION_TYPE_BY_STATUS),
//                any(MapSqlParameterSource.class),
//                any(RowMapper.class)))
//                .thenReturn(mockResult);
//
//        Map<String, Integer> result = manageFileBeneficiaryDao.getActionTypeCountsByStatus("REF123", "REJECTED");
//
//        assertEquals(4, result.size());
//        assertEquals(0, result.get(SAME_BANK_ADD));
//    }

    @Test
    void getBeneficiariesByTypeAction_SameBankAdd() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.SELECT_3P_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByTypeAction(
                "test.txt", "ACC123", "CODE123", SAME_BANK_ADD_BENE, "REF123");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByTypeAction_OtherBankAdd() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.SELECT_IBTP_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByTypeAction(
                "test.txt", "ACC123", "CODE123", OTHER_BANK_ADD_BENE, "REF123");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByTypeAction_SameBankDelete() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.SELECT_D3P_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByTypeAction(
                "test.txt", "ACC123", "CODE123", SAME_BANK_DELETE_BENE, "REF123");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByTypeAction_OtherBankDelete() throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.SELECT_DIBTP_LIST),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByTypeAction(
                "test.txt", "ACC123", "CODE123", OTHER_BANK_DELETE_BENE, "REF123");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getBeneficiariesByTypeAction_Default() {
        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByTypeAction(
                "test.txt", "ACC123", "CODE123", "UNKNOWN", "REF123");

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @ParameterizedTest
    @ValueSource(strings = {"IBTP","3P","DIBTP","D3P","default"})
    void getBeneficiariesByTypeActionOnFailure(String benTypeAction) throws SQLException {
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("OID")).thenReturn("OID123");

        when(namedParameterJdbcTemplate.query(
                eq(QueryConstants.FAILURE_FILE_LIST_BY_ACTION),
                anyMap(),
                any(RowMapper.class)))
                .thenAnswer(invocation -> {
                    RowMapper<Beneficiary> mapper = invocation.getArgument(2);
                    return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
                });

        List<Beneficiary> result = manageFileBeneficiaryDao.getBeneficiariesByTypeActionOnFailure(
                "test.txt", "ACC123", "CODE123", benTypeAction, "REF123");

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void getUploaderList() {
        when(namedParameterJdbcTemplate.queryForList(
                eq(QueryConstants.GET_UPLOADER_NAMES),
                anyMap(),
                eq(String.class)))
                .thenReturn(Collections.singletonList("user1"));

        List<String> result = manageFileBeneficiaryDao.getUploaderList("CORP123", "user1");

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("user1", result.get(0));
    }

    @Test
    void update() {
        when(namedParameterJdbcTemplate.update(anyString(), any(SqlParameterSource.class)))
                .thenReturn(1);

        int result = manageFileBeneficiaryDao.update("UPDATE TEST SET VAL=1", new MapSqlParameterSource());

        assertEquals(1, result);
    }

    @Test
    void batchUpdate() {
        when(namedParameterJdbcTemplate.batchUpdate(anyString(), any(SqlParameterSource[].class)))
                .thenReturn(new int[]{1, 1});

        int[] result = manageFileBeneficiaryDao.batchUpdate(
                "UPDATE TEST SET VAL=1",
                new SqlParameterSource[]{new MapSqlParameterSource(), new MapSqlParameterSource()});

        assertEquals(2, result.length);
        assertEquals(1, result[0]);
    }

    @Test
    void getValueFromNameValueMasterByNameAndStatus() {
        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.GET_VALUE_FROM_NAME_VALUE_MASTER_BY_NAME),
                any(MapSqlParameterSource.class),
                eq(String.class)))
                .thenReturn("TEST_VALUE");

        String result = manageFileBeneficiaryDao.getValueFromNameValueMasterByNameAndStatus("TEST_NAME");
        assertEquals("TEST_VALUE", result);
    }

    @Test
    void validateAndSaveToWACReferenceStatus_CountsMatch() {
        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_TOTAL_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(10);

        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_SUCCESS_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(7);

        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_FAILURE_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(3);

        when(namedParameterJdbcTemplate.update(
                eq(QueryConstants.SAVE_WAC_REFERENCE_STATUS),
                any(MapSqlParameterSource.class)))
                .thenReturn(1);

        manageFileBeneficiaryDao.validateAndSaveToWACReferenceStatus("SNO123");

        verify(namedParameterJdbcTemplate, times(1)).update(
                eq(QueryConstants.SAVE_WAC_REFERENCE_STATUS),
                any(MapSqlParameterSource.class));
    }
    @Test
    void validateAndSaveToWACReferenceStatus_CountsMatch_else() {
        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_TOTAL_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(0);

        manageFileBeneficiaryDao.validateAndSaveToWACReferenceStatus("SNO123");
    }
    @Test
    void validateAndSaveToWACReferenceStatus_CountsMisMatch() {
        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_TOTAL_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(10);

        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_SUCCESS_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(2);

        when(namedParameterJdbcTemplate.queryForObject(
                eq(QueryConstants.MIS_FAILURE_COUNT),
                any(MapSqlParameterSource.class),
                eq(Integer.class)))
                .thenReturn(3);
        manageFileBeneficiaryDao.validateAndSaveToWACReferenceStatus("SNO123");
    }
}
