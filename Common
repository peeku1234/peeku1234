@Test
void testAuthenticate_WhenCacheManagerThrowsException() {
    // Arrange
    when(cacheManager.getSession("")).thenThrow(new RuntimeException("Cache failure"));
    
    // Act & Assert
    assertThrows(RuntimeException.class, () -> {
        webAuthenticationProvider.authenticate(request);
    });
    
    verify(cacheManager).getSession("");
    verifyNoInteractions(authenticationDAO, corporateDAO);
}

@Test
void testAuthenticate_WhenAuthenticationDAOThrowsException() {
    // Arrange
    when(cacheManager.getSession("")).thenReturn(null);
    when(authenticationDAO.getUserDetails(null, null))
        .thenThrow(new RuntimeException("Database error"));
    
    // Act & Assert
    assertThrows(RuntimeException.class, () -> {
        webAuthenticationProvider.authenticate(request);
    });
    
    verify(cacheManager).getSession("");
    verify(authenticationDAO).getUserDetails(null, null);
    verifyNoInteractions(corporateDAO);
}

@Test
void testAuthenticate_WhenCorporateDAOThrowsException() {
    // Arrange
    UserProfile mockUserProfile = new UserProfile("corpUser", UserRole.CORPORATE.getValue(), "corp123");
    when(cacheManager.getSession("")).thenReturn(null);
    when(authenticationDAO.getUserDetails(null, null)).thenReturn(mockUserProfile);
    when(corporateDAO.getCorporateProfile("corp123"))
        .thenThrow(new RuntimeException("Corporate service unavailable"));
    
    // Act & Assert
    assertThrows(RuntimeException.class, () -> {
        webAuthenticationProvider.authenticate(request);
    });
    
    verify(cacheManager).getSession("");
    verify(authenticationDAO).getUserDetails(null, null);
    verify(corporateDAO).getCorporateProfile("corp123");
}

@Test
void testAuthenticate_WhenCacheSetSessionFails() {
    // Arrange
    UserProfile mockUserProfile = new UserProfile("testUser", UserRole.SARAL.getValue(), "corp123");
    when(cacheManager.getSession("")).thenReturn(null);
    when(authenticationDAO.getUserDetails(null, null)).thenReturn(mockUserProfile);
    doThrow(new RuntimeException("Cache write failed")).when(cacheManager).setSession(any());
    
    // Act & Assert
    assertThrows(RuntimeException.class, () -> {
        webAuthenticationProvider.authenticate(request);
    });
    
    verify(cacheManager).getSession("");
    verify(authenticationDAO).getUserDetails(null, null);
    verify(cacheManager).setSession(any());
    verifyNoInteractions(corporateDAO);
}

@Test
void testAuthenticate_WhenInvalidUserRole() {
    // Arrange
    UserProfile invalidUserProfile = new UserProfile("testUser", "INVALID_ROLE", "corp123");
    when(cacheManager.getSession("")).thenReturn(null);
    when(authenticationDAO.getUserDetails(null, null)).thenReturn(invalidUserProfile);
    
    // Act
    Authentication result = webAuthenticationProvider.authenticate(request);
    
    // Assert
    assertNotNull(result);
    assertFalse(result.authenticated());
    assertEquals(invalidUserProfile, result.userProfile());
    
    verify(cacheManager).getSession("");
    verify(authenticationDAO).getUserDetails(null, null);
    verify(cacheManager).setSession(result);
    verifyNoInteractions(corporateDAO);
}
