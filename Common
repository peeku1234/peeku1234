 public List<String> getResultForIMPSTXNFixed(List<Map<String, String>> listOfConfiguration, FileConfigMasterEntity response,
                                               StringBuilder debitString, StringBuilder creditString) {
    List<String> result = new ArrayList<>();
    listOfConfiguration.forEach(configMap -> {
      String fieldValue = "Other";
      for (FixedConfiguration fixedFileConfiguration : response.getFixedConfiguration()) {
        if(creditString.toString().startsWith("A") && (fixedFileConfiguration.getFieldName().equalsIgnoreCase("Beneficiary MMID") ||
                fixedFileConfiguration.getFieldName().equalsIgnoreCase("Beneficiary Mobile No"))) {
          configMap.put("Beneficiary MMID", "       ");
          configMap.put("Beneficiary Mobile No", "          ");
        }

        if (Optional.ofNullable(configMap.get(fixedFileConfiguration.getFieldName().trim())).isPresent()) {
          fieldValue = configMap.get(fixedFileConfiguration.getFieldName().trim());
        }
        if ((fixedFileConfiguration.getEndIndex() - fixedFileConfiguration.getStartIndex()) < fieldValue.length()) {
          fieldValue = fieldValue.substring(0, (fixedFileConfiguration.getEndIndex() - fixedFileConfiguration.getStartIndex()) + 1);
        }
        int startIndex = fixedFileConfiguration.getStartIndex();
        getFixedConfigurationFieldType(fixedFileConfiguration, configMap, debitString, creditString, startIndex, fieldValue);
      }
      result.add(debitString.toString());
      result.add(creditString.toString());
      result.add("");
    });
    return result;
  }


  @Test
  void getResultForIMPSTXNFixed() {
    fixedConfigurations.add(new FixedConfiguration("Beneficiary MMID", 1, 4, "C", null));
    fileConfiguration.setFormat(1);
    fileConfiguration.setFixedConfiguration(fixedConfigurations);
    sampleFileDownloadRequest.setFileType("IMPS_TXN");
    fixedConfiguration.setFieldName("Beneficiary Name");
    fileConfigurations.add(new FileConfigMasterEntity(5966359893L, null, "A", 1, "250250", null, null));
    Mockito.when(sampleFileDownloadDaoimpl.getFileConfiguration(anyString(), anyString())).thenReturn(fileConfigurations);
    Mockito.when(sampleFileDownloadDaoimpl.getFixedConfiguration(anyString(), anyString(), anyLong(), anyString()))
            .thenReturn(fileConfiguration);
    FileDownloadResponse downloadResponse = fileDownloadService.downloadSampleFile(sampleFileDownloadRequest);
    Mockito.verify(sampleFileDownloadDaoimpl, Mockito.times(1)).getFileConfiguration(anyString(), anyString());
    Mockito.verify(sampleFileDownloadDaoimpl, Mockito.times(1)).getFixedConfiguration(anyString(), anyString(), anyLong(),
            anyString());
    assertEquals(5966359893L, fileConfiguration.getOid());
    assertNotNull(downloadResponse);

  }
