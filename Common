package com.sbi.yb.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.CommonRequestPayload;
import com.sbi.microservice.framework.model.SBIApplicationResponse;
import com.sbi.microservice.framework.model.Status;
import com.sbi.yb.constants.ManageBeneStatusCode;
import com.sbi.yb.constants.UtilConstants;
import com.sbi.yb.model.*;
import com.sbi.yb.service.ManageFileBeneficiaryService;
import com.sbi.yb.util.ManageBeneficiaryUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Collections;
import java.util.concurrent.atomic.AtomicInteger;

@ExtendWith(MockitoExtension.class)
class ManageFileBeneficiaryControllerTest {

    @Mock
    private ManageFileBeneficiaryService manageFileBeneficiaryService;

    @Mock
    private FrameworkUtils frameworkUtils;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @InjectMocks
    private ManageFileBeneficiaryController controller;

    @Test
    void getBeneficiaryFiles_InvalidRequest_ThrowsValidationException() {
        when(request.getParameter("plainPayload")).thenReturn(null);
        
        ValidationException exception = assertThrows(ValidationException.class, () -> {
            controller.getBeneficiaryFiles(request, response);
        });
        
        assertEquals(ManageBeneStatusCode.INVALID_REQUEST, exception.getErrorCode());
    }

    @Test
    void getBeneficiaryFiles_ValidRequest_ReturnsSuccess() throws Exception {
        try (MockedStatic<ManageBeneficiaryUtil> mocked = mockStatic(ManageBeneficiaryUtil.class)) {
            // Setup
            BeneficiaryFileRequest fileRequest = new BeneficiaryFileRequest();
            fileRequest.setTabName(UtilConstants.APPROVE_TAB);
            
            UploaderResponse uploaderResponse = new UploaderResponse();
            uploaderResponse.setUploaders(Collections.singletonList(new Uploader()));
            
            // Mock static method
            mocked.when(() -> ManageBeneficiaryUtil.toObject(anyString(), any()))
                 .thenReturn(fileRequest);
            
            // Mock other dependencies
            when(request.getParameter("plainPayload")).thenReturn("valid json");
            when(manageFileBeneficiaryService.getUploaderList(any(BeneficiaryFileRequest.class)))
                .thenReturn(uploaderResponse);
            when(manageFileBeneficiaryService.getFileListByTab(any(BeneficiaryFileRequest.class), any(AtomicInteger.class))
                .thenReturn(Collections.singletonList(new BeneficiaryFile()));
            
            // Test
            ResponseEntity<SBIApplicationResponse> responseEntity = 
                controller.getBeneficiaryFiles(request, response);
            
            // Verify
            assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
            assertNotNull(responseEntity.getBody());
            assertEquals(Status.SUCCESS.getStatusValue(), responseEntity.getBody().getStatus());
        }
    }

    @Test
    void getBeneficiaryDetails_ValidRequest_ReturnsSuccess() throws Exception {
        try (MockedStatic<ManageBeneficiaryUtil> mocked = mockStatic(ManageBeneficiaryUtil.class)) {
            // Setup
            BeneficiaryDetailsRequest detailsRequest = new BeneficiaryDetailsRequest();
            BeneficiaryDetails beneficiaryDetails = new BeneficiaryDetails();
            
            // Mock static method
            mocked.when(() -> ManageBeneficiaryUtil.toObject(anyString(), any()))
                 .thenReturn(detailsRequest);
            
            // Mock other dependencies
            when(request.getParameter("plainPayload")).thenReturn("valid json");
            when(manageFileBeneficiaryService.getFileDetailsByTab(any(BeneficiaryDetailsRequest.class), any(AtomicInteger.class)))
                .thenReturn(beneficiaryDetails);
            
            // Test
            ResponseEntity<SBIApplicationResponse> responseEntity = 
                controller.getBeneficiaryDetails(request, response);
            
            // Verify
            assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
            assertNotNull(responseEntity.getBody());
        }
    }

    @Test
    void getUploader_ValidRequest_ReturnsSuccess() throws Exception {
        try (MockedStatic<ManageBeneficiaryUtil> mocked = mockStatic(ManageBeneficiaryUtil.class)) {
            // Setup
            CommonRequestPayload uploaderRequest = new CommonRequestPayload();
            UploaderResponse uploaderResponse = new UploaderResponse();
            
            // Mock static method
            mocked.when(() -> ManageBeneficiaryUtil.toObject(anyString(), any()))
                 .thenReturn(uploaderRequest);
            
            // Mock other dependencies
            when(request.getParameter("plainPayload")).thenReturn("valid json");
            when(manageFileBeneficiaryService.getUploaderList(any(CommonRequestPayload.class)))
                .thenReturn(uploaderResponse);
            
            // Test
            ResponseEntity<SBIApplicationResponse> responseEntity = 
                controller.getUploader(request, response);
            
            // Verify
            assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        }
    }

    @Test
    void approveOrRejectBeneficiary_ApprovalSuccess_ReturnsSuccess() throws Exception {
        try (MockedStatic<ManageBeneficiaryUtil> mocked = mockStatic(ManageBeneficiaryUtil.class)) {
            // Setup
            ApproveRejectBeneRequest requestObj = new ApproveRejectBeneRequest();
            requestObj.setIsApproved(true);
            requestObj.setFileReferenceNo("ref123");
            requestObj.setFileName("test.txt");
            requestObj.setBeneTypeAction("type1");
            
            // Mock static methods
            mocked.when(() -> ManageBeneficiaryUtil.toObject(anyString(), any()))
                 .thenReturn(requestObj);
            mocked.when(() -> ManageBeneficiaryUtil.getBeneTypeAndAction(anyString()))
                 .thenReturn("Type 1");
            mocked.when(() -> ManageBeneficiaryUtil.buildSuccessResponse(any(), anyString()))
                 .thenReturn(new SBIApplicationResponse());
            
            // Mock service
            when(manageFileBeneficiaryService.approveBeneficiary(any(ApproveRejectBeneRequest.class)))
                .thenReturn(1);
            
            // Test
            ResponseEntity<SBIApplicationResponse> responseEntity = 
                controller.approveOrRejectBeneficiary(request, response);
            
            // Verify
            assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        }
    }
}
