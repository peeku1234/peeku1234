public Map<String, Object> lockAccountConfirm(String userName, String mobileNo, String bankCode, String corporateID) {
    logger.info("lockAccountConfirm() {}", LoggingConstants.METHODBEGIN);
    logger.info("userName: {}, mobileNo: {}, bankCode: {}", userName, mobileNo, bankCode);
    
    Map<String, Object> outParam = new HashMap<>();
    try {
        if (userName == null) {
            throw new DAOException(ErrorConstants.INPUT_NULL_ERROR_CODE);
        }

        Object[] countparams = new Object[] { userName, mobileNo, bankCode };
        String validUserQuery = "select count(1) from bv_user a,bv_user_profile b where a.user_alias = ? and a.user_id = b.user_id and a.user_state = 0 and b.mobile_no =? and b.bank_code =? and not exists(select 1 from sbi_user_lock_account d where d.user_name =a.user_alias and locked_status ='Y')";
        
        int lockAccountConfirmCount = getJdbcTemplate().queryForObject(validUserQuery, Integer.class, countparams);
        logger.info("count: {}", lockAccountConfirmCount);
        
        if (lockAccountConfirmCount == 1) {
            String referenceNo = getJdbcTemplate().queryForObject(
                "select 'UL'||LPAD(ACCOUNT_LOCK_SEQ.NEXTVAL,8,0)reference_no from dual", 
                String.class);
            
            Object[] Parameter = new Object[] { referenceNo, userName, userName, mobileNo, corporateID };
            int[] sqlTypes = { Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR };
            
            String query_for_user = "INSERT INTO sbi_user_lock_account(REFERENCE_NO,USER_NAME,ACCOUNT_NO,BRANCH_CODE,MOBILE_NO,LOCKED_STATUS,REACTIVATED_BY,CREATION_TIME,CORPORATE_ID) "
                + "values(? ,?,null,(select branch_code from bv_user_profile "
                + "where user_id in (select user_id from bv_user where user_alias=?)),?,'Y',NULL,SYSDATE,?)";
            
            int status1 = getJdbcTemplate().update(query_for_user, Parameter, sqlTypes);
            logger.info("status: {}", status1);
            
            if (status1 == 1) {
                getJdbcTemplate().update("UPDATE bv_user set user_state = '1' where user_alias = ?", userName);
            }
            
            outParam.put("reference_no", referenceNo);
            outParam.put("lockAccountConfirmCount", lockAccountConfirmCount);
        } else {
            outParam.put("isUserLocked", "Yes");
        }
        
        return outParam;
    } catch (DataAccessException ex) {
        logger.error("lockAccountConfirm() exception occurred: {}", ex.getMessage());
        throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    } finally {
        logger.info("lockAccountConfirm() {}", LoggingConstants.METHODEND);
    }
}


public boolean userExist(String corporateId, String userName, String mobileNo) throws DAOException {
    logger.info("userExist() {}", LoggingConstants.METHODBEGIN);
    try {
        Object[] parameters = new Object[] { corporateId, userName, mobileNo };
        List<Map<String, Object>> result = getJdbcTemplate().queryForList(
            "select * from bv_user a, bv_user_profile b where a.user_id = b.user_id and b.corporate_id=? and a.user_alias=? and b.mobile_no=?", 
            parameters);
        
        logger.info("result: {}", result);
        return !result.isEmpty();
    } catch (DataAccessException ex) {
        logger.error("userExist() exception occurred: {}", ex.getMessage());
        throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    } finally {
        logger.info("userExist() {}", LoggingConstants.METHODEND);
    }
}



public Map<String, String> findVoiceOTPMobileSeries() throws DAOException {
    logger.debug("findVoiceOTPMobileSeries() {}", LoggingConstants.METHODBEGIN);
    try {
        List<Map<String, String>> voiceOTPMobileList = getJdbcTemplate().query(
            SQLConstants.FIND_VOICE_OTP_MOBILE_SERIES, 
            new MobileSeriesRowMapper());
        
        logger.info("voice OTP list from table: {}", voiceOTPMobileList);
        return voiceOTPMobileList.isEmpty() ? new LinkedHashMap<>() : voiceOTPMobileList.get(0);
    } catch (DataAccessException ex) {
        logger.error("findVoiceOTPMobileSeries() exception occurred: {}", ex.getMessage());
        throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    } finally {
        logger.debug("findVoiceOTPMobileSeries() {}", LoggingConstants.METHODEND);
    }
}

private static class MobileSeriesRowMapper implements RowMapper<Map<String, String>> {
    public Map<String, String> mapRow(ResultSet rs, int rowNum) throws SQLException {
        Map<String, String> data = new LinkedHashMap<>();
        data.put(rs.getString(1), rs.getString(2));
        return data;
    }
}







public Boolean getCorporateHasDisabledLinks(final String corporateId, final String moduleName) {
    logger.debug("getCorporateHasDisabledLinks() {}", LoggingConstants.METHODBEGIN);
    try {
        final String query = "SELECT COUNT(DISTINCT LINK_NAME) FROM SBI_LINK_DISABLE_MASTER WHERE CORPORATE_ID=? AND MODULE_NAME=? AND LINK_DISABLE='YES'";
        int count = getJdbcTemplate().queryForObject(query, Integer.class, corporateId, moduleName);
        
        Boolean result = count >= 1;
        logger.info("isCorporateHasDisabledLinks: {}", result);
        return result;
    } catch (DataAccessException ex) {
        logger.error("getCorporateHasDisabledLinks() exception occurred: {}", ex.getMessage());
        throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    } finally {
        logger.debug("getCorporateHasDisabledLinks() {}", LoggingConstants.METHODEND);
    }
}





public Boolean getCorporateHasDisabledLinksUser(final String corporateId, final String moduleName) {
    logger.debug("getCorporateHasDisabledLinksUser() {}", LoggingConstants.METHODBEGIN);
    try {
        final String query = "SELECT COUNT(DISTINCT LINK_NAME) FROM SBI_LINK_DISABLE_MASTER WHERE CORPORATE_ID=? AND MODULE_NAME=? AND LINK_DISABLE='YES' and TAB_NAME='Payments / Transfers'";
        int count = getJdbcTemplate().queryForObject(query, Integer.class, corporateId, moduleName);
        
        Boolean result = count >= 1;
        logger.info("isCorporateHasDisabledLinks: {}", result);
        return result;
    } catch (DataAccessException ex) {
        logger.error("getCorporateHasDisabledLinksUser() exception occurred: {}", ex.getMessage());
        throw new DAOException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    } finally {
        logger.debug("getCorporateHasDisabledLinksUser() {}", LoggingConstants.METHODEND);
    }
}


