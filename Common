package com.sbi.microservice.framework.services.access;

import com.sbi.microservice.framework.cache.CacheManager;
import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.constant.UserRole;
import com.sbi.microservice.framework.model.Authentication;
import com.sbi.microservice.framework.model.CorporateProfile;
import com.sbi.microservice.framework.model.UserProfile;
import com.sbi.microservice.framework.repository.CorporateDAO;
import com.sbi.microservice.framework.repository.UserDAO;
import com.sbi.microservice.framework.utils.FrameworkUtils;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

@ExtendWith(MockitoExtension.class)
class WebAuthenticationProviderTest {
    @InjectMocks
    private WebAuthenticationProvider webAuthenticationProvider;
    
    @Mock
    private CacheManager cacheManager;
    
    @Mock
    private UserDAO userDAO;
    
    @Mock
    private CorporateDAO corporateDAO;
    
    @Mock
    private FrameworkUtils frameworkUtils;
    
    @Mock
    private HttpServletRequest request;

    @Test
    void authenticate_whenNoUserNameInRequest_shouldReturnNull() {
        Mockito.when(frameworkUtils.getAttribute(any(), anyString())).thenReturn(Optional.empty());
        Mockito.when(cacheManager.getSession(anyString())).thenReturn(null);
        
        Authentication result = webAuthenticationProvider.authenticate(request);
        assertNull(result);
    }

    @Test
    void authenticate_whenUserProfileNotFound_shouldReturnNull() {
        Mockito.when(frameworkUtils.getAttribute(any(), anyString())).thenReturn(Optional.of("testUser"));
        Mockito.when(cacheManager.getSession(anyString())).thenReturn(null);
        Mockito.when(userDAO.getUserProfile(anyString())).thenReturn(Optional.empty());
        
        Authentication result = webAuthenticationProvider.authenticate(request);
        assertNull(result);
    }

    @Test
    void authenticate_whenUserIsSaral_shouldReturnAuthenticationWithoutCorporateProfile() {
        UserProfile userProfile = new UserProfile("userId", "userName", 
            UserRole.SARAL.getValue(), "corporateId", 1, "branchCode");
            
        Mockito.when(frameworkUtils.getAttribute(any(), anyString())).thenReturn(Optional.of("testUser"));
        Mockito.when(cacheManager.getSession(anyString())).thenReturn(null);
        Mockito.when(userDAO.getUserProfile(anyString())).thenReturn(Optional.of(userProfile));
        
        Authentication result = webAuthenticationProvider.authenticate(request);
        
        assertNotNull(result);
        assertEquals(FrameworkConstants.REQUESTOR_WEB, result.requestor());
        assertNull(result.corporateProfile());
        assertTrue(result.isAuthenticated());
    }

    @Test
    void authenticate_whenUserIsNotSaral_shouldReturnAuthenticationWithCorporateProfile() {
        UserProfile userProfile = new UserProfile("userId", "userName", 
            UserRole.CORPORATE.getValue(), "corporateId", 1, "branchCode");
        CorporateProfile corporateProfile = new CorporateProfile("corpId", "corpName");
        
        Mockito.when(frameworkUtils.getAttribute(any(), anyString())).thenReturn(Optional.of("testUser"));
        Mockito.when(cacheManager.getSession(anyString())).thenReturn(null);
        Mockito.when(userDAO.getUserProfile(anyString())).thenReturn(Optional.of(userProfile));
        Mockito.when(corporateDAO.getCorporateProfile(anyString())).thenReturn(corporateProfile);
        
        Authentication result = webAuthenticationProvider.authenticate(request);
        
        assertNotNull(result);
        assertEquals(FrameworkConstants.REQUESTOR_WEB, result.requestor());
        assertNotNull(result.corporateProfile());
        assertEquals("corpId", result.corporateProfile().corporateId());
        assertTrue(result.isAuthenticated());
    }

    @Test
    void authenticate_whenSessionExists_shouldReturnCachedAuthentication() {
        Authentication cachedAuth = new Authentication(FrameworkConstants.REQUESTOR_WEB, 
            null, 
            new UserProfile("userId", "userName", UserRole.SARAL.getValue(), "corpId", 1, "branchCode"),
            null,
            true);
            
        Mockito.when(cacheManager.getSession(anyString())).thenReturn(cachedAuth);
        
        Authentication result = webAuthenticationProvider.authenticate(request);
        
        assertNotNull(result);
        assertSame(cachedAuth, result);
    }
}
