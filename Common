package com.sbi.microservice.framework.repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.model.APIBankingEntity;
import com.sbi.microservice.framework.model.CorporateOnboard;

@Repository
public class APIBankingDAOImpl extends BaseDAO implements APIBankingDAO{

	private final static Logger logger = LoggerFactory.getLogger(APIBankingDAOImpl.class);

	public APIBankingDAOImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
		super(namedParameterJdbcTemplate);
	}

	public Map<String, String> getCorpDetails(String corpAlias) {
		logger.info("[APIBankingDAOImpl][validateCorpAlias()][Start]");
		String corpId = null;
		String isSaral = null;
		String active = null;
		Map<String, String> corpDetails = null;
		List<APIBankingEntity> aggCorpDetails = null;
		String fetchTranctionQuery = "select * from SBI_YB_APIBNKNG_CORP_MASTER where CORPORATE_ALIAS=:corporateAlias";
		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("corporateAlias", corpAlias);
			aggCorpDetails = namedParameterJdbcTemplate.query(fetchTranctionQuery, params,
                    new RowMapper<>() {
                      public APIBankingEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
                        APIBankingEntity aggCorpData = new APIBankingEntity(rs.getString("CORPORATE_ID"),
                                FrameworkConstants.STRING_BLANK, rs.getString("CORPORATE_ALIAS"),
                                FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, null,
                                FrameworkConstants.STRING_BLANK, rs.getString("ACTIVE"), rs.getString("IS_SARAL"));

                        return aggCorpData;
                      }
                    });
			if (aggCorpDetails.size() == 0) {
				logger.info("no record found for corpateId : {}", corpAlias);

			} else {
				corpId =  aggCorpDetails.get(0).corpId();
				isSaral = aggCorpDetails.get(0).isSaral();
				active = aggCorpDetails.get(0).active();
				corpDetails = new HashMap<>();
				corpDetails.put("corpId", corpId);
				corpDetails.put("isSaral", isSaral);
				corpDetails.put("active", active);
				logger.info("corpDetails--> : {}", corpDetails);
			}

		} catch (DataAccessException e) {
			logger.info("Exception while validateCorpAlias ::  " + corpAlias + "  " + e);

		} catch (Exception e) {
			logger.info("Exception while validateCorpAlias :: " + corpAlias + "  " + e);

		}
		logger.info("[APIBankingDAOImpl][validateCorpAlias()][ends]");
		return corpDetails;

	}

	public boolean whetherAggregatorExist(String aggregatorId) {
		logger.info("[ValidationDAOImpl][whetherAggregatorExist()][Start]");
		logger.info("aggregatorId-->" + aggregatorId);
		boolean aggregatorFlg = false;
		int count = 0;
		String fetchServiceCountQuery = "select count(*) from SBI_YB_APIBNKNG_AGGRTR_MSTR where AGGRTR_ID= :aggregatorId";
		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("aggregatorId", aggregatorId);
			count = namedParameterJdbcTemplate.queryForObject(fetchServiceCountQuery, params, Integer.class);
			logger.info("count-->" + count);
			if (count > 0) {
				aggregatorFlg = true;

			}
		} catch (DataAccessException e) {
			logger.info("Exception while whetherAggregatorExist :: " + aggregatorId + "  " + e);
		} catch (Exception e) {
			logger.info("Exception while whetherAggregatorExist :: " + aggregatorId + "  " + e);
		}
		logger.info("aggregatorFlg-->" + aggregatorFlg);
		logger.info("[APIBankingDAOImpl][whetherAggregatorExist()][ends]");
		return aggregatorFlg;
	}

	public boolean validateAggregatorWhetherActive(String aggregatorId) {
		logger.info("[ValidationDAOImpl][validateAggregatorWhetherActive()][Start]");
		logger.info("aggregatorId-->" + aggregatorId);
		boolean aggregatorFlag = false;
		List<APIBankingEntity> aggregatorDetails = null;
		String fetchAggDetailsQuery = "select * from SBI_YB_APIBNKNG_AGGRTR_MSTR where AGGRTR_ID= :aggregatorId";

		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("aggregatorId", aggregatorId);
			aggregatorDetails = namedParameterJdbcTemplate.query(fetchAggDetailsQuery, params, new RowMapper<APIBankingEntity>() { public APIBankingEntity mapRow(ResultSet rs, int rowNum) throws SQLException {APIBankingEntity aggregatorData = new APIBankingEntity(FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, rs.getString("AGGRTR_ID"), FrameworkConstants.STRING_BLANK, null, FrameworkConstants.STRING_BLANK, rs.getString("ACTIVE"), FrameworkConstants.STRING_BLANK);

							return aggregatorData;
						}
					});

			logger.info("aggregatorDetails-->" + aggregatorDetails);
			if (null != aggregatorDetails) {
				logger.info("aggregatorDetails.size()-->" + aggregatorDetails.size());
				if (!(aggregatorDetails.size() == 0)) {
					APIBankingEntity aggregatorData = (APIBankingEntity) aggregatorDetails.get(0);
					if (null != aggregatorData) {
						logger.info("aggregatorData is not null");
						if (null != aggregatorData.active()) {
							logger.info("aggregatorData active column value is not null");
							if (aggregatorData.active().trim().equalsIgnoreCase("Y")) {
								logger.info("aggregatorData active column value is Y");
								aggregatorFlag = true;
							}
						}
					}

				}
			}
			logger.info("aggregatorFlag-->" + aggregatorFlag);
		} catch (DataAccessException e) {
			logger.info("Exception while validateAggregatorWhetherExist :: " + aggregatorId + "  " + e);
		} catch (Exception e) {
			logger.info("Exception while validateAggregatorWhetherExist :: " + aggregatorId + "  " + e);
		}
		logger.info("[ValidationDAOImpl][validateAggregatorWhetherActive()][ends]");
		return aggregatorFlag;
	}

	public boolean validateAggregator(String aggregatorId) {
		logger.info("[ValidationDAOImpl][validateAggregator()][Start]");
		logger.info("aggregatorId-->" + aggregatorId);
		boolean aggregatorFlag = false;
		List<APIBankingEntity> aggregatorDetails = null;
		String fetchAggDetailsQuery = "select * from SBI_YB_APIBNKNG_AGGRTR_MSTR where AGGRTR_ID= :aggregatorId";
		// logger.info("query-->"+fetchAggDetailsQuery);

		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("aggregatorId", aggregatorId);
			aggregatorDetails = namedParameterJdbcTemplate.query(fetchAggDetailsQuery, params,
					new RowMapper<APIBankingEntity>() { public APIBankingEntity mapRow(ResultSet rs, int rowNum) throws SQLException {APIBankingEntity aggregatorData = new APIBankingEntity(FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, rs.getString("AGGRTR_ID"), FrameworkConstants.STRING_BLANK, null, FrameworkConstants.STRING_BLANK, rs.getString("ACTIVE"), FrameworkConstants.STRING_BLANK);
							return aggregatorData;
						}
					});

			logger.info("aggregatorDetails-->" + aggregatorDetails);
			if (null != aggregatorDetails) {
				logger.info("aggregatorDetails.size()-->" + aggregatorDetails.size());
				if (!(aggregatorDetails.size() == 0)) {
					aggregatorFlag = true;
				}
			}
			logger.info("aggregatorFlag-->" + aggregatorFlag);
		} catch (DataAccessException e) {
			logger.info("exception while validating Aggregator :: " + e);
		} catch (Exception e) {
			logger.info("exception while validating Aggregator :: " + e);
		}
		logger.info("[ValidationDAOImpl][validateAggregator()][ends]");
		return aggregatorFlag;
	}

	public boolean validateCorpToken(String aggregatorId, String corpId, String corpToken) {
		logger.info("[ValidationDAOImpl][validatingCorpToken()][Start]");
		logger.info("aggregatorId-->" + aggregatorId);
		logger.info("corpId-->" + corpId);
		logger.info("corpToken-->" + corpToken);

		boolean corpTokenValidityFlag = false;

		List<APIBankingEntity> aggTokenDetails = null;
		String fetchAggDetailsTokenQuery = "select TO_CHAR(TOKEN_EXPIRY_TS , 'YYYY-mm-dd HH24:MI:SS') TOKEN_EXPIRY_TS,CORPORATE_ID,CORP_TOKEN from SBI_YB_APIBNKNG_CORP_TOKEN where CORPORATE_ID=:corpId and  AGGRTR_ID=:aggregatorId";
		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("corpId", corpId);
			params.addValue("aggregatorId", aggregatorId);
			aggTokenDetails = namedParameterJdbcTemplate.query(fetchAggDetailsTokenQuery, params, new RowMapper<APIBankingEntity>() {public APIBankingEntity mapRow(ResultSet rs, int rowNum) throws SQLException {APIBankingEntity aggTokenDetail = new APIBankingEntity(rs.getString("CORPORATE_ID"), FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, rs.getString("CORP_TOKEN"), rs.getTimestamp("TOKEN_EXPIRY_TS"), FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK, FrameworkConstants.STRING_BLANK);
							return aggTokenDetail;
						}
					});

			logger.info("aggTokenDetails-->" + aggTokenDetails);
			if (null != aggTokenDetails) {
				logger.info("aggTokenDetails size-->" + aggTokenDetails.size());
			}
			logger.info("aggTokenDetails.size()-->" + aggTokenDetails.size());
			if (aggTokenDetails.size() == 0) {
				logger.info("No records found for fetchAggDetailsTokenQuery for  CORPORATE_ID and aggrId " + corpId
						+ "  " + aggregatorId);
			}
			if (aggTokenDetails.size() >= 1) {
				APIBankingEntity aggdetail = aggTokenDetails.get(0);
				if (aggdetail != null)
					if (aggdetail.corpToken().equals(corpToken)) {
						Date date = Calendar.getInstance().getTime();
						SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
						String strDate = formatDate(date);
						Date exDate = aggdetail.expiryDate();
						Date date1 = dateFormat.parse(strDate);

						corpTokenValidityFlag = true;

						if (!isSameDay(date1, exDate) && date1.compareTo(exDate) > 0) {
							logger.info("Corprate Token Expired for CORPORATE_ID and aggrId " + corpId + "  "
									+ aggregatorId);
						}
					} else {
						logger.info("Corporate_token_does_not_exist");
					}
			}
		} catch (ParseException e) {
			logger.info("Exception while validating corporate Token :: " + corpId + "  " + aggregatorId + e);
		} catch (Exception e) {
			logger.info("Exception while validating corporate Token :: " + corpId + "  " + aggregatorId + e);
		}
		logger.info("corpTokenValidityFlag-->" + corpTokenValidityFlag);
		logger.info("[ValidationDAOImpl][validatingCorpToken()][ends]");
		return corpTokenValidityFlag;
	}

	public static String formatDate(Date date1) {
		logger.info("[ValidationDAOImpl][formatDate()][Start]");
		SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		logger.info("[ValidationDAOImpl][formatDate()][ends]");
		return fmt.format(date1);
	}

	public static boolean isSameDay(Date date1, Date date2) {
		logger.info("[ValidationDAOImpl][isSameDay()][Start]");
		SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		logger.info("[ValidationDAOImpl][isSameDay()][ends]");
		return fmt.format(date1).equals(fmt.format(date2));
	}

	public boolean isValidAggregatorAndCorpCount(String aggregatorID, String corporateID) {
		logger.info("[ValidationDAOImpl][aggregatorAndCorpCount(String aggregatorID, String corporateID)][Start]");
		logger.info("aggregatorID-->" + aggregatorID);
		logger.info("corporateID-->" + corporateID);
		boolean aggCorpCountFlg = false;
		int count = 0;
		String fetchServiceCountQuery = "select COUNT(*) from SBI_YB_APIBNKNG_PROVIDER_DTLS where CORPORATE_ID=:corporateID and AGGRTR_ID= :aggregatorID";
		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("corporateID", corporateID);
			params.addValue("aggregatorID", aggregatorID);
			count = namedParameterJdbcTemplate.queryForObject(fetchServiceCountQuery, params, Integer.class);
			logger.info("count-->" + count);

			if (count > 0) {
				aggCorpCountFlg = true;
			}

		} catch (DataAccessException e) {
			logger.info(
					"Exception while retreving SERVICE DETAILS COUNT :: " + corporateID + " " + aggregatorID + " " + e);
		} catch (Exception e) {
			logger.info(
					"Exception while retreving SERVICE DETAILS COUNT :: " + corporateID + " " + aggregatorID + " " + e);
		}
		logger.info("aggCorpCountFlg-->" + aggCorpCountFlg);
		logger.info("[ValidationDAOImpl][aggregatorAndCorpCount(String aggregatorID, String corporateID)][ENDS]");
		return aggCorpCountFlg;
	}

	public Boolean checkCorpStatus(String corpId) {
		logger.info("[ValidationDAOImpl][checkCorpStatus()][Start]");
		boolean corpStatus = Boolean.valueOf(false);
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("corpId", corpId);
		String query = "select count(1) from  sbicorp_corporate_profile where status = 1 and CORPORATE_ID =:corpId";
		logger.info("corpId-->" + corpId);
		int checkCorpIdStatus = ((Integer) this.namedParameterJdbcTemplate.queryForObject(query, params, Integer.class))
				.intValue();
		logger.info("corpId-->" + corpId);
		if (checkCorpIdStatus > 0) {
			corpStatus = Boolean.valueOf(true);
		}
		logger.info("corpStatus-->" + corpStatus);
		logger.info("[ValidationDAOImpl][checkCorpStatus()][ends]");
		return corpStatus;
	}

	public boolean aggregatorAndCorpCount(String aggregatorID, String corporateID) {
		logger.info("[ValidationDAOImpl][aggregatorAndCorpCount(String aggregatorID, String corporateID)][Start]");
		logger.info("aggregatorID-->" + aggregatorID);
		logger.info("corporateID-->" + corporateID);
		boolean aggCorpCountFlg = false;
		int count = 0;
		String fetchServiceCountQuery = "select COUNT(*) from SBI_YB_APIBNKNG_PROVIDER_DTLS where CORPORATE_ID=:corporateID and AGGRTR_ID= :aggregatorID";
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("corporateID", corporateID);
		params.addValue("aggregatorID", aggregatorID);
		try {
			count = namedParameterJdbcTemplate.queryForObject(fetchServiceCountQuery, params,
					Integer.class);
			logger.info("count-->" + count);

			if (count > 0) {
				aggCorpCountFlg = true;
			}

		} catch (DataAccessException e) {
			logger.info(
					"Exception while retreving SERVICE DETAILS COUNT :: " + corporateID + " " + aggregatorID + " " + e);
		} catch (Exception e) {
			logger.info(
					"Exception while retreving SERVICE DETAILS COUNT :: " + corporateID + " " + aggregatorID + " " + e);
		}
		logger.info("aggCorpCountFlg-->" + aggCorpCountFlg);
		logger.info("[ValidationDAOImpl][aggregatorAndCorpCount(String aggregatorID, String corporateID)][ENDS]");
		return aggCorpCountFlg;
	}

	public Map<String, String> getCorporateOnboardDetail(String corpID) {
		logger.info("getCorporateOnboardDetail(String corpID) method begins ::");
		Map<String, String> corporateOnboardDetail = null;

		List<CorporateOnboard> corporateOnboardDetailList = null;
		String query = "select AGGRTR_ID,STATUS from SBI_YB_APIBNKNG_ONBOARDING_STATUS where CORPORATE_ID= :corpID";
		try {
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("corpID", corpID);
			corporateOnboardDetailList = namedParameterJdbcTemplate.query(query, params, new RowMapper<CorporateOnboard>() {public CorporateOnboard mapRow(ResultSet rs, int rowNum) throws SQLException {CorporateOnboard corporateOnboardDetail = new CorporateOnboard(rs.getString("AGGRTR_ID"),rs.getString("STATUS"));


							return corporateOnboardDetail;
						}
					});
			logger.info("corporateOnboardDetailList.size()-->" + corporateOnboardDetailList.size());
			if (corporateOnboardDetailList.size() == 0) {
				logger.info("no record found for userName   " + corpID);

			} else {

				corporateOnboardDetail = new HashMap<>();
				corporateOnboardDetail.put("aggregatorID",
						((CorporateOnboard) corporateOnboardDetailList.get(0)).aggregatorID());
				corporateOnboardDetail.put("status",
						((CorporateOnboard) corporateOnboardDetailList.get(0)).status());
			}

		} catch (DataAccessException e) {
			logger.info("Error in fetching records  for corpId :: " + corpID + "  " + e);

		} catch (Exception e) {
			logger.info("Error in fetching records  for userID :: " + corpID + "  " + e);
		}
		logger.info("getCorporateOnboardDetail(String userName) method ends ::");
		return corporateOnboardDetail;
	}

	public Map<String, String> validateCorpID(String corpID)  {
		logger.info("[ValidationDAOImpl][validateCorpID()][Start]");
	    String corpId = null;
	    String isSaral = null;
	    String active = null;
	    Map<String,String> corpDetails = null;
	    List<APIBankingEntity> aggCorpDetails = null;
	    String fetchTranctionQuery = "select * from SBI_YB_APIBNKNG_CORP_MASTER where CORPORATE_ID=?";
	    logger.info("corpAlias-->"+corpID);
	    MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("corpID", corpID);
	    try {
	      aggCorpDetails = namedParameterJdbcTemplate.query(fetchTranctionQuery, params, (rs, rowNum) -> {APIBankingEntity aggCorpData = new APIBankingEntity(rs.getString("CORPORATE_ID"),"",rs.getString("CORPORATE_ALIAS"),"","",null,rs.getString("ACTIVE"),null,rs.getString("IS_SARAL"));

            return aggCorpData;
          });
	      if (aggCorpDetails.size() == 0) {
	    	  logger.info("no record found for corpateId   " + corpID);

	      } else {
	    	  corpId = ((APIBankingEntity)aggCorpDetails.get(0)).corpId();
	    	  isSaral = ((APIBankingEntity)aggCorpDetails.get(0)).isSaral();
	    	  active = ((APIBankingEntity)aggCorpDetails.get(0)).active();
	    	  corpDetails = new HashMap<>();
	    	  corpDetails.put("corpId", corpId);
	    	  corpDetails.put("isSaral", isSaral);
	    	  corpDetails.put("active", active);
	      }


	    } catch (DataAccessException e) {
	    	logger.info("Error in fetching records  for corpId ::  " + corpID + "  " + e);

	    } catch (Exception e) {
	    	logger.info("Error in fetching records  for corpId :: " + corpID + "  " + e);

	    }
	    logger.info("[ValidationDAOImpl][validateCorpID()][ends]");
	    return corpDetails;
	  }

	public boolean isDuplicateAPIReqRefNo(Optional<String> aPIReqRefNo) {
		String query = "SELECT COUNT(*) FROM YBADT.SBI_SERVICE_AUDIT WHERE REQ_REF_NO =:aPIReqRefNo";
		if(aPIReqRefNo.isPresent()) {
			try {
				MapSqlParameterSource params = new MapSqlParameterSource();
				params.addValue("aPIReqRefNo", aPIReqRefNo.get());
				int count = namedParameterJdbcTemplate.queryForObject(query, params, Integer.class);
				if (count > 0) {
					logger.info("Request reference number already exist!!", aPIReqRefNo);
					return true;
				}
			} catch (DataAccessException dAE) {
				logger.info("Data excess exception while checking APIReqRefNo uniqueness : {} ", dAE.getMessage());
			} catch (Exception e) {
				logger.info("Exception while checking APIReqRefNo uniqueness : {} ", e.getMessage());
			}
		}
		return false;
	}
}
