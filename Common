public Boolean isTransactionPwdEmpty(String userName, String corporateId) throws DAOException {
    logger.debug("isTransactionPwdEmpty(String userName,String corporateId) throws DAOException method starts");
    Boolean count = null;
    try {
        SqlParameterSource params = new MapSqlParameterSource()
            .addValue("userName", userName)
            .addValue("corporateId", corporateId);
        
        String sqlQuery = "select count(*) from bv_user_profile where user_id in " +
                         "(select user_id from bv_user where user_alias=:userName " +
                         "and transaction_password is null and corporate_id = :corporateId)";
        
        count = jdbcTemplate.queryForObject(sqlQuery, params, Boolean.class);
        logger.info("referenceNo ::::" + count);
    } catch (DataAccessException ex) {
        logger.error("Exception Occurred: ", ex);
        DAOException.throwException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    }       
    logger.debug("isTransactionPwdEmpty(String userName,String corporateId) throws DAOException method ends");
    return count;
}

public String insertPasswordCount(String userName, String branchCode, String type) throws DAOException {
    logger.info("insertPasswordCount(String userName, String branchCode,String type)" + LoggingConstants.METHODBEGIN);
    logger.info("username , linkedUserName, fullName : " + userName + " AND " + branchCode + " AND ");
    
    String referenceNo = null;
    try {
        if (userName == null || branchCode == null || 
            (userName.trim()).equals(DAOConstants.EMPTY) || (branchCode.trim()).equals(DAOConstants.EMPTY)) {
            DAOException.throwException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE);
        }
        
        referenceNo = jdbcTemplate.queryForObject(SQLConstants.PASSWORD_COUNT_REFERENCE, new HashMap<>(), String.class);
        logger.info("Refernce No::" + referenceNo); 
        
        SqlParameterSource params = new MapSqlParameterSource()
            .addValue("referenceNo", referenceNo)
            .addValue("userName", userName)
            .addValue("branchCode", branchCode)
            .addValue("type", type);
        
        for (String paramName : new String[]{"referenceNo", "userName", "branchCode", "type"}) {
            logger.info("Parameters for Query is --> " + ((MapSqlParameterSource)params).getValue(paramName));
        }
        
        int noOfRowsInserted = jdbcTemplate.update(SQLConstants.INSERT_SBI_PASSWORD_COUNT, params);
        
        if (noOfRowsInserted <= 0) {
            DAOException.throwException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE);
        }
        
        String message = "";
        if (type.equalsIgnoreCase("1")) {
            message = "Lost profile password request received from . Username :" + userName + ".";
        } else if (type.equalsIgnoreCase("2")) {
            message = "Lost transaction password request received from . Username :" + userName + ".";
        }
        
        boolean status = insertBranchMessage(message, branchCode);
    } catch (DataAccessException ex) {
        logger.error("Exception occurred in insertPasswordCount: ", ex);
        DAOException.throwException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    }
    
    logger.info("insertPasswordCount(String userName, String branchCode,String type)" + LoggingConstants.METHODEND);
    return referenceNo;
}

public String getPasswordReferenceDetail(String userName, String branchCode, String type) throws DAOException {
    logger.debug("getPasswordReferenceDetail(String userName,String branchCode,String type) throws DAOException method starts");
    String referenceNo = "";
    try {
        SqlParameterSource params = new MapSqlParameterSource()
            .addValue("type", type)
            .addValue("userName", userName)
            .addValue("branchCode", branchCode);
        
        String sqlQuery = "select reference_no from sbi_password_count where status=1 " +
                         "and password_type=:type and user_name=:userName and branch_code=:branchCode " +
                         "and password_changed_date is null order by creation_time desc";
        
        List<Map<String, Object>> referenceNoList = jdbcTemplate.queryForList(sqlQuery, params);
        
        if (referenceNoList.size() > 0) {
            Map<String, Object> referenceNoMap = referenceNoList.get(0);
            referenceNo = (String) referenceNoMap.get("reference_no");
        }
        
        logger.info("referenceNoList ::::" + referenceNoList);
        logger.info("referenceNo ::::" + referenceNo);
    } catch (DataAccessException ex) {
        logger.error("Exception Occurred: ", ex);
        DAOException.throwException(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, ex);
    }       
    logger.debug("getPasswordReferenceDetail(String userName,String branchCode,String type) throws DAOException method ends");
    return referenceNo;
}
