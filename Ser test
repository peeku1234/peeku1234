package com.sbi.microservice.framework.integration;

import com.sbi.microservice.framework.constant.ErrorCodes;
import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.exception.BusinessException;
import com.sbi.microservice.framework.model.IntegrationApiRequest;
import com.sbi.microservice.framework.model.IntegrationConfig;
import com.sbi.microservice.framework.repository.IntegrationDAO;
import com.sbi.microservice.framework.security.EISEncryptRequest;
import com.sbi.microservice.framework.utils.CoreDetails;
import com.sbi.microservice.framework.utils.IntegrationValidator;
import com.sbi.microservice.framework.utils.JsonUtils;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Profile("!performance-test")
public class IntegrationService implements DownstreamIntegration {

 private static final Logger logger = LoggerFactory.getLogger(IntegrationService.class);

 private JsonUtils jsonUtils;

 @Value("${yono.eis.publicKey}")
 private String providerPublicKey;
 @Value("${yono.eis.privateKey}")
 private String consumerPrivateKey;
 @Value("${yono.eis.passwordPath}")
 private String passwordPath;
 @Value("${yono.eis.timeout}")
 private int timeout;

 @Autowired
 private IntegrationDAO integrationDAO;

 @Autowired
 private EISEncryptRequest eisEncryptRequest;

 @Autowired
 private CoreDetails coreDetails;

 @Autowired
 private IntegrationValidator integrationValidator;
 @Autowired
 private OTPValidationService otpValidationService;

 private final CircuitBreakerFactoryService circuitBreakerFactoryService;

 public IntegrationService(CircuitBreakerFactoryService circuitBreakerFactoryService) {
  this.circuitBreakerFactoryService = circuitBreakerFactoryService;
 }

 @Override
 public Map<String, Object> callDownstreamService(String serviceName, Map<String, Object> inputParam) {
  CircuitBreaker circuitBreaker = circuitBreakerFactoryService.getCircuitBreaker(serviceName);
        /*Retry retry = circuitBreakerFactoryService.getRetry(serviceName);
        return Try.ofSupplier(Retry.decorateSupplier(retry, CircuitBreaker.decorateSupplier(circuitBreaker, () -> {*/
  // Fetch integration config
  IntegrationConfig config = circuitBreakerFactoryService.getConfig();
  Map<String, Object> requestMap = new HashMap<>();
  List<IntegrationApiRequest> integrationApiRequest = integrationDAO.getAPIIntegrationDetail((String) inputParam.get("serviceName"));
  if (!integrationApiRequest.isEmpty()) {
   // List<IntegrationApiRequest> params = integrationApiRequest.get();
   for (int i = 0; i < integrationApiRequest.size(); i++) {
    integrationValidator.validateIntegrateService(integrationApiRequest.get(0));
    requestMap.put(integrationApiRequest.get(i).attribute_name(), inputParam.get(integrationApiRequest.get(i).attribute_name()));
   }

   // requestMap = params.stream().collect(Collectors.toMap(IntegrationApiRequest::attribute_name, (paramsList) -> (String) inputParam.get(paramsList.attribute_name())));

  }
  if ("HTTP".equalsIgnoreCase(integrationApiRequest.get(0).protocol())) {
   try {
    return makeHttpCall((String) integrationApiRequest.get(0).url(), requestMap, config);
   } catch (Exception e) {
    // TODO Auto-generated catch block
   }
  } else {
   return makeTcpCall(integrationApiRequest.get(0).host(), integrationApiRequest.get(0).port(), serviceName, requestMap);
  }
  return null;// check this
  // }))).recover(throwable -> null).get(); // check this*/
 }

 public Map<String, Object> makeHttpCall(String urlStr, Map<String, Object> inputParam, IntegrationConfig config) {
  Map<String, Object> responseMap = new HashMap<String, Object>();
  Map<String, Object> eisResponseMap = new HashMap<>();
  String eciResponse = null;
  if (urlStr.endsWith("validateotp-noenc")) {
   logger.info(" urlStr {}", urlStr);
   logger.info(" inputParam {}", inputParam);
   eisResponseMap = otpValidationService.validateParams(inputParam);
   logger.info(" eisResponseMap validateParams {}", eisResponseMap);
   String status = (String) eisResponseMap.get(FrameworkConstants.STATUS);
   logger.info(" status {}", status);
   if (status.equalsIgnoreCase("Success")) {
    eisResponseMap = otpValidationService.validateOTP(urlStr, inputParam);
    logger.info(" eisResponseMap validateOTP {}", eisResponseMap);
   }
  } else {
   String Req_REF_No = jsonUtils.getReqRefNo();
   eisEncryptRequest.setProviderPublicKey(providerPublicKey);
   eisEncryptRequest.setConsumerPrivateKey(consumerPrivateKey);
   eisEncryptRequest.setPasswordPath(passwordPath);
   eisEncryptRequest.setConnectionTimeOut(timeout);

   try {
/*            String reqJsonStr = JsonUtils.maptoJsonString(inputParam);
            Map<String,String> reqMap = new HashMap<>();
            reqMap.put("ReferenceNo", Req_REF_No);
            reqMap.put("RequestJson", reqJsonStr);
            reqMap.put("ServiceURL",urlStr);*/

    eisResponseMap = eisEncryptRequest.encryptDecryptReqResp(urlStr, inputParam);
    //responseMap.put("decryptedResponse",eisResponseMap);
   } catch (Exception e) {
    eciResponse = "FAILURE";

   }
  }
  return eisResponseMap;
 }

 private Map<String, Object> makeTcpCall(String host, int port, String serviceName, Map<String, Object> inputParam) {
  Map<String, Object> resMap = null;
  try {
   resMap = coreDetails.getDataFromBankSystem(host, port, inputParam);
  } catch (NullPointerException e) {
   throw new BusinessException(ErrorCodes.FATAL_EXCEPTION_ERRORCODE, ErrorCodes.FATAL_EXCEPTION_ERRORCODE);
  }

  return resMap;
 }
}
