@Autowired
private validation requestValidator; // from framework

@PostMapping("/fetchAccountBalance")
public SBIApplicationResponse getAccountBalance(final HttpServletRequest request, final HttpServletResponse response) {
    LOGGER.info("Fetch Account Balance Begin: Method-getAccountBalance");
    SBIApplicationResponse sbiApplicationResponse;
    ObjectMapper mapper = new ObjectMapper();
    try {
        String req = (String) request.getAttribute(Constants.PAYLOAD);

        // Convert JSON string to Map for validation
        Map<String, Object> inputParams = mapper.readValue(req, new TypeReference<Map<String, Object>>() {});

        // Load validation rules (this will depend on your project â€” could be from DB, config, or hardcoded for now)
        List<ValidationApiRequest> validationRules = List.of(
            new ValidationApiRequest("userName", "STRING", true, 0, 50, null),
            new ValidationApiRequest("accountNo", "STRING", true, 10, 15, "^[0-9]+$")
        );

        // Call validation method
        requestValidator.validateRequest(inputParams, validationRules);

        // Now parse into your domain object
        JsonFactory factory = mapper.getFactory();
        JsonParser json = factory.createParser(req);
        FetchAccountBalanceRequest accBalReq = mapper.readValue(json, FetchAccountBalanceRequest.class);

        sbiApplicationResponse = accountBalanceService.fetchAccountBalance(accBalReq);

    } catch (IOException ex) {
        LOGGER.error("Exception occurred - SBIApplicationRequest & SBIApplicationResponse is not valid");
        throw new BusinessException(ErrorConstants.ASAS0001, ErrorConstants.ASAS0001);
    }
    LOGGER.info("Fetch Account Balance End: Method-getAccountBalance");
    return sbiApplicationResponse;
}
