@Test
void uploadConfigurationFile_ThrowsMicroServiceExceptionOnIOException() throws Exception {
    MultipartFile badFile = mock(MultipartFile.class);
    when(badFile.getOriginalFilename()).thenReturn("test.txt");
    doThrow(IOException.class).when(badFile).transferTo(any(File.class));

    when(uploadFileDAO.getNextNumberFromSequences()).thenReturn(BigInteger.TEN);
    when(uploadFileDAO.getEncryptedForCorporate(anyString(), anyString())).thenReturn(List.of(0));

    assertThrows(MicroServiceException.class, () -> {
        uploadFileService.uploadConfigurationFile(badFile, "SAME_BANK_ADD_BENE", "user", "corpId");
    });
}

@Test
void uploadConfigurationFile_ThrowsMicroServiceExceptionOnIllegalState() throws Exception {
    MultipartFile badFile = mock(MultipartFile.class);
    when(badFile.getOriginalFilename()).thenReturn("test.txt");
    doThrow(IllegalStateException.class).when(badFile).transferTo(any(File.class));

    when(uploadFileDAO.getNextNumberFromSequences()).thenReturn(BigInteger.TEN);
    when(uploadFileDAO.getEncryptedForCorporate(anyString(), anyString())).thenReturn(List.of(0));

    assertThrows(MicroServiceException.class, () -> {
        uploadFileService.uploadConfigurationFile(badFile, "SAME_BANK_ADD_BENE", "user", "corpId");
    });
}

@Test
void uploadConfigurationFile_ThrowsDAOExceptionOnDataAccessFailure() {
    when(uploadFileDAO.getNextNumberFromSequences()).thenReturn(BigInteger.TEN);
    when(uploadFileDAO.getEncryptedForCorporate(anyString(), anyString())).thenReturn(List.of(0)));
    when(uploadFileDAO.saveUploadedFileDetails(any())).thenThrow(new DataAccessException("DB Error") {});

    assertThrows(DAOException.class, () -> {
        uploadFileService.uploadConfigurationFile(mockFile, "SAME_BANK_ADD_BENE", "user", "corpId");
    });
}
