import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.slf4j.event.Level;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class CoreInterfaceImplLoggerTest {

    @Mock
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    
    @Mock
    private JdbcTemplate jdbcTemplate;
    
    @InjectMocks
    private CoreInterfaceImpl coreInterface;
    
    @Mock
    private Logger logger;

    @Test
    public void testFindCoreResponseData_logsDebugWhenEnabled() {
        // Setup
        when(namedParameterJdbcTemplate.getJdbcTemplate()).thenReturn(jdbcTemplate);
        when(jdbcTemplate.queryForList(anyString(), any(Object[].class))).thenReturn(new ArrayList<>());
        
        // Replace logger with mock
        Logger originalLogger = LoggerFactory.getLogger(CoreInterfaceImpl.class);
        try {
            // This requires PowerMock or similar to mock static LoggerFactory
            // For now, we'll assume the logger is properly set up
            
            // Enable debug logging for this test
            when(logger.isDebugEnabled()).thenReturn(true);
            
            // Test
            String txnId = "123";
            coreInterface.findCoreResponseData(txnId);
            
            // Verify debug logs were called
            // This would need a proper logger mock verification
            // verify(logger).debug("txnID :" + txnId);
            // verify(logger).debug(eq("coreResponseDataList :"), any());
        } finally {
            // Restore original logger
            // LoggerFactory.getLogger(CoreInterfaceImpl.class) = originalLogger;
        }
    }

    @Test
    public void testFindCoreRequestData_logsDebugWhenEnabled() {
        // Setup
        when(namedParameterJdbcTemplate.getJdbcTemplate()).thenReturn(jdbcTemplate);
        when(jdbcTemplate.queryForList(anyString(), any(Object[].class))).thenReturn(new ArrayList<>());
        
        // Enable debug logging for this test
        when(logger.isDebugEnabled()).thenReturn(true);
        
        // Test
        String txnId = "456";
        coreInterface.findCoreRequestData(txnId);
        
        // Verify debug logs were called
        // verify(logger).debug("txnID :" + txnId);
        // verify(logger).debug(eq("coreRequestDataList :"), any());
    }

    @Test
    public void testFindCoreRequestDataWithBankCode_logsInfo() {
        // Setup
        when(namedParameterJdbcTemplate.getJdbcTemplate()).thenReturn(jdbcTemplate);
        when(jdbcTemplate.queryForList(anyString(), any(Object[].class))).thenReturn(new ArrayList<>());
        
        // Test
        String txnId = "789";
        String bankCode = "SBI";
        coreInterface.findCoreRequestData(txnId, bankCode);
        
        // Verify info log was called
        // verify(logger).info("TXNNO :" + txnId + " " + "bankCode :" + bankCode);
    }

    @Test
    public void testGetCoreServerDatas_logsErrorOnDataAccessException() throws Exception {
        // Setup
        when(namedParameterJdbcTemplate.getJdbcTemplate()).thenReturn(jdbcTemplate);
        when(jdbcTemplate.queryForList(anyString(), any(Object[].class)))
            .thenThrow(new DataAccessException("Test exception") {});
        
        // Test
        String txnId = "123";
        String type = "req";
        List result = coreInterface.getCoreServerDatas(txnId, type);
        
        // Verify error log was called
        // verify(logger).error(eq("DataAccessException :"), any(DataAccessException.class));
        assertNull(result);
    }
}

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.Appender;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.slf4j.LoggerFactory;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

public class CoreInterfaceImplLogbackTest {
    
    private Appender<ILoggingEvent> mockAppender;
    private Logger coreInterfaceLogger;
    
    @BeforeEach
    public void setup() {
        mockAppender = mock(Appender.class);
        coreInterfaceLogger = (Logger) LoggerFactory.getLogger(CoreInterfaceImpl.class);
        coreInterfaceLogger.addAppender(mockAppender);
    }
    
    @Test
    public void testDebugLogging() {
        // Set logger level to DEBUG
        coreInterfaceLogger.setLevel(ch.qos.logback.classic.Level.DEBUG);
        
        // Call method that should log
        // coreInterface.findCoreResponseData("123");
        
        // Verify logging
        ArgumentCaptor<ILoggingEvent> argumentCaptor = ArgumentCaptor.forClass(ILoggingEvent.class);
        verify(mockAppender).doAppend(argumentCaptor.capture());
        
        ILoggingEvent loggingEvent = argumentCaptor.getValue();
        assertEquals(ch.qos.logback.classic.Level.DEBUG, loggingEvent.getLevel());
        assertTrue(loggingEvent.getFormattedMessage().contains("txnID :123"));
    }
}
