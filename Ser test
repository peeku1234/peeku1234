package com.sbi.microservice.framework.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Optional;

import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.event.AuditEvent;
import com.sbi.microservice.framework.repository.AuditDAO;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.dao.DataAccessException;

@ExtendWith(MockitoExtension.class)
class AuditServiceTest {

    @Mock
    private AuditDAO auditDAOImpl;

    @Mock
    private HttpServletRequest request;

    @Mock
    private Logger logger;

    @InjectMocks
    private AuditService auditService;

    private final String serviceID = "testService";
    private final String channelID = "testChannel";
    private final String endPointName = "testEndpoint";
    private final String engineID = "testEngine";
    private final String ipAddress = "127.0.0.1";
    private final String serviceCategory = "testCategory";
    private final String cipherKey = "testKey";
    private final String payload = "testPayload";
    private final String serviceResRefNo = "testRefNo";
    private final String traceId = "testTraceId";

    @BeforeEach
    void setUp() {
        // Mock logger if needed (though usually not necessary as it's static)
    }

    @Test
    void doAuditRequest_Success() {
        // Given
        when(request.getRemoteAddr()).thenReturn(ipAddress);
        
        // When
        auditService.doAuditRequest(request, serviceID, channelID, endPointName, 
            engineID, ipAddress, serviceCategory, Optional.of(cipherKey), 
            payload, serviceResRefNo, traceId);
        
        // Then
        verify(auditDAOImpl).insertAuditData(any(AuditEvent.class));
    }

    @Test
    void doAuditRequest_DataAccessException() {
        // Given
        when(request.getRemoteAddr()).thenReturn(ipAddress);
        doThrow(new DataAccessException("DB Error") {}).when(auditDAOImpl).insertAuditData(any(AuditEvent.class));
        
        // When
        auditService.doAuditRequest(request, serviceID, channelID, endPointName, 
            engineID, ipAddress, serviceCategory, Optional.of(cipherKey), 
            payload, serviceResRefNo, traceId);
        
        // Then
        verify(auditDAOImpl).insertAuditData(any(AuditEvent.class));
        // Verify logger was called (if you really want to test logging)
    }

    @Test
    void doAuditRequest_GenericException() {
        // Given
        when(request.getRemoteAddr()).thenReturn(ipAddress);
        doThrow(new RuntimeException("Generic Error")).when(auditDAOImpl).insertAuditData(any(AuditEvent.class));
        
        // When
        auditService.doAuditRequest(request, serviceID, channelID, endPointName, 
            engineID, ipAddress, serviceCategory, Optional.of(cipherKey), 
            payload, serviceResRefNo, traceId);
        
        // Then
        verify(auditDAOImpl).insertAuditData(any(AuditEvent.class));
        // Verify logger was called
    }

    @Test
    void doAuditRequest_EmptyCipherKey() {
        // Given
        when(request.getRemoteAddr()).thenReturn(ipAddress);
        
        // When
        auditService.doAuditRequest(request, serviceID, channelID, endPointName, 
            engineID, ipAddress, serviceCategory, Optional.empty(), 
            payload, serviceResRefNo, traceId);
        
        // Then
        verify(auditDAOImpl).insertAuditData(any(AuditEvent.class));
        // Should handle Optional.empty() case (though current implementation calls get() without checking)
    }

    @Test
    void doAuditResponse_Success() {
        // Given
        AuditEvent auditEvent = new AuditEvent();
        
        // When
        auditService.doAuditResponse(auditEvent);
        
        // Then
        verify(auditDAOImpl).insertAuditData(auditEvent);
    }

    @Test
    void doAuditResponse_Exception() {
        // Given
        AuditEvent auditEvent = new AuditEvent();
        doThrow(new RuntimeException("Error")).when(auditDAOImpl).insertAuditData(auditEvent);
        
        // When
        auditService.doAuditResponse(auditEvent);
        
        // Then
        verify(auditDAOImpl).insertAuditData(auditEvent);
        // Verify logger was called
    }

    @Test
    void constructor_InitializesCorrectly() {
        // Given
        AuditDAO dao = mock(AuditDAO.class);
        
        // When
        AuditService service = new AuditService(dao);
        
        // Then
        assertNotNull(service);
    }
}
