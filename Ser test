package com.sbi.microservice.framework.services.access;

import com.sbi.microservice.framework.cache.CacheManager;
import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.constant.UserRole;
import com.sbi.microservice.framework.model.Authentication;
import com.sbi.microservice.framework.model.CorporateProfile;
import com.sbi.microservice.framework.model.UserProfile;
import com.sbi.microservice.framework.repository.CorporateDAO;
import com.sbi.microservice.framework.repository.access.AuthenticationDAO;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Component;
@Component
public final class WebAuthenticationProvider implements AuthenticationProvider {
	private final CacheManager cacheManager;
	private final AuthenticationDAO authenticationDAO;
	private final CorporateDAO corporateDAO;

	public WebAuthenticationProvider(CacheManager cacheManager, AuthenticationDAO authenticationDAO, CorporateDAO corporateDAO){
		this.cacheManager = cacheManager;
		this.authenticationDAO = authenticationDAO;
		this.corporateDAO = corporateDAO;
	}

	@Override
	public Authentication authenticate(HttpServletRequest request) {
		Authentication authentication=cacheManager.getSession("");
		if(authentication==null || authentication.userProfile() ==null || !"".equals(authentication.userProfile().userName())) {
			UserProfile userProfile=authenticationDAO.getUserDetails(null, null);
			if(userProfile==null) {
				return null;
			}else {
				CorporateProfile corporateProfile=null;
				
				if(userProfile.userRole()!=UserRole.SARAL.getValue()) {
					corporateProfile=corporateDAO.getCorporateProfile(userProfile.corporateId());
				}
				
				authentication=new Authentication(FrameworkConstants.REQUESTOR_WEB, null, userProfile, corporateProfile, true);
				cacheManager.setSession(authentication);
			}
		}
		return authentication;
		
		
		
	}

}
