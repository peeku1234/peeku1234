package com.sbi.yb.services.repository.impl;

import com.sbi.microservice.framework.exception.TechnicalException;
import com.sbi.yb.services.constants.ErrorConstants;
import com.sbi.yb.services.constants.SQLConstants;
import com.sbi.yb.services.constants.UtilsConstant;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class HolidayMasterDAOImplTest {

    @Mock
    private NamedParameterJdbcTemplate jdbcTemplate;

    @InjectMocks
    private HolidayMasterDAOImpl holidayMasterDAO;

    private String dateTime;
    private String merchantCode;

    @BeforeEach
    void setUp() {
        dateTime = "2024-01-01";
        merchantCode = "RTGS";
    }

    @Test
    void testFindHoliday_WithRTGSMerchantCode_ShouldReturnHolidayDetails() {
        // Arrange
        Map<String, Object> expectedResult = new HashMap<>();
        expectedResult.put("count", "1");
        expectedResult.put("date", java.sql.Date.valueOf("2024-01-01"));

        when(jdbcTemplate.queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class))
        ).thenReturn(expectedResult);

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNotNull(result);
        assertEquals("1", result.get("count"));
        verify(jdbcTemplate, times(1)).queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithNEFTMerchantCode_ShouldReturnHolidayDetails() {
        // Arrange
        merchantCode = "NEFT";
        Map<String, Object> expectedResult = new HashMap<>();
        expectedResult.put("count", "1");
        expectedResult.put("date", java.sql.Date.valueOf("2024-01-01"));

        when(jdbcTemplate.queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class))
        ).thenReturn(expectedResult);

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNotNull(result);
        verify(jdbcTemplate, times(1)).queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithBankHolidayMerchantCode_ShouldReturnHolidayDetails() {
        // Arrange
        merchantCode = "BANK_HOLIDAY";
        Map<String, Object> expectedResult = new HashMap<>();
        expectedResult.put("count", "1");
        expectedResult.put("date", java.sql.Date.valueOf("2024-01-01"));

        when(jdbcTemplate.queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class))
        ).thenReturn(expectedResult);

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNotNull(result);
        verify(jdbcTemplate, times(1)).queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithInvalidMerchantCode_ShouldReturnNull() {
        // Arrange
        merchantCode = "INVALID";

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNull(result);
        verify(jdbcTemplate, never()).queryForObject(
            anyString(),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithCaseInsensitiveMerchantCode_ShouldReturnHolidayDetails() {
        // Arrange
        merchantCode = "rtgs"; // lowercase
        Map<String, Object> expectedResult = new HashMap<>();
        expectedResult.put("count", "1");
        expectedResult.put("date", java.sql.Date.valueOf("2024-01-01"));

        when(jdbcTemplate.queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class))
        ).thenReturn(expectedResult);

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNotNull(result);
        verify(jdbcTemplate, times(1)).queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WhenDataAccessExceptionOccurs_ShouldThrowTechnicalException() {
        // Arrange
        when(jdbcTemplate.queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class))
        ).thenThrow(new DataAccessException("Database error") {});

        // Act & Assert
        TechnicalException exception = assertThrows(TechnicalException.class, 
            () -> holidayMasterDAO.findHoliday(dateTime, merchantCode));
        
        assertEquals("Failed to connect to Db", exception.getMessage());
        assertEquals(ErrorConstants.FATAL_EXCEPTION_ERRORCODE, exception.getErrorCode());
        
        verify(jdbcTemplate, times(1)).queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithNullDateTime_ShouldHandleGracefully() {
        // Arrange
        dateTime = null;
        Map<String, Object> expectedResult = new HashMap<>();
        expectedResult.put("count", "0");
        expectedResult.put("date", null);

        when(jdbcTemplate.queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class))
        ).thenReturn(expectedResult);

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNotNull(result);
        verify(jdbcTemplate, times(1)).queryForObject(
            eq(SQLConstants.GET_HOLIDAY_COUNT_AND_DATE),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithNullMerchantCode_ShouldReturnNull() {
        // Arrange
        merchantCode = null;

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNull(result);
        verify(jdbcTemplate, never()).queryForObject(
            anyString(),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testFindHoliday_WithEmptyMerchantCode_ShouldReturnNull() {
        // Arrange
        merchantCode = "";

        // Act
        Map<String, Object> result = holidayMasterDAO.findHoliday(dateTime, merchantCode);

        // Assert
        assertNull(result);
        verify(jdbcTemplate, never()).queryForObject(
            anyString(),
            any(MapSqlParameterSource.class),
            any(HolidayMasterDAOImpl.HolidayRowMapper.class)
        );
    }

    @Test
    void testHolidayRowMapper_ShouldMapResultSetCorrectly() throws SQLException {
        // Arrange
        HolidayMasterDAOImpl.HolidayRowMapper rowMapper = new HolidayMasterDAOImpl.HolidayRowMapper();
        ResultSet resultSet = mock(ResultSet.class);
        
        when(resultSet.getString("count")).thenReturn("1");
        when(resultSet.getDate("schdate")).thenReturn(java.sql.Date.valueOf("2024-01-01"));

        // Act
        Map<String, Object> result = rowMapper.mapRow(resultSet, 1);

        // Assert
        assertNotNull(result);
        assertEquals("1", result.get("count"));
        assertEquals(java.sql.Date.valueOf("2024-01-01"), result.get("date"));
    }

    @Test
    void testHolidayRowMapper_WithNullValues_ShouldHandleGracefully() throws SQLException {
        // Arrange
        HolidayMasterDAOImpl.HolidayRowMapper rowMapper = new HolidayMasterDAOImpl.HolidayRowMapper();
        ResultSet resultSet = mock(ResultSet.class);
        
        when(resultSet.getString("count")).thenReturn(null);
        when(resultSet.getDate("schdate")).thenReturn(null);

        // Act
        Map<String, Object> result = rowMapper.mapRow(resultSet, 1);

        // Assert
        assertNotNull(result);
        assertNull(result.get("count"));
        assertNull(result.get("date"));
    }

    @Test
    void testConstructor() {
        // Arrange
        NamedParameterJdbcTemplate template = mock(NamedParameterJdbcTemplate.class);
        
        // Act
        HolidayMasterDAOImpl dao = new HolidayMasterDAOImpl(template);
        
        // Assert
        assertNotNull(dao);
    }
}
