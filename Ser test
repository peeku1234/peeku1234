In delimited configuration these are the fields
    private String fieldName;
    private String fieldLength;
    private int orderNo;
    private String description;
    private boolean isMandatory;
    private String fieldType;
    private String fieldAlias;

public List<DelimitedConfiguration> setFieldNameDelimited(List<DelimitedConfiguration> delimitedConfiguration, String fileType) {
        switch (fileType) {
            case UtilsConstant.ADD_SAME_BANK, UtilsConstant.DELETE_SAME_BANK:
                delimitedConfiguration.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMap3P.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMap3P.get(currentFieldName));
                    }
                });
                break;
            case UtilsConstant.ADD_OTHER_BANK, UtilsConstant.DELETE_OTHER_BANK:
                delimitedConfiguration.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapIBTP.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapIBTP.get(currentFieldName));
                    }
                });
                break;
            case UtilsConstant.COMPOSITE_BEN:
                delimitedConfiguration.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapCompBen.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapCompBen.get(currentFieldName));
                    }
                });
                break;
            case UtilsConstant.INTRA_BANK:
                List<DelimitedConfiguration> intraList = delimitedConfiguration.stream().filter(l ->
                        !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_ACCOUNT_NUMBER)
                                && !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_BRANCH_CODE)).toList();
                intraList.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapIntra.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapIntra.get(currentFieldName));
                        if (l.getFieldName().equals(DAOConstants.ACCOUNT_NUMBER) || l.getFieldName().equals(DAOConstants.BRANCH_CODE_INTRA)) {
                            l.setFieldType(DAOConstants.BOTH_TYPE);
                        }
                    }
                });
                return intraList;
            case UtilsConstant.INTER_BANK:
                List<DelimitedConfiguration> interList = delimitedConfiguration.stream().filter(l ->
                        !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_ACCOUNT_NUMBER)
                                && !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_BRANCH_CODE)).toList();
                interList.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapInter.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapInter.get(currentFieldName));
                        if (l.getFieldName().equals(DAOConstants.ACCOUNT_NUMBER) || l.getFieldName().equals(DAOConstants.BRANCH_CODE_INTER)) {
                            l.setFieldType(DAOConstants.BOTH_TYPE);
                        }
                    }
                });
                return interList;
            case UtilsConstant.BOTH_BANK:
                List<DelimitedConfiguration> list = delimitedConfiguration.stream().filter(l ->
                        !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_ACCOUNT_NUMBER)
                                && !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_BRANCH_CODE)).toList();
                list.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapBoth.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapBoth.get(currentFieldName));
                        if (l.getFieldName().equals(DAOConstants.ACCOUNT_NUMBER) || l.getFieldName().equals(DAOConstants.BRANCH_CODE_BOTH)) {
                            l.setFieldType(DAOConstants.BOTH_TYPE);
                        }
                    }
                });
                return list;
            case UtilsConstant.IMPS_TXN:
                delimitedConfiguration.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapIMPSTXN.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapIMPSTXN.get(currentFieldName));
                    }
                });
                break;
            case UtilsConstant.CD: List<DelimitedConfiguration> cdList = delimitedConfiguration.stream().filter(l ->
                    !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_ACCOUNT_NUMBER)
                            && !l.getFieldName().equalsIgnoreCase(DAOConstants.CREDIT_BRANCH_CODE)).toList();
                cdList.forEach(l -> {
                    String currentFieldName = l.getFieldName();
                    if (UtilsConstant.fieldNameMapDD.containsKey(currentFieldName)) {
                        l.setFieldName(UtilsConstant.fieldNameMapDD.get(currentFieldName));
                        if (l.getFieldName().equals(DAOConstants.ACCOUNT_NUMBER_CD) || l.getFieldName().equals(DAOConstants.BRANCH_CODE_CD)) {
                            l.setFieldType(DAOConstants.BOTH_TYPE);
                        }
                    }
                });
                return cdList;
            default:
                return delimitedConfiguration;
        }
        return delimitedConfiguration;
    }
