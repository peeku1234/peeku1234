package com.sbi.yb.service;

import com.sbi.microservice.framework.exception.TechnicalException;
import com.sbi.yb.model.ActualFileDownloadRequest;
import com.sbi.yb.model.FileDownloadResponse;
import com.sbi.yb.model.FileMasterConfig;
import com.sbi.yb.repository.ActualFileDownloadDao;
import com.sbi.yb.service.impl.ActualFileDownloadServiceImpl;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class ActualFileDownloadServiceImplTest {

    @InjectMocks
    private ActualFileDownloadServiceImpl manageFileBeneficiaryService;
    @Mock
    private ActualFileDownloadDao manageFileBeneficiaryDao;

    private String testFileReferenceNo = "41006289";
    private String testFileName = "testfile.xml";
    private String testFileContent = "Test file content";
    ActualFileDownloadRequest request = new ActualFileDownloadRequest();
    FileMasterConfig fileConfig = new FileMasterConfig();

    @BeforeEach
    void setUp() throws IOException {
        request = new ActualFileDownloadRequest();
        request.setFileReferenceNo(testFileReferenceNo);
        request.setFileExtension("xml");
        fileConfig = new FileMasterConfig();
        fileConfig.setSno("41006289");
        fileConfig.setFileType("COMPOSITE_BEN");
        fileConfig.setFileName(testFileName);
        String tempDir = System.getProperty("java.io.tmpdir");
        ReflectionTestUtils.setField(manageFileBeneficiaryService, "compositeFilePath", tempDir);
        ReflectionTestUtils.setField(manageFileBeneficiaryService, "nonCompositeFilePath", tempDir);
        ReflectionTestUtils.setField(manageFileBeneficiaryService, "fileExtensionTxt", "txt");
        ReflectionTestUtils.setField(manageFileBeneficiaryService, "fileExtensionXml", "xml");
        Path testFilePath = Path.of(tempDir, testFileReferenceNo + ".xml");
        Files.write(testFilePath, testFileContent.getBytes());
    }

    @Test
    void downloadActualFile_Success() throws Exception {
        Mockito.when(manageFileBeneficiaryDao.getFileDetails(any())).thenReturn(fileConfig);
        FileDownloadResponse response = manageFileBeneficiaryService.downloadActualFile(request);
        Assertions.assertEquals(testFileReferenceNo + ".xml", "41006289.xml");
        String expectedContent = Base64.getEncoder().encodeToString(testFileContent.getBytes());
        Assertions.assertEquals(expectedContent, response.fileContent());
        assertNotNull(response);
    }

    @Test
    void downloadActualFile_FileNotFound() {
        request.setFileReferenceNo("41006289");
        fileConfig.setSno("123");
        when(manageFileBeneficiaryDao.getFileDetails(any())).thenReturn(null);
        assertThrows(TechnicalException.class,
                () -> manageFileBeneficiaryService.downloadActualFile(request));
    }

    @Test
    void downloadActualFile_txt() throws Exception {
        request.setFileExtension("txt");
        when(manageFileBeneficiaryDao.getFileDetails(any())).thenReturn(fileConfig);
        FileDownloadResponse response = manageFileBeneficiaryService.downloadActualFile(request);
        Assertions.assertEquals(testFileReferenceNo + ".txt", "41006289.txt");
    }

    @Test
    void downloadActualFile_NonCompositeFile() throws Exception {
        fileConfig.setFileType("NON_COMPOSITE");
        when(manageFileBeneficiaryDao.getFileDetails(any())).thenReturn(fileConfig);
        FileDownloadResponse response = manageFileBeneficiaryService.downloadActualFile(request);
        assertNotNull(response);
    }

    @Test
    void downloadActualFile_IOException() throws Exception {
        // Set up a non-existent directory to force IOException
        String invalidPath = "/invalid/path/";
        ReflectionTestUtils.setField(manageFileBeneficiaryService, "compositeFilePath", invalidPath);
        
        fileConfig.setFileType("COMPOSITE_BEN");
        when(manageFileBeneficiaryDao.getFileDetails(any())).thenReturn(fileConfig);
        
        assertThrows(TechnicalException.class,
                () -> manageFileBeneficiaryService.downloadActualFile(request));
    }

    @Test
    void downloadActualFile_DefaultFileExtension() throws Exception {
        request.setFileExtension("pdf"); // Not txt or xml
        when(manageFileBeneficiaryDao.getFileDetails(any())).thenReturn(fileConfig);
        FileDownloadResponse response = manageFileBeneficiaryService.downloadActualFile(request);
        // Should default to xml extension
        Assertions.assertTrue(response.fileName().endsWith(".xml"));
    }
}
