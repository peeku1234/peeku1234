package com.sbi.yb.cinb.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import com.sbi.yb.cinb.constants.ConfigurationConstants;
import com.sbi.yb.cinb.model.ActualFileDownloadRequest;
import com.sbi.yb.cinb.model.FileMasterEntity;
import com.sbi.yb.exception.MicroServiceException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
class ActualFileDownloadServiceImplTest {

    @Mock
    private ActualFileDownloadDao actualFileDownloadDao;

    @InjectMocks
    private ActualFileDownloadServiceImpl service;

    @Test
    void downloadActualFile_WhenIOExceptionOccurs_ThrowsMicroServiceException() {
        // Setup request
        ActualFileDownloadRequest request = new ActualFileDownloadRequest();
        request.setFileReferenceNo("123");
        request.setFileExtension("txt");

        // Mock DAO response
        FileMasterEntity mockEntity = new FileMasterEntity();
        mockEntity.setSno("123");
        mockEntity.setFileType(ConfigurationConstants.COMPOSITE_BEN);
        when(actualFileDownloadDao.getFileDetails(request)).thenReturn(mockEntity);

        // Inject invalid file path to force IOException
        ReflectionTestUtils.setField(service, "compositeFilePath", "/invalid/path/");

        // Execute and verify exception
        MicroServiceException exception = assertThrows(MicroServiceException.class,
            () -> service.downloadActualFile(request));

        assertEquals("YBMFC008", exception.getErrorCode());
        assertEquals("Error while downloading actual file", exception.getErrorMessage());
    }
}
