package com.sbi.yb.cinb.repository.impl;

import com.sbi.yb.cinb.constant.QueryConstants;
import com.sbi.yb.exception.DAOException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UploadFileDAOImplTest {

    @Mock
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @InjectMocks
    private UploadFileDAOImpl uploadFileDAO;

    private SqlParameterSource parameterSource;

    @BeforeEach
    void setUp() {
        parameterSource = new MapSqlParameterSource()
                .addValue("key1", "value1")
                .addValue("key2", "value2");
    }

    @Test
    void saveUploadedFileDetails_Success() {
        when(namedParameterJdbcTemplate.update(anyString(), any(SqlParameterSource.class)))
                .thenReturn(1);

        Integer result = uploadFileDAO.saveUploadedFileDetails(parameterSource);

        assertEquals(1, result);
        verify(namedParameterJdbcTemplate).update(QueryConstants.SAVE_UPLOADED_FILE_DETAILS, parameterSource);
    }

    @Test
    void saveUploadedFileDetails_ThrowsDAOException() {
        when(namedParameterJdbcTemplate.update(anyString(), any(SqlParameterSource.class)))
                .thenThrow(new RuntimeException("Database error"));

        assertThrows(DAOException.class, () -> {
            uploadFileDAO.saveUploadedFileDetails(parameterSource);
        });
    }

    @Test
    void getNextNumberFromSequences_Success() {
        BigInteger expected = BigInteger.valueOf(12345);
        when(namedParameterJdbcTemplate.queryForObject(anyString(), any(SqlParameterSource.class), eq(BigInteger.class))
                .thenReturn(expected);

        BigInteger result = uploadFileDAO.getNextNumberFromSequences();

        assertEquals(expected, result);
        verify(namedParameterJdbcTemplate).queryForObject(
                QueryConstants.GET_XML_FILE_SNO, new MapSqlParameterSource(), BigInteger.class);
    }

    @Test
    void getNextNumberFromSequences_ThrowsDAOException() {
        when(namedParameterJdbcTemplate.queryForObject(anyString(), any(SqlParameterSource.class), eq(BigInteger.class)))
                .thenThrow(new RuntimeException("Database error"));

        assertThrows(DAOException.class, () -> {
            uploadFileDAO.getNextNumberFromSequences();
        });
    }

    @Test
    void getEncryptedForCorporate_Success() {
        List<Integer> expected = Arrays.asList(1, 0);
        when(namedParameterJdbcTemplate.queryForList(anyString(), any(SqlParameterSource.class), eq(Integer.class)))
                .thenReturn(expected);

        List<Integer> result = uploadFileDAO.getEncryptedForCorporate("CORP123", "PAYMENT");

        assertEquals(expected, result);
        verify(namedParameterJdbcTemplate).queryForList(
                QueryConstants.GET_ENCRYPT_FOR_CORPORATE, 
                new MapSqlParameterSource()
                    .addValue("corporateIds", Arrays.asList("default", "CORP123"))
                    .addValue("corporateType", "Corporate")
                    .addValue("txnType", "%PAYMENT%")
                    .addValue("stage", "%IN%")
                    .addValue("status", 1),
                Integer.class);
    }

    @Test
    void getEncryptedForCorporate_EmptyResult() {
        when(namedParameterJdbcTemplate.queryForList(anyString(), any(SqlParameterSource.class), eq(Integer.class)))
                .thenReturn(Collections.emptyList());

        List<Integer> result = uploadFileDAO.getEncryptedForCorporate("CORP123", "PAYMENT");

        assertTrue(result.isEmpty());
    }

    @Test
    void getEncryptedForCorporate_ThrowsDAOException() {
        when(namedParameterJdbcTemplate.queryForList(anyString(), any(SqlParameterSource.class), eq(Integer.class)))
                .thenThrow(new RuntimeException("Database error"));

        assertThrows(DAOException.class, () -> {
            uploadFileDAO.getEncryptedForCorporate("CORP123", "PAYMENT");
        });
    }
}
