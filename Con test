package com.sbi.microservice.framework.repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.sbi.microservice.framework.model.IntegrationApiRequest;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import com.sbi.microservice.framework.model.IntegrationConfig;
import com.sbi.microservice.framework.model.IntegrationMockResponse;
@Repository
public class IntegrationDAOImpl extends BaseDAO implements IntegrationDAO{
	public IntegrationDAOImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
		super(namedParameterJdbcTemplate);
	}

	public Optional<IntegrationConfig> getIntegrationDetails(String integrationName) {
		// TODO Auto-generated method stub
		return null;
	}

	public List<Optional<IntegrationConfig>> getAllIntegrationDetails() {
		// TODO Auto-generated method stub
		return null;
	}

	public List<IntegrationApiRequest> getAPIIntegrationDetail(String serviceName) {
		List<IntegrationApiRequest> integrationApiRequest = new ArrayList<>();
		String sql = "select mas.entity_id, mas.protocol,mas.url,mas.host,mas.port,insreq.attribute_name,insreq.attribute_type,insreq.attribute_data_type,insreq.attribute_length,insreq.is_mandatory_attribute," +
				"insreq.validate_data,insreq.regex_pattern,insreq.min_value,insreq.max_value,insreq.is_attribute_branch_code from sbi_entity_integration_master mas, " +
				"sbi_entity_integration_api_req insreq where mas.entity_id=insreq.entity_id and mas.entity_id=:serviceName";
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("serviceName", serviceName.toUpperCase());
		//integrationApiRequest=namedParameterJdbcTemplate.query(sql, params, new IntegrationApiRowMapper());
		return namedParameterJdbcTemplate.query(sql, params, (rs, rowNum) -> new IntegrationApiRequest(
				rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getInt(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getInt(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getInt(13),rs.getInt(14),rs.getString(15)
		));
		//return integrationApiRequest;
	}

	@Override
	public List<IntegrationMockResponse> getEntityMockResponse(String httpEntity, String responseType) {
		List<IntegrationMockResponse> integrationMockResponseList = new ArrayList<>();
		String sql = "select MOCK_REPONSE,RESPONSE_TYPE FROM SBI_ENTITY_INTEGRATION_MOCK_RESPONSE FROM entity_id=:serviceName and RESPONSE_TYPE=:responseType and status=1";
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("serviceName", httpEntity.toUpperCase());
		params.addValue("responseType", responseType.toUpperCase());
		return namedParameterJdbcTemplate.query(sql, params, (rs, rowNum) -> new IntegrationMockResponse(rs.getString(1), rs.getString(2)));
	}
}
