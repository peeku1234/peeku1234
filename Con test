package com.sbi.microservice.framework.utils;

import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.ValidationApiRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

@Component
public class validation {
    private static final Logger logger = LoggerFactory.getLogger(RequestValidator.class);

    public void validateRequest(Map<String, Object> inputParams, List<ValidationApiRequest> validationRules) {
        for (ValidationApiRequest rule : validationRules) {
            String attribute = rule.attribute_name();
            String dataType = rule.attribute_data_type();
            boolean isMandatory = rule.is_mandatory_attribute();
            int exactLength = rule.attribute_length();
            int maxLength = rule.max_value();
            String regexPattern = rule.regex_pattern(); // Assuming this field exists in ValidationApiRequest
            validateAttribute(inputParams, attribute, dataType, isMandatory, exactLength, maxLength, regexPattern);
        }
    }

    private void validateAttribute(Map<String, Object> inputParams,
                                  String attribute,
                                  String dataType,
                                  boolean isMandatory,
                                  int exactLength,
                                  int maxLength,
                                  String regexPattern) {
        if (isMandatory && !inputParams.containsKey(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }
        
        // Skip validation if value is null and not mandatory
        if (!inputParams.containsKey(attribute) || inputParams.get(attribute) == null) {
            return;
        }
        
        Object value = inputParams.get(attribute);
        switch (dataType.toUpperCase()) {
            case "STRING" -> validateString(value, attribute, exactLength, maxLength, regexPattern);
            case "LIST" -> validateList(value, attribute, maxLength);
            case "NUMBER" -> validateInteger(value, attribute);
            case "BOOLEAN" -> validateBoolean(value, attribute);
            default -> throw new ValidationException("400",
                    "Unsupported data type '" + dataType + "' for attribute: " + attribute);
        }
    }

    private void validateString(Object value, String attribute, int exactLength, int maxLength, String regexPattern) {
        if (!(value instanceof String strValue)) {
            throw new ValidationException("400", attribute + " should be a string");
        }
        if (exactLength > 0 && strValue.length() != exactLength) {
            throw new ValidationException("400",
                    attribute + " must be exactly " + exactLength + " characters");
        }
        if (maxLength > 0 && strValue.length() > maxLength) {
            throw new ValidationException("400",
                    attribute + " exceeds max length of " + maxLength);
        }
        if (regexPattern != null && !regexPattern.isEmpty()) {
            if (!Pattern.matches(regexPattern, strValue)) {
                throw new ValidationException("400",
                        attribute + " does not match the required pattern");
            }
        }
    }

    private void validateList(Object value, String attribute, int maxLength) {
        if (!(value instanceof List<?> list)) {
            throw new ValidationException("400", attribute + " should be a list");
        }
        if (maxLength > 0 && list.size() > maxLength) {
            throw new ValidationException("400",
                    attribute + " exceeds max size of " + maxLength);
        }
    }

    private void validateInteger(Object value, String attribute) {
        if (!(value instanceof Number)) {
            throw new ValidationException("400", attribute + " should be a number");
        }
    }

    private void validateBoolean(Object value, String attribute) {
        if (!(value instanceof Boolean)) {
            throw new ValidationException("400", attribute + " should be a boolean");
        }
    }
}
