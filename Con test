package com.sbi.yb.cinb.repository.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import com.sbi.yb.cinb.constant.QueryConstants;
import com.sbi.yb.exception.MicroServiceException;

@ExtendWith(MockitoExtension.class)
class ManageFileBeneficiaryDAOImplTest {

    @Mock
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @InjectMocks
    private ManageFileBeneficiaryDAOImpl manageFileBeneficiaryDAO;

    @Test
    void testUpdate_Success() {
        String testQuery = "UPDATE test_table SET column = :value";
        SqlParameterSource params = new MapSqlParameterSource().addValue("value", "test");
        
        when(namedParameterJdbcTemplate.update(eq(testQuery), eq(params))).thenReturn(1);
        
        int result = manageFileBeneficiaryDAO.update(testQuery, params);
        assertEquals(1, result);
        verify(namedParameterJdbcTemplate).update(eq(testQuery), eq(params));
    }

    @Test
    void testUpdate_ThrowsException() {
        String testQuery = "UPDATE test_table SET column = :value";
        SqlParameterSource params = new MapSqlParameterSource().addValue("value", "test");
        
        when(namedParameterJdbcTemplate.update(eq(testQuery), eq(params)))
            .thenThrow(new DataAccessException("DB Error") {});
        
        assertThrows(DataAccessException.class, () -> {
            manageFileBeneficiaryDAO.update(testQuery, params);
        });
    }

    @Test
    void testBatchUpdate_Success() {
        String testQuery = "INSERT INTO test_table VALUES (:value)";
        SqlParameterSource[] params = new SqlParameterSource[] {
            new MapSqlParameterSource().addValue("value", "test1"),
            new MapSqlParameterSource().addValue("value", "test2")
        };
        int[] expectedResult = new int[] {1, 1};
        
        when(namedParameterJdbcTemplate.batchUpdate(eq(testQuery), eq(params))).thenReturn(expectedResult);
        
        int[] result = manageFileBeneficiaryDAO.batchUpdate(testQuery, params);
        assertArrayEquals(expectedResult, result);
        verify(namedParameterJdbcTemplate).batchUpdate(eq(testQuery), eq(params));
    }

    @Test
    void testBatchUpdate_ThrowsException() {
        String testQuery = "INSERT INTO test_table VALUES (:value)";
        SqlParameterSource[] params = new SqlParameterSource[] {
            new MapSqlParameterSource().addValue("value", "test1")
        };
        
        when(namedParameterJdbcTemplate.batchUpdate(eq(testQuery), eq(params)))
            .thenThrow(new DataAccessException("DB Error") {});
        
        assertThrows(DataAccessException.class, () -> {
            manageFileBeneficiaryDAO.batchUpdate(testQuery, params);
        });
    }

    @Test
    void testGetValueFromNameValueMasterByNameAndStatus_Success() {
        String testName = "testName";
        String expectedValue = "testValue";
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.GET_VALUE_FROM_NAMEVALUEMASTER_BY_NAME),
            argThat(params -> 
                params.getValue("name").equals(testName) && 
                params.getValue("status").equals(1)),
            eq(String.class))
        ).thenReturn(expectedValue);
        
        String result = manageFileBeneficiaryDAO.getValueFromNameValueMasterByNameAndStatus(testName);
        assertEquals(expectedValue, result);
    }

    @Test
    void testGetValueFromNameValueMasterByNameAndStatus_ThrowsException() {
        String testName = "testName";
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.GET_VALUE_FROM_NAMEVALUEMASTER_BY_NAME),
            any(),
            eq(String.class))
        ).thenThrow(new DataAccessException("DB Error") {});
        
        assertThrows(DataAccessException.class, () -> {
            manageFileBeneficiaryDAO.getValueFromNameValueMasterByNameAndStatus(testName);
        });
    }

    @Test
    void testValidateAndSaveToWACReferenceStatus_ZeroCount() {
        String sno = "testFile";
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_TOTAL_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(0);
        
        manageFileBeneficiaryDAO.ValidateAndSaveToWACReferenceStatus(sno);
        
        verify(namedParameterJdbcTemplate, never()).queryForObject(
            eq(QueryConstants.MIS_SUCCESS_COUNT), any(), eq(Integer.class));
        verify(namedParameterJdbcTemplate, never()).queryForObject(
            eq(QueryConstants.MIS_FAILURE_COUNT), any(), eq(Integer.class));
        verify(namedParameterJdbcTemplate, never()).update(
            eq(QueryConstants.SAVE_WAC_REFERENCE_STATUS), any());
    }

    @Test
    void testValidateAndSaveToWACReferenceStatus_CountsNotMatched() {
        String sno = "testFile";
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_TOTAL_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(10);
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_SUCCESS_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(5);
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_FAILURE_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(4); // 5 + 4 = 9 != 10
        
        manageFileBeneficiaryDAO.ValidateAndSaveToWACReferenceStatus(sno);
        
        verify(namedParameterJdbcTemplate, never()).update(
            eq(QueryConstants.SAVE_WAC_REFERENCE_STATUS), any());
    }

    @Test
    void testValidateAndSaveToWACReferenceStatus_CountsMatched() {
        String sno = "testFile";
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_TOTAL_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(10);
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_SUCCESS_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(6);
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_FAILURE_COUNT),
            argThat(params -> params.getValue("fileName").equals(sno)),
            eq(Integer.class))
        ).thenReturn(4); // 6 + 4 = 10
        
        when(namedParameterJdbcTemplate.update(
            eq(QueryConstants.SAVE_WAC_REFERENCE_STATUS),
            argThat(params -> params.getValue("sno").equals(sno)))
        ).thenReturn(1);
        
        manageFileBeneficiaryDAO.ValidateAndSaveToWACReferenceStatus(sno);
        
        verify(namedParameterJdbcTemplate).update(
            eq(QueryConstants.SAVE_WAC_REFERENCE_STATUS), 
            argThat(params -> params.getValue("sno").equals(sno)));
    }

    @Test
    void testValidateAndSaveToWACReferenceStatus_QueryThrowsException() {
        String sno = "testFile";
        
        when(namedParameterJdbcTemplate.queryForObject(
            eq(QueryConstants.MIS_TOTAL_COUNT),
            any(),
            eq(Integer.class))
        ).thenThrow(new DataAccessException("DB Error") {});
        
        assertThrows(DataAccessException.class, () -> {
            manageFileBeneficiaryDAO.ValidateAndSaveToWACReferenceStatus(sno);
        });
    }

    @Test
    void testConstructor() {
        NamedParameterJdbcTemplate template = mock(NamedParameterJdbcTemplate.class);
        ManageFileBeneficiaryDAOImpl dao = new ManageFileBeneficiaryDAOImpl(template);
        assertNotNull(dao);
    }
}
