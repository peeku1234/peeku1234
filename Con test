package com.sbi.yb.cinb.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.sbi.yb.cinb.constant.ManageBeneStatusCode;
import com.sbi.yb.cinb.model.ApproveRejectBeneRequest;
import com.sbi.yb.cinb.model.ApproveRejectBeneResponse;
import com.sbi.yb.cinb.service.ManageFileBeneficiaryService;
import com.sbi.yb.cinb.util.ManageBeneficiaryUtil;
import com.sbi.yb.exception.MicroServiceException;
import com.sbi.yb.model.SBIApplicationResponse;
import com.sbi.yb.utils.LoggerUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.Optional;
import static com.sbi.yb.cinb.util.ManageBeneficiaryUtil.getBeneTypeAndAction;
import static com.sbi.yb.cinb.util.ManageBeneficiaryUtil.safeGetParameter;



/*
 * This class {@code ManageFileBeneficiaryController} includes methods to manage beneficiaries(for file based)
 * @author V1017263
 */


@RestController
public class ManageFileBeneficiaryController {

  private static final Logger logger = LoggerUtil.getLogger(ManageFileBeneficiaryController.class);

  private ManageFileBeneficiaryService manageFileBeneficiaryService;


  public ManageFileBeneficiaryController(ManageFileBeneficiaryService manageFileBeneficiaryService) {
    this.manageFileBeneficiaryService = manageFileBeneficiaryService;
  }

  /*
   * This method is to take action such as approval or rejection on beneficiaries
   * @param httpServletRequest
   * @param httpServletResponse
   * @return {@code ResponseEntity<SBIApplicationResponse>}
   */

  @PostMapping(value = "/approve-reject")
  public ResponseEntity<SBIApplicationResponse> approveOrRejectBeneficiary(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
    logger.info("approveOrRejectBeneficiary - starts");

    Optional<String> plainPayload = safeGetParameter(httpServletRequest, "plainPayload");

    logger.info("plainPayload : {}", plainPayload);

    ApproveRejectBeneRequest approveRejectBeneRequest = null;
    ApproveRejectBeneResponse approveRejectBeneResponse;
    int approvedOrRejectedCount;
    SBIApplicationResponse sbiApplicationResponse = new SBIApplicationResponse();

    try {
            /*
            Deserializing JSON content
             */
      approveRejectBeneRequest = (ApproveRejectBeneRequest) ManageBeneficiaryUtil.toObject(plainPayload.orElseThrow(() ->
              new MicroServiceException(ManageBeneStatusCode.INVALID_REQUEST)), ApproveRejectBeneRequest.class);

    } catch (JsonProcessingException jsonProcessingException) {
      logger.info("Request could not be parsed as JSON.");
      MicroServiceException.throwException(ManageBeneStatusCode.INVALID_REQUEST, jsonProcessingException);
    }

    plainPayload.ifPresent(payload -> logger.info("plainPayload: {}", payload));
    logger.info("Approve or reject beneficiaries request : {}", approveRejectBeneRequest);

    if (Optional.ofNullable(approveRejectBeneRequest).isPresent()) {

      //To Do
      //before approval or rejection check whether user has access to take action on bene
      // Cooling period approval & rejection method
      //check last mod time updated in DB
      //rejectionReason
      if (approveRejectBeneRequest.getApproved())
        //Approve
        approvedOrRejectedCount = manageFileBeneficiaryService.approveBeneficiary(approveRejectBeneRequest);
      else
        //Reject
        approvedOrRejectedCount = manageFileBeneficiaryService.rejectBeneficiary(approveRejectBeneRequest);


      approveRejectBeneResponse = new ApproveRejectBeneResponse(approveRejectBeneRequest.getFileReferenceNo(),
              approveRejectBeneRequest.getFileName(), getBeneTypeAndAction(approveRejectBeneRequest.getBeneTypeAction()),
              approvedOrRejectedCount, approveRejectBeneRequest.getApproved() ? "" :approveRejectBeneRequest.getComments());

      sbiApplicationResponse = ManageBeneficiaryUtil.buildSuccessResponse(approveRejectBeneResponse,
              ManageBeneStatusCode.APPROVE_OR_REJECT_SUCCESS);
    }
    logger.info("approveOrRejectBeneficiary - response : {}", sbiApplicationResponse);

    return new ResponseEntity<>(sbiApplicationResponse, HttpStatus.OK);
  }

}
