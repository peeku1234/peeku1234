package com.sbi.microservice.framework.services;

import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.sbi.microservice.framework.exception.ValidationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.model.UserProfile;

@Component
public final class WebMobileValidator implements ChannelValidator {
	private final static Logger logger = LoggerFactory.getLogger(WebMobileValidator.class);
	@Override
	public void validateData(Map<String, Object> channelDataMap) {
		String corporateAlias = (String)channelDataMap.get("corporateAlias");
		String corpIdFromHeader=(String)channelDataMap.get("corpIdFromHeader");
		UserProfile userProfile=(UserProfile) channelDataMap.get("userProfile");
		String aggregatorID = (String)channelDataMap.get("aggregatorID");
		String channelIdFromHeader =(String)channelDataMap.get("channelId");
		String corpId=FrameworkConstants.STRING_BLANK;
		int userRole=userProfile.userRole();
		String userCorporateID=userProfile.corporateId();
		int smallFlag=(int) channelDataMap.get("smallFlag");
		  
		  logger.info("channelIdFromHeader -->"+channelIdFromHeader);
		  logger.info("Request is from Web or mobile..");
		  logger.info("userRole -->"+userRole);
		  logger.info("corporateAlias -->"+corporateAlias);
		  logger.info("smallFlag -->"+smallFlag);
		  
		  if(userRole!=4 && smallFlag!=2) {
			  logger.info("ONLY CORPORATE CUSTOMERS"); 
			  
			  if(null!=corporateAlias && !corporateAlias.trim().equals("") && !corporateAlias.trim().equalsIgnoreCase("null")) {
				  logger.info("corporateAlias is not null or not empty");
				  Pattern patternCorpID = Pattern.compile("^[0-9]*$");
				  logger.info("Pattern to check corporateID -->"+patternCorpID);
					Matcher matcherCorpID = patternCorpID.matcher(corporateAlias);
					if (matcherCorpID.matches())
					{
						logger.info("valid corporateID");
						logger.info("corporateAlias -->"+corporateAlias);
						logger.info("userCorporateID -->"+userCorporateID);
						
						if(corporateAlias.trim().equalsIgnoreCase(userCorporateID)) {
							logger.info("user belongs to the corporate entered");
							
						}else {
							logger.info("userName to corporateAlias mapping not valid");
							throw new ValidationException("API000042","User doesn't belong to the corporate in request");
							  //API000042
							  
						}
			  
					}else {
						  logger.info("INVALID CORPORATE ALIAS");
						throw new ValidationException("API000022","Corporate alias is not valid");

						//API000022
						  
					 }	
			  }
			  else {
				  logger.info("Corporate ID is not present in request body. Flow aborted.");
				  throw new ValidationException("API000014","Corporate id is not available in request");

				  //API000014
				  
				  
				}
		  }else {
			  logger.info("ONLY SARAL CUSTOMERS"); 
		  }
	  

	}

}
