import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;

public class DelimitedConfigurationTest {

    @Test
    public void testAddSameBankCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("OLD_FIELD_1", "10", 1, "Desc1", true, "String", "alias1"));
        configs.add(new DelimitedConfiguration("OLD_FIELD_2", "20", 2, "Desc2", false, "Number", "alias2"));

        // Setup the fieldNameMap3P with test values
        UtilsConstant.fieldNameMap3P.put("OLD_FIELD_1", "NEW_FIELD_1");
        UtilsConstant.fieldNameMap3P.put("OLD_FIELD_2", "NEW_FIELD_2");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.ADD_SAME_BANK);

        assertEquals("NEW_FIELD_1", result.get(0).getFieldName());
        assertEquals("NEW_FIELD_2", result.get(1).getFieldName());
    }

    @Test
    public void testAddOtherBankCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("OLD_FIELD_A", "10", 1, "DescA", true, "String", "aliasA"));
        
        UtilsConstant.fieldNameMapIBTP.put("OLD_FIELD_A", "NEW_FIELD_A");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.ADD_OTHER_BANK);

        assertEquals("NEW_FIELD_A", result.get(0).getFieldName());
    }

    @Test
    public void testCompositeBenCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("COMP_OLD", "15", 1, "DescComp", true, "String", "aliasComp"));
        
        UtilsConstant.fieldNameMapCompBen.put("COMP_OLD", "COMP_NEW");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.COMPOSITE_BEN);

        assertEquals("COMP_NEW", result.get(0).getFieldName());
    }

    @Test
    public void testIntraBankCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("INTRA_OLD", "10", 1, "DescIntra", true, "String", "aliasIntra"));
        configs.add(new DelimitedConfiguration(DAOConstants.CREDIT_ACCOUNT_NUMBER, "20", 2, "CreditAcc", false, "Number", "aliasCredit"));
        
        UtilsConstant.fieldNameMapIntra.put("INTRA_OLD", "INTRA_NEW");
        UtilsConstant.fieldNameMapIntra.put(DAOConstants.ACCOUNT_NUMBER, "ACC_NUM_INTRA");
        UtilsConstant.fieldNameMapIntra.put(DAOConstants.BRANCH_CODE_INTRA, "BR_CODE_INTRA");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.INTRA_BANK);

        assertEquals(1, result.size()); // Credit fields should be filtered out
        assertEquals("INTRA_NEW", result.get(0).getFieldName());
    }

    @Test
    public void testInterBankCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("INTER_OLD", "10", 1, "DescInter", true, "String", "aliasInter"));
        configs.add(new DelimitedConfiguration(DAOConstants.CREDIT_BRANCH_CODE, "20", 2, "CreditBranch", false, "Number", "aliasBranch"));
        
        UtilsConstant.fieldNameMapInter.put("INTER_OLD", "INTER_NEW");
        UtilsConstant.fieldNameMapInter.put(DAOConstants.ACCOUNT_NUMBER, "ACC_NUM_INTER");
        UtilsConstant.fieldNameMapInter.put(DAOConstants.BRANCH_CODE_INTER, "BR_CODE_INTER");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.INTER_BANK);

        assertEquals(1, result.size()); // Credit fields should be filtered out
        assertEquals("INTER_NEW", result.get(0).getFieldName());
    }

    @Test
    public void testBothBankCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("BOTH_OLD", "10", 1, "DescBoth", true, "String", "aliasBoth"));
        configs.add(new DelimitedConfiguration(DAOConstants.ACCOUNT_NUMBER, "20", 2, "Account", false, "Number", "aliasAcc"));
        
        UtilsConstant.fieldNameMapBoth.put("BOTH_OLD", "BOTH_NEW");
        UtilsConstant.fieldNameMapBoth.put(DAOConstants.ACCOUNT_NUMBER, "ACC_NUM_BOTH");
        UtilsConstant.fieldNameMapBoth.put(DAOConstants.BRANCH_CODE_BOTH, "BR_CODE_BOTH");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.BOTH_BANK);

        assertEquals(2, result.size());
        assertEquals("BOTH_NEW", result.get(0).getFieldName());
        assertEquals(DAOConstants.BOTH_TYPE, result.get(1).getFieldType()); // Check field type changed
    }

    @Test
    public void testImpsTxnCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("IMPS_OLD", "10", 1, "DescIMPS", true, "String", "aliasIMPS"));
        
        UtilsConstant.fieldNameMapIMPSTXN.put("IMPS_OLD", "IMPS_NEW");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.IMPS_TXN);

        assertEquals("IMPS_NEW", result.get(0).getFieldName());
    }

    @Test
    public void testCdCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("CD_OLD", "10", 1, "DescCD", true, "String", "aliasCD"));
        configs.add(new DelimitedConfiguration(DAOConstants.CREDIT_BRANCH_CODE, "20", 2, "CreditBranch", false, "Number", "aliasBranch"));
        
        UtilsConstant.fieldNameMapDD.put("CD_OLD", "CD_NEW");
        UtilsConstant.fieldNameMapDD.put(DAOConstants.ACCOUNT_NUMBER_CD, "ACC_NUM_CD");
        UtilsConstant.fieldNameMapDD.put(DAOConstants.BRANCH_CODE_CD, "BR_CODE_CD");

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, UtilsConstant.CD);

        assertEquals(1, result.size()); // Credit fields should be filtered out
        assertEquals("CD_NEW", result.get(0).getFieldName());
    }

    @Test
    public void testDefaultCase() {
        List<DelimitedConfiguration> configs = new ArrayList<>();
        configs.add(new DelimitedConfiguration("DEFAULT_FIELD", "10", 1, "DescDefault", true, "String", "aliasDefault"));

        List<DelimitedConfiguration> result = setFieldNameDelimited(configs, "UNKNOWN_TYPE");

        assertEquals(1, result.size());
        assertEquals("DEFAULT_FIELD", result.get(0).getFieldName()); // Should remain unchanged
    }
}
