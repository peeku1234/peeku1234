package com.sbi.microservice.framework.services;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;

import com.sbi.microservice.framework.constant.FrameworkConstants;
import com.sbi.microservice.framework.event.AuditEvent;
import com.sbi.microservices.framework.stream.AuditEventProducer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.sbi.microservice.framework.repository.AuditDAO;

import jakarta.servlet.http.HttpServletRequest;

@Service
public class AuditService {
	private final static Logger logger = LoggerFactory.getLogger(AuditService.class);
	private final AuditDAO auditDAOImpl;
	private final AuditEventProducer auditEventProducer;

	public AuditService(AuditDAO auditDAOImpl, AuditEventProducer auditEventProducer) {
		this.auditDAOImpl = auditDAOImpl;
		this.auditEventProducer = auditEventProducer;
	}
//
//	public AuditService(AuditDAO auditDAOImpl) {
//		this.auditDAOImpl = auditDAOImpl;
//	}


	public void doAuditRequest(HttpServletRequest req, String serviceID, String channelID, String endPointName,
														 String engineID, String ipAddress, String serviceCategory, Optional<String> cipherKey, String payloadInReqBody, String serviceResRefNo, String traceId) {

		String corporateType=FrameworkConstants.STRING_BLANK;
		logger.info("doAuditRequest starts");
		try {
			AuditEvent auditEvent = new AuditEvent("to be updated",serviceID,endPointName,serviceCategory,channelID,null,null,null,null,corporateType,cipherKey.get(),payloadInReqBody,serviceResRefNo,null,null,null,null,"insert", traceId,null,"");
			//auditDAOImpl.insertAuditData(auditEvent);
			auditEventProducer.sendAudit(auditEvent);
		} catch (DataAccessException e) {
			logger.info("Exception while inserting audit :: {}",e.getMessage());
		} catch (Exception e) {
			logger.info("Exception while inserting audit : {}", e.getMessage());
		}
		logger.info("doAuditRequest ends");
	}

	public void doAuditResponse(AuditEvent auditEvent) {
		logger.info("doAuditResponse starts");
		try {
			//auditDAOImpl.insertAuditData(auditEvent);
			auditEventProducer.sendAudit(auditEvent);
		} catch (Exception exception) {
			logger.info("Exception while updating audit :: {} ", exception.getMessage());
		}
		logger.info("doAuditResponse ends");
	}

	@Async
	public void doAudit(Map<String, Object> auditMap) {
		logger.info("doAudit starts");
		try {
			/*
			 * AuditEvent auditEvent = new AuditEvent(auditMap.get("aPIReqRefNo"),
			 * auditMap.get("serviceID"), auditMap.get("endpointId"),
			 * auditMap.get("serviceCategory")
			 * ,auditMap.get("channelId"),auditMap.get("userName"),auditMap.get("corpId"),
			 * auditMap.get("aggregatorID"),auditMap.get("userRole")
			 * ,auditMap.get("smallFlag"),auditMap.get("key"),auditMap.get("payloadInReq"),
			 * auditMap.get("serviceResRefNo"),auditMap.get("resKey"),auditMap.get(
			 * "response") ,auditMap.get("status"),auditMap.get("statusCode"),
			 * "insert",auditMap.get("traceId"));
			 */
			AuditEvent auditEvent = new AuditEvent(String.valueOf(auditMap.get("aPIReqRefNo")), String.valueOf(auditMap.get("serviceID")), String.valueOf(auditMap.get("endpointId")), String.valueOf(auditMap.get("serviceCategory"))
					,String.valueOf(auditMap.get("channelId")),String.valueOf(auditMap.get("userName")),String.valueOf(auditMap.get("corpId")),String.valueOf(auditMap.get("aggregatorID")),String.valueOf(auditMap.get("userRole"))
					,String.valueOf(auditMap.get("smallFlag")),String.valueOf(auditMap.get("key")),String.valueOf(auditMap.get("payloadInReq")),String.valueOf(auditMap.get("serviceResRefNo")),String.valueOf(auditMap.get("resKey")),String.valueOf(auditMap.get("response"))
					,String.valueOf(auditMap.get("status")),String.valueOf(auditMap.get("statusCode")), "insert",String.valueOf(auditMap.get("traceId")), extractTimestamp(auditMap.get("requestTime")),String.valueOf(auditMap.get("ipaddress")));
			//auditDAOImpl.insertAuditData(auditEvent);
			auditEventProducer.sendAudit(auditEvent);
		} catch (Exception exception) {
			logger.info("Exception while saving audit :: {} ", exception.getMessage());
		}
		logger.info("doAudit ends");
	}

	private Timestamp extractTimestamp(Object obj) {
		if(obj instanceof Timestamp) {
			logger.info("instanceof Timestamp:{}",(Timestamp) obj);
			return (Timestamp) obj;
		}else if(obj instanceof LocalDateTime) {
			logger.info("instanceof LocalDateTime:{}",Timestamp.valueOf((LocalDateTime) obj));
			return Timestamp.valueOf((LocalDateTime) obj);
		}
		return null;
	}
}
