package com.sbi.microservice.framework.utils;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.Endpoint;
import com.sbi.microservice.framework.model.Service;
import com.sbi.microservice.framework.model.ValidationRule;

import jakarta.servlet.http.HttpServletRequest;

@Component
public class RequestValidator {
    private final static Logger logger = LoggerFactory.getLogger(RequestValidator.class);

    public void validateRequest(HttpServletRequest request, String channelId, Optional<Service> optionalService, Optional<Endpoint> optionalEndpoint) throws IOException {
        String requestBody = readRequestBody(request);
        JSONObject jsonRequest = new JSONObject(requestBody);
        
        validateTxnNo(jsonRequest);
        validateBankCode(jsonRequest);
        validateAccountNo(jsonRequest);
        validateReqList(jsonRequest);
        validateResList(jsonRequest);
    }

    private void validateTxnNo(JSONObject requestBody) {
        String attribute = "txnno";
        if (!requestBody.has(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }
        
        Object value = requestBody.get(attribute);
        if (!(value instanceof String strValue)) {
            throw new ValidationException("400", attribute + " should be a string");
        }
        if (strValue.length() != 10) {
            throw new ValidationException("400", attribute + " should be exactly 10 characters");
        }
    }

    private void validateBankCode(JSONObject requestBody) {
        String attribute = "bankCode";
        if (!requestBody.has(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }
        
        Object value = requestBody.get(attribute);
        if (!(value instanceof String strValue)) {
            throw new ValidationException("400", attribute + " should be a string");
        }
        if (strValue.length() != 2) {
            throw new ValidationException("400", attribute + " should be exactly 2 characters");
        }
    }

    private void validateAccountNo(JSONObject requestBody) {
        String attribute = "account_no";
        if (!requestBody.has(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }
        
        Object value = requestBody.get(attribute);
        if (!(value instanceof String strValue)) {
            throw new ValidationException("400", attribute + " should be a string");
        }
        if (strValue.length() != 17) {
            throw new ValidationException("400", attribute + " should be exactly 17 characters");
        }
    }

    private void validateReqList(JSONObject requestBody) {
        String attribute = "req";
        if (!requestBody.has(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }
        
        Object value = requestBody.get(attribute);
        if (!(value instanceof JSONArray)) {
            throw new ValidationException("400", attribute + " should be a list");
        }
        JSONArray jsonArray = (JSONArray) value;
        if (jsonArray.length() > 500) {
            throw new ValidationException("400", attribute + " exceeds maximum length of 500");
        }
    }

    private void validateResList(JSONObject requestBody) {
        String attribute = "res";
        if (!requestBody.has(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }
        
        Object value = requestBody.get(attribute);
        if (!(value instanceof JSONArray)) {
            throw new ValidationException("400", attribute + " should be a list");
        }
        JSONArray jsonArray = (JSONArray) value;
        if (jsonArray.length() > 3000) {
            throw new ValidationException("400", attribute + " exceeds maximum length of 3000");
        }
    }

    private String readRequestBody(HttpServletRequest request) throws IOException {
        try (BufferedReader reader = request.getReader()) {
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        }
    }
}
