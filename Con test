package com.sbi.yb.repository;

import com.sbi.microservice.framework.constant.ErrorCodes;
import com.sbi.microservice.framework.exception.TechnicalException;
import com.sbi.yb.model.ActualFileDownloadRequest;
import com.sbi.yb.model.FileMasterConfig;
import com.sbi.yb.repository.impl.ActualFileDownloadDaoImpl;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ActualFileDownloadDaoImplTest {

    @InjectMocks
    ActualFileDownloadDaoImpl actualFileDownloadDao;

    @Mock
    NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    ActualFileDownloadRequest actualFileDownloadRequest;
    FileMasterConfig fileMasterConfig;

    @BeforeEach
    void setUp() {
        actualFileDownloadRequest = new ActualFileDownloadRequest();
        actualFileDownloadRequest.setFileReferenceNo("41006289");
        
        fileMasterConfig = new FileMasterConfig();
        fileMasterConfig.setFileReferenceNo("41006289");
        fileMasterConfig.setFileName("testfile.pdf");
    }

    @Test
    void getFileDetailsTest_Success() {
        // Mock the JDBC call
        when(namedParameterJdbcTemplate.queryForObject(
                anyString(), 
                any(MapSqlParameterSource.class), 
                any(BeanPropertyRowMapper.class)))
            .thenReturn(fileMasterConfig);

        // Call the method
        FileMasterConfig result = actualFileDownloadDao.getFileDetails(actualFileDownloadRequest);

        // Verify the results
        assertNotNull(result);
        assertEquals("41006289", result.getFileReferenceNo());
        assertEquals("testfile.pdf", result.getFileName());
        
        // Verify the JDBC call was made
        verify(namedParameterJdbcTemplate, times(1))
            .queryForObject(anyString(), any(MapSqlParameterSource.class), any(BeanPropertyRowMapper.class));
    }

    @Test
    void getFileDetailsTest_DataAccessException() {
        // Mock the JDBC call to throw exception
        when(namedParameterJdbcTemplate.queryForObject(
                anyString(), 
                any(MapSqlParameterSource.class), 
                any(BeanPropertyRowMapper.class)))
            .thenThrow(new DataAccessException("Database connection failed") {});

        // Verify that TechnicalException is thrown
        TechnicalException exception = assertThrows(TechnicalException.class, 
            () -> actualFileDownloadDao.getFileDetails(actualFileDownloadRequest));

        // Verify exception details
        assertEquals("Database connection failed", exception.getMessage());
        assertEquals(ErrorCodes.DB_ACCESS_FAILURE, exception.getErrorCode());
        
        // Verify the JDBC call was made
        verify(namedParameterJdbcTemplate, times(1))
            .queryForObject(anyString(), any(MapSqlParameterSource.class), any(BeanPropertyRowMapper.class));
    }

    @Test
    void getFileDetailsTest_NullRequest() {
        assertThrows(NullPointerException.class, 
            () -> actualFileDownloadDao.getFileDetails(null));
    }

    @Test
    void getFileDetailsTest_EmptyFileReference() {
        // Prepare test data
        ActualFileDownloadRequest request = new ActualFileDownloadRequest();
        request.setFileReferenceNo("");
        
        // Mock the JDBC call to return null
        when(namedParameterJdbcTemplate.queryForObject(
                anyString(), 
                any(MapSqlParameterSource.class), 
                any(BeanPropertyRowMapper.class)))
            .thenReturn(null);

        // Call the method
        FileMasterConfig result = actualFileDownloadDao.getFileDetails(request);

        // Verify results
        assertNull(result);
        
        // Verify the JDBC call was made
        verify(namedParameterJdbcTemplate, times(1))
            .queryForObject(anyString(), any(MapSqlParameterSource.class), any(BeanPropertyRowMapper.class));
    }

    @Test
    void getFileDetailsTest_NoResultsFound() {
        // Mock the JDBC call to return null (no results)
        when(namedParameterJdbcTemplate.queryForObject(
                anyString(), 
                any(MapSqlParameterSource.class), 
                any(BeanPropertyRowMapper.class)))
            .thenReturn(null);

        // Call the method
        FileMasterConfig result = actualFileDownloadDao.getFileDetails(actualFileDownloadRequest);

        // Verify results
        assertNull(result);
        
        // Verify the JDBC call was made
        verify(namedParameterJdbcTemplate, times(1))
            .queryForObject(anyString(), any(MapSqlParameterSource.class), any(BeanPropertyRowMapper.class));
    }
}
