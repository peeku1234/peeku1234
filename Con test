package com.sbi.yb.cinb.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.yb.cinb.constant.FileUploadStatusCodeConstants;
import com.sbi.yb.cinb.exception.UploadBeneficiaryFileException;
import com.sbi.yb.cinb.model.UploadFileRequest;
import com.sbi.yb.cinb.model.UploadFileResponse;
import com.sbi.yb.cinb.service.UploadFileService;
import com.sbi.yb.exception.CommonException;
import com.sbi.yb.exception.MicroServiceException;
import com.sbi.yb.model.SBIApplicationResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.multipart.MultipartFile;

import java.util.Base64;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UploadFileControllerTest {

    @InjectMocks
    private UploadFileController uploadFileController;

    @Mock
    private UploadFileService uploadFileService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private HttpServletResponse httpServletResponse;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(uploadFileController, "excludedFiletypes", "exe,bin");
    }

    private UploadFileRequest createValidRequest() {
        UploadFileRequest request = new UploadFileRequest();
        request.setFileType("SAME_BANK_ADD_BENE");
        request.setFileName("validfile.txt");
        request.setFileContent(Base64.getEncoder().encodeToString("content".getBytes()));
        request.setUserName("user");
        request.setCorporateAlias("corp123");
        return request;
    }

    @Test
    void testUploadBeneficiaryFile_Success() throws Exception {
        UploadFileRequest request = createValidRequest();
        String plainPayload = objectMapper.writeValueAsString(request);
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(plainPayload);
        when(uploadFileService.uploadConfigurationFile(any(MultipartFile.class), anyString(), anyString(), anyString()))
                .thenReturn(new UploadFileResponse("123", "file.txt", "date", "PENDING"));

        ResponseEntity<SBIApplicationResponse> response = uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("PENDING", response.getBody().getResult().getStatus());
    }

    @Test
    void testUploadBeneficiaryFile_MissingPlainPayload() {
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(null);

        assertThrows(MicroServiceException.class, () -> {
            uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);
        });
    }

    @Test
    void testUploadBeneficiaryFile_InvalidJson() {
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn("{invalidJson}");

        assertThrows(MicroServiceException.class, () -> {
            uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);
        });
    }

    @Test
    void testUploadBeneficiaryFile_InvalidFileType() throws Exception {
        UploadFileRequest request = createValidRequest();
        request.setFileType("INVALID_TYPE");
        String plainPayload = objectMapper.writeValueAsString(request);
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(plainPayload);

        assertThrows(UploadBeneficiaryFileException.class, () -> {
            uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);
        });
    }

    @Test
    void testUploadBeneficiaryFile_InvalidFileFormat() throws Exception {
        UploadFileRequest request = createValidRequest();
        request.setFileName("virus.exe");
        String plainPayload = objectMapper.writeValueAsString(request);
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(plainPayload);

        assertThrows(UploadBeneficiaryFileException.class, () -> {
            uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);
        });
    }

    @Test
    void testUploadBeneficiaryFile_ServiceException() throws Exception {
        UploadFileRequest request = createValidRequest();
        String plainPayload = objectMapper.writeValueAsString(request);
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(plainPayload);
        when(uploadFileService.uploadConfigurationFile(any(), any(), any(), any()))
                .thenThrow(new CommonException("Service error"));

        assertThrows(CommonException.class, () -> {
            uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);
        });
    }

    @Test
    void testUploadBeneficiaryFile_NullRequest() throws Exception {
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn("null");

        ResponseEntity<SBIApplicationResponse> response = uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNull(response.getBody());
    }

    @Test
    void testUploadBeneficiaryFile_MissingUserName() throws Exception {
        UploadFileRequest request = createValidRequest();
        request.setUserName(null);
        String plainPayload = objectMapper.writeValueAsString(request);
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(plainPayload);

        ResponseEntity<SBIApplicationResponse> response = uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNull(response.getBody());
    }

    @Test
    void testUploadBeneficiaryFile_EmptyFile() throws Exception {
        UploadFileRequest request = createValidRequest();
        request.setFileContent(""); // Empty content
        String plainPayload = objectMapper.writeValueAsString(request);
        when(httpServletRequest.getAttribute("plainPayload")).thenReturn(plainPayload);

        ResponseEntity<SBIApplicationResponse> response = uploadFileController.uploadBeneficiaryFile(httpServletRequest, httpServletResponse);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNull(response.getBody());
    }
}
