package com.sbi.microservice.framework.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import com.sbi.microservice.framework.model.UserProfile;
import com.sbi.microservice.framework.security.Hashing;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ExtendWith(MockitoExtension.class)
class AggregatorValidatorTest {

    @Mock
    private APIBankingService apiBankingService;

    @Mock
    private UserService userService;

    @Mock
    private CorporateService corporateService;

    @InjectMocks
    private AggregatorValidator aggregatorValidator;

    private Map<String, Object> channelDataMap;
    private UserProfile userProfile;
    private static final Logger logger = LoggerFactory.getLogger(AggregatorValidatorTest.class);

    @BeforeEach
    void setUp() {
        channelDataMap = new HashMap<>();
        userProfile = new UserProfile("userId", "userName", 4); // Default to SARAL user role
        channelDataMap.put("userProfile", userProfile);
    }

    @Test
    void testValidateData_AggregatorIDNull() {
        channelDataMap.put("aggregatorID", null);
        // Should throw API000016
        aggregatorValidator.validateData(channelDataMap);
        // Verify behavior or exception
    }

    @Test
    void testValidateData_AggregatorIDTooLong() {
        channelDataMap.put("aggregatorID", "123456789012345678901");
        // Should throw API000032
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_AggregatorIDInvalidPattern() {
        channelDataMap.put("aggregatorID", "invalid@aggregator");
        // Should throw API000019
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_AggregatorDoesNotExist() {
        channelDataMap.put("aggregatorID", "validAgg123");
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(false);
        // Should throw API000019
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_AggregatorNotActive() {
        channelDataMap.put("aggregatorID", "validAgg123");
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(false);
        // Should throw API000031
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_InvalidAggregatorValidation() {
        channelDataMap.put("aggregatorID", "validAgg123");
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(true);
        when(apiBankingService.validateAggregator("validAgg123")).thenReturn(false);
        // Should throw API000019
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_HeaderTokenMismatch() {
        channelDataMap.put("aggregatorID", "validAgg123");
        channelDataMap.put("headerAPICTokenAggId", "differentAgg");
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(true);
        when(apiBankingService.validateAggregator("validAgg123")).thenReturn(true);
        // Should throw API000019
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_CorpDetailsNull() {
        channelDataMap.put("aggregatorID", "validAgg123");
        channelDataMap.put("corporateAlias", "corpAlias");
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(true);
        when(apiBankingService.validateAggregator("validAgg123")).thenReturn(true);
        when(apiBankingService.getCorpDetails(any())).thenReturn(null);
        // Should throw API000022
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_CorpNotActive() {
        channelDataMap.put("aggregatorID", "validAgg123");
        channelDataMap.put("corporateAlias", "corpAlias");
        Map<String, String> corpDetails = new HashMap<>();
        corpDetails.put("active", "N");
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(true);
        when(apiBankingService.validateAggregator("validAgg123")).thenReturn(true);
        when(apiBankingService.getCorpDetails(any())).thenReturn(corpDetails);
        // Should throw API000033
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_SaralUserValidFlow() {
        channelDataMap.put("aggregatorID", "validAgg123");
        channelDataMap.put("corporateAlias", "S123456789ABCDE");
        channelDataMap.put("corpToken", "validToken123");
        
        Map<String, String> corpDetails = new HashMap<>();
        corpDetails.put("active", "Y");
        corpDetails.put("isSaral", "Y");
        corpDetails.put("corpId", "corp123");
        
        Map<String, String> corporateOnboardDetail = new HashMap<>();
        corporateOnboardDetail.put("aggregatorID", "validAgg123");
        corporateOnboardDetail.put("status", "APPROVED");
        
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(true);
        when(apiBankingService.validateAggregator("validAgg123")).thenReturn(true);
        when(apiBankingService.getCorpDetails(any())).thenReturn(corpDetails);
        when(userService.whetherUserOnboarded("userId", "corp123")).thenReturn(true);
        when(apiBankingService.isValidAggregatorAndCorpCount("validAgg123", "corp123")).thenReturn(true);
        when(corporateService.getCorporateOnboardDetail("corp123")).thenReturn(corporateOnboardDetail);
        when(apiBankingService.validateCorpToken("validAgg123", "corp123", "validToken123")).thenReturn(true);
        
        // Should pass validation
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testValidateData_CorporateUserValidFlow() {
        userProfile = new UserProfile("userId", "userName", 3); // Corporate user role
        channelDataMap.put("userProfile", userProfile);
        channelDataMap.put("aggregatorID", "validAgg123");
        channelDataMap.put("corporateAlias", "ABC1234567");
        channelDataMap.put("corpToken", "validToken123");
        
        Map<String, String> corpDetails = new HashMap<>();
        corpDetails.put("active", "Y");
        corpDetails.put("isSaral", "N");
        corpDetails.put("corpId", "corp123");
        
        Map<String, String> corporateOnboardDetail = new HashMap<>();
        corporateOnboardDetail.put("aggregatorID", "validAgg123");
        corporateOnboardDetail.put("status", "APPROVED");
        
        when(apiBankingService.whetherAggregatorExist("validAgg123")).thenReturn(true);
        when(apiBankingService.isAggregatorActive("validAgg123")).thenReturn(true);
        when(apiBankingService.validateAggregator("validAgg123")).thenReturn(true);
        when(apiBankingService.getCorpDetails(any())).thenReturn(corpDetails);
        when(apiBankingService.checkCorpStatus("corp123")).thenReturn(true);
        when(apiBankingService.aggregatorAndCorpCount("validAgg123", "corp123")).thenReturn(true);
        when(apiBankingService.getCorporateOnboardDetail("corp123")).thenReturn(corporateOnboardDetail);
        when(apiBankingService.validatingCorpToken("validAgg123", "corp123", "validToken123")).thenReturn(true);
        
        // Should pass validation
        aggregatorValidator.validateData(channelDataMap);
    }

    @Test
    void testCheckWhetherUserIsSaral_UserRole4AndSaralY() {
        assertTrue(aggregatorValidator.checkWhetherUserIsSaral(4, "Y"));
    }

    @Test
    void testCheckWhetherUserIsSaral_UserRole4AndSaralN() {
        assertFalse(aggregatorValidator.checkWhetherUserIsSaral(4, "N"));
    }

    @Test
    void testCheckWhetherUserIsSaral_UserRole4AndSaralNull() {
        assertFalse(aggregatorValidator.checkWhetherUserIsSaral(4, null));
    }

    @Test
    void testCheckWhetherUserIsSaral_UserRoleNot4() {
        assertFalse(aggregatorValidator.checkWhetherUserIsSaral(3, "Y"));
    }

    @Test
    void testValidateSaralCorpAlias_Valid() {
        assertTrue(aggregatorValidator.validateSaralCorpAlias("S123456789ABCDE"));
    }

    @Test
    void testValidateSaralCorpAlias_TooLong() {
        assertFalse(aggregatorValidator.validateSaralCorpAlias("S123456789ABCDEFGH"));
    }

    @Test
    void testValidateSaralCorpAlias_FirstCharNotS() {
        assertFalse(aggregatorValidator.validateSaralCorpAlias("A123456789ABCDE"));
    }

    @Test
    void testValidateSaralCorpAlias_Next9NotNumbers() {
        assertFalse(aggregatorValidator.validateSaralCorpAlias("S1234X6789ABCDE"));
    }
}
