package com.sbi.yb.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.microservice.framework.exception.TechnicalException;
import com.sbi.microservice.framework.model.SBIApplicationResponse;
import com.sbi.microservice.framework.model.Status;
import com.sbi.microservice.framework.utils.FrameworkUtils;
import com.sbi.yb.model.FileUploadRequest;
import com.sbi.yb.model.FileUploadResponse;
import com.sbi.yb.service.FileUploadService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.Base64;
import static com.sbi.yb.constant.FileUploadConstants.PLAIN_PAYLOAD;
import static com.sbi.yb.constant.StatusCode.API000000;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FileUploadControllerTest {
  @InjectMocks
  private FileUploadController fileUploadController;
  @Mock
  private FileUploadService fileUploadService;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private HttpServletResponse httpServletResponse;
  @Mock
  private FrameworkUtils frameworkUtils;

  ObjectMapper objectMapper = new ObjectMapper();
  private final FileUploadRequest request = new FileUploadRequest();
  private SBIApplicationResponse mockAppResponse;
  private FileUploadResponse fileUploadResponse;

  @BeforeEach
  void setup() throws JsonProcessingException {
    request.setFileType("3P");
    request.setFileName("testfile.txt");
    request.setFileContent(Base64.getEncoder().encodeToString("content".getBytes()));
    request.setUserName("YBM1Admin");
    request.setCorporateAlias("250251");

    fileUploadResponse = new FileUploadResponse("101726", "junitTest.txt","15 March, 2024 18:00:30","Pending");
    mockAppResponse = new SBIApplicationResponse();
    mockAppResponse.setStatus(Status.SUCCESS.getStatusValue());
    mockAppResponse.setStatusCode(API000000);
    mockAppResponse.setData(objectMapper.writeValueAsString(fileUploadResponse));
  }

  @Test
  void testUploadFile() throws JsonProcessingException {
    Mockito.when((FileUploadRequest) frameworkUtils.validateAndGetRequest(httpServletRequest, PLAIN_PAYLOAD, FileUploadRequest.class)).thenReturn(request);
    Mockito.when(fileUploadService.uploadFile(any(),any())).thenReturn(fileUploadResponse);
    Mockito.when(frameworkUtils.buildSuccessResponse(any(), anyString())).thenReturn(mockAppResponse);
    ResponseEntity<SBIApplicationResponse> response = fileUploadController.uploadFile(httpServletRequest, httpServletResponse);
    Assertions.assertEquals(API000000, response.getBody().getStatusCode());
    Assertions.assertEquals(Status.SUCCESS.getStatusValue(), response.getBody().getStatus());
    FileUploadResponse result = objectMapper.readValue(response.getBody().getData(), FileUploadResponse.class);
    Assertions.assertEquals("101726",result.fileReferenceNo());
  }

  @Test
  void testUploadFileRequestNull() {
    Mockito.when((FileUploadRequest) frameworkUtils.validateAndGetRequest(httpServletRequest, PLAIN_PAYLOAD, FileUploadRequest.class)).thenReturn(null);
    Assertions.assertThrows(TechnicalException.class, () -> fileUploadController.uploadFile(httpServletRequest, httpServletResponse));  }

  @Test
  void testUploadFileContentEmpty() {
    request.setFileContent("");
    Mockito.when((FileUploadRequest) frameworkUtils.validateAndGetRequest(httpServletRequest, PLAIN_PAYLOAD, FileUploadRequest.class)).thenReturn(request);
    ResponseEntity<SBIApplicationResponse> response = fileUploadController.uploadFile(httpServletRequest, httpServletResponse);
    Assertions.assertNotNull(response);
    Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
  }
}
