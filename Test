package com.sbi.yb.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.SBIApplicationResponse;
import com.sbi.microservice.framework.utils.FrameworkUtils;
import com.sbi.yb.constants.ServiceConstants;
import com.sbi.yb.constants.StatusConstants;
import com.sbi.yb.model.*;
import com.sbi.yb.service.FileConfigurationService;
import com.sbi.yb.service.ViewFileConfigurationService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;

@ExtendWith(MockitoExtension.class)
class FileConfigurationControllerTest {

    @InjectMocks
    private FileConfigurationController fileConfigurationController;

    @Mock
    private FileConfigurationService fileConfigurationService;

    @Mock
    private ViewFileConfigurationService viewFileConfigurationService;

    @Mock
    private FrameworkUtils frameworkUtils;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private HttpServletResponse httpServletResponse;

    private final ObjectMapper objectMapper = new ObjectMapper();

    SaveFileConfigurationRequest saveFileConfigurationRequest = new SaveFileConfigurationRequest();

    List<DelimitedConfiguration> delimitedConfigurations = new ArrayList<>(Arrays.asList(
            new DelimitedConfiguration("Account Number", "17", 1, "AlphaNumeric", true, "B", null, null),
            new DelimitedConfiguration("Branch Code", "12", 2, "AlphaNumeric", true, "B", null, null),
            new DelimitedConfiguration("Date", "10", 3, "AlphaNumeric", true, "B", null, null),
            new DelimitedConfiguration("Debit Amount", "23", 4, "Numeric", true, "D", null, null),
            new DelimitedConfiguration("Credit Amount", "23", 5, "Numeric", true, "C", null, null),
            new DelimitedConfiguration("Reference Number", "15", 6, "AlphaNumeric", true, "B", null, null),
            new DelimitedConfiguration("Description", "240", 7, "AlphaNumeric", true, "B", null, null),
            new DelimitedConfiguration("Payment Identifier", "4", 8, "AlphaNumeric", true, "B", null, null)
    ));

    @BeforeEach
    void setUp() {
        saveFileConfigurationRequest.setCorporateAlias("250256");
        saveFileConfigurationRequest.setFileType("COMPOSITE_BEN");
        saveFileConfigurationRequest.setFormat(0);
        saveFileConfigurationRequest.setFieldDelimiter("#");
    }

    @ParameterizedTest
    @ValueSource(strings = {"COMPOSITE_BEN", "IMPS_BEN", "IMPS_TXN", "CT|CR|CN|CZ", "CD"})
    void testSaveFileConfiguration(String fileType) throws Exception {
        SaveFileConfigurationRequest mockRequest = new SaveFileConfigurationRequest();
        mockRequest.setFileType(fileType);
        mockRequest.setFormat(0);
        mockRequest.setFieldDelimiter("|");
        mockRequest.setCorporateAlias("1234");
        mockRequest.setDelimitedConfigurations(delimitedConfigurations);
        mockRequest.setFixedConfigurations(Collections.emptyList());
        
        SaveFileConfigurationResponse saveFileConfigurationResponse = new SaveFileConfigurationResponse("File configuration saved successfully");
        SBIApplicationResponse mockAppResponse = new SBIApplicationResponse();
        mockAppResponse.setData(saveFileConfigurationResponse);
        
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, SaveFileConfigurationRequest.class))
                .thenReturn(mockRequest);
        Mockito.when(frameworkUtils.getAttribute(httpServletRequest, "channelIdFromHeader"))
                .thenReturn(Optional.of("web"));
        Mockito.when(fileConfigurationService.validateAndSaveFileConfiguration(any(SaveFileConfigurationRequest.class), anyString()))
                .thenReturn(saveFileConfigurationResponse);
        Mockito.when(frameworkUtils.buildSuccessResponse(any(), anyString()))
                .thenReturn(mockAppResponse);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = fileConfigurationController.saveFileConfiguration(httpServletRequest, httpServletResponse);
        
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }

    @Test
    void testSaveFileConfiguration_invalidFileType() throws Exception {
        SaveFileConfigurationRequest mockRequest = new SaveFileConfigurationRequest();
        mockRequest.setFileType("INVALID_TYPE");
        mockRequest.setFormat(0);
        mockRequest.setFieldDelimiter("|");
        mockRequest.setDelimitedConfigurations(delimitedConfigurations);
        mockRequest.setFixedConfigurations(Collections.emptyList());
        
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, SaveFileConfigurationRequest.class))
                .thenReturn(mockRequest);
        
        ValidationException exception = assertThrows(ValidationException.class, () -> 
            fileConfigurationController.saveFileConfiguration(httpServletRequest, httpServletResponse));
        
        assertEquals(StatusConstants.YBMFC008, exception.getErrorCode());
    }

    @Test
    void testGetConfiguration() throws Exception {
        GetConfigurationRequest mockRequest = new GetConfigurationRequest();
        GetConfigurationResponse mockResponse = new GetConfigurationResponse();
        mockRequest.setFileType("IMPS_TXN");
        
        SBIApplicationResponse mockAppResponse = new SBIApplicationResponse();
        mockAppResponse.setData(mockResponse);
        
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, GetConfigurationRequest.class))
                .thenReturn(mockRequest);
        Mockito.when(viewFileConfigurationService.getConfiguration(any(GetConfigurationRequest.class)))
                .thenReturn(mockResponse);
        Mockito.when(frameworkUtils.buildSuccessResponse(any(), anyString()))
                .thenReturn(mockAppResponse);
        
        ResponseEntity<SBIApplicationResponse> response = fileConfigurationController.getConfiguration(httpServletRequest, httpServletResponse);
        
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    void testCheckConfigurationAvailability() throws Exception {
        CheckConfigurationRequest mockRequest = new CheckConfigurationRequest();
        CheckConfigurationResponse mockResponse = new CheckConfigurationResponse(new HashMap<>());
        mockRequest.setCorporateAlias("250250");
        mockRequest.setFileType(List.of());
        
        SBIApplicationResponse mockAppResponse = new SBIApplicationResponse();
        mockAppResponse.setData(mockResponse);
        
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, CheckConfigurationRequest.class))
                .thenReturn(mockRequest);
        Mockito.when(fileConfigurationService.getConfigurationStatus(any(CheckConfigurationRequest.class)))
                .thenReturn(mockResponse);
        Mockito.when(frameworkUtils.buildSuccessResponse(any(), anyString()))
                .thenReturn(mockAppResponse);
        
        ResponseEntity<SBIApplicationResponse> response = fileConfigurationController.checkConfigurationAvailability(httpServletRequest, httpServletResponse);
        
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    void testCheckConfigurationAvailabilityWithException() throws Exception {
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, CheckConfigurationRequest.class))
                .thenThrow(new RuntimeException("Test exception"));
        
        assertThrows(RuntimeException.class, () -> 
            fileConfigurationController.checkConfigurationAvailability(httpServletRequest, httpServletResponse));
    }

    @Test
    void testGetConfigurationWithException() throws Exception {
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, GetConfigurationRequest.class))
                .thenThrow(new RuntimeException("Test exception"));
        
        assertThrows(RuntimeException.class, () -> 
            fileConfigurationController.getConfiguration(httpServletRequest, httpServletResponse));
    }

    @Test
    void testSaveFileConfigurationWithException() throws Exception {
        Mockito.when(frameworkUtils.validateAndGetRequest(httpServletRequest, ServiceConstants.PLAIN_PAYLOAD, SaveFileConfigurationRequest.class))
                .thenThrow(new RuntimeException("Test exception"));
        
        assertThrows(RuntimeException.class, () -> 
            fileConfigurationController.saveFileConfiguration(httpServletRequest, httpServletResponse));
    }
}
