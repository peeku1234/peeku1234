package com.sbi.yb.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.CommonRequestPayload;
import com.sbi.microservice.framework.model.SBIApplicationResponse;
import com.sbi.microservice.framework.utils.FrameworkUtils;
import com.sbi.yb.constants.ManageBeneStatusCode;
import com.sbi.yb.constants.UtilConstants;
import com.sbi.yb.model.*;
import com.sbi.yb.service.ManageFileBeneficiaryService;
import com.sbi.yb.util.ManageBeneficiaryUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

@ExtendWith(MockitoExtension.class)
class ManageFileBeneficiaryControllerTest {

    @Mock
    private ManageFileBeneficiaryService manageFileBeneficiaryService;

    @Mock
    private FrameworkUtils frameworkUtils;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private ManageFileBeneficiaryController controller;

    private final AtomicInteger totalCount = new AtomicInteger(0);

    @BeforeEach
    void setUp() {
        // Reset totalCount before each test
        totalCount.set(0);
    }

    @Test
    void getBeneficiaryFiles_InvalidRequest_ThrowsValidationException() {
        when(request.getParameter("plainPayload")).thenReturn(null);
        
        assertThrows(ValidationException.class, () -> {
            controller.getBeneficiaryFiles(request, response);
        });
    }

    @Test
    void getBeneficiaryFiles_InvalidJson_ThrowsValidationException() throws JsonProcessingException {
        String invalidJson = "{invalid json}";
        when(request.getParameter("plainPayload")).thenReturn(invalidJson);
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenThrow(JsonProcessingException.class);
        
        assertThrows(ValidationException.class, () -> {
            controller.getBeneficiaryFiles(request, response);
        });
    }

    @Test
    void getBeneficiaryFiles_ApproveTabWithData_ReturnsSuccess() throws Exception {
        BeneficiaryFileRequest fileRequest = new BeneficiaryFileRequest();
        fileRequest.setTabName(UtilConstants.APPROVE_TAB);
        
        UploaderResponse uploaderResponse = new UploaderResponse();
        uploaderResponse.setUploaders(List.of(new Uploader()));
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(fileRequest);
        when(manageFileBeneficiaryService.getUploaderList(any())).thenReturn(uploaderResponse);
        when(manageFileBeneficiaryService.getFileListByTab(any(), any())).thenReturn(List.of(new BeneficiaryFile()));
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getBeneficiaryFiles(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertEquals(Status.SUCCESS.getStatusValue(), responseEntity.getBody().getStatus());
    }

    @Test
    void getBeneficiaryFiles_ApproveTabNoData_ReturnsNoData() throws Exception {
        BeneficiaryFileRequest fileRequest = new BeneficiaryFileRequest();
        fileRequest.setTabName(UtilConstants.APPROVE_TAB);
        
        UploaderResponse uploaderResponse = new UploaderResponse();
        uploaderResponse.setUploaders(List.of());
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(fileRequest);
        when(manageFileBeneficiaryService.getUploaderList(any())).thenReturn(uploaderResponse);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getBeneficiaryFiles(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertEquals(Status.SUCCESS.getStatusValue(), responseEntity.getBody().getStatus());
    }

    @Test
    void getBeneficiaryFiles_ApproveStatusTab_ReturnsSuccess() throws Exception {
        BeneficiaryFileRequest fileRequest = new BeneficiaryFileRequest();
        fileRequest.setTabName(UtilConstants.APPROVE_STATUS_TAB);
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(fileRequest);
        when(manageFileBeneficiaryService.getFileListByTab(any(), any())).thenReturn(List.of(new BeneficiaryFile()));
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getBeneficiaryFiles(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }

    @Test
    void getBeneficiaryFiles_UploadTab_ReturnsSuccess() throws Exception {
        BeneficiaryFileRequest fileRequest = new BeneficiaryFileRequest();
        fileRequest.setTabName(UtilConstants.UPLOAD_TAB);
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(fileRequest);
        when(manageFileBeneficiaryService.getFileListByTab(any(), any())).thenReturn(List.of(new BeneficiaryFile()));
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getBeneficiaryFiles(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }

    @Test
    void getBeneficiaryFiles_UploadStatusTab_ReturnsSuccess() throws Exception {
        BeneficiaryFileRequest fileRequest = new BeneficiaryFileRequest();
        fileRequest.setTabName(UtilConstants.UPLOAD_STATUS_TAB);
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(fileRequest);
        when(manageFileBeneficiaryService.getFileListByTab(any(), any())).thenReturn(List.of(new BeneficiaryFile()));
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getBeneficiaryFiles(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }

    @Test
    void getBeneficiaryDetails_InvalidRequest_ThrowsValidationException() {
        when(request.getParameter("plainPayload")).thenReturn(null);
        
        assertThrows(ValidationException.class, () -> {
            controller.getBeneficiaryDetails(request, response);
        });
    }

    @Test
    void getBeneficiaryDetails_ValidRequest_ReturnsSuccess() throws Exception {
        BeneficiaryDetailsRequest detailsRequest = new BeneficiaryDetailsRequest();
        BeneficiaryDetails beneficiaryDetails = new BeneficiaryDetails();
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(detailsRequest);
        when(manageFileBeneficiaryService.getFileDetailsByTab(any(), any())).thenReturn(beneficiaryDetails);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getBeneficiaryDetails(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertEquals(Status.SUCCESS.getStatusValue(), responseEntity.getBody().getStatus());
    }

    @Test
    void getUploader_InvalidRequest_ThrowsValidationException() {
        when(request.getParameter("plainPayload")).thenReturn(null);
        
        assertThrows(ValidationException.class, () -> {
            controller.getUploader(request, response);
        });
    }

    @Test
    void getUploader_ValidRequest_ReturnsSuccess() throws Exception {
        CommonRequestPayload uploaderRequest = new CommonRequestPayload();
        UploaderResponse uploaderResponse = new UploaderResponse();
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(uploaderRequest);
        when(manageFileBeneficiaryService.getUploaderList(any())).thenReturn(uploaderResponse);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.getUploader(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertEquals(Status.SUCCESS.getStatusValue(), responseEntity.getBody().getStatus());
    }

    @Test
    void approveOrRejectBeneficiary_InvalidRequest_ThrowsValidationException() {
        when(request.getParameter("plainPayload")).thenReturn(null);
        
        assertThrows(ValidationException.class, () -> {
            controller.approveOrRejectBeneficiary(request, response);
        });
    }

    @Test
    void approveOrRejectBeneficiary_ApprovalSuccess_ReturnsSuccess() throws Exception {
        ApproveRejectBeneRequest requestObj = new ApproveRejectBeneRequest();
        requestObj.setIsApproved(true);
        requestObj.setFileReferenceNo("ref123");
        requestObj.setFileName("test.txt");
        requestObj.setBeneTypeAction("type1");
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(requestObj);
        when(manageFileBeneficiaryService.approveBeneficiary(any())).thenReturn(1);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.approveOrRejectBeneficiary(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }

    @Test
    void approveOrRejectBeneficiary_RejectionSuccess_ReturnsSuccess() throws Exception {
        ApproveRejectBeneRequest requestObj = new ApproveRejectBeneRequest();
        requestObj.setIsApproved(false);
        requestObj.setFileReferenceNo("ref123");
        requestObj.setFileName("test.txt");
        requestObj.setBeneTypeAction("type1");
        requestObj.setComments("rejected");
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(requestObj);
        when(manageFileBeneficiaryService.rejectBeneficiary(any())).thenReturn(1);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.approveOrRejectBeneficiary(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }

    @Test
    void approveOrRejectBeneficiary_NullIsApproved_ReturnsSuccess() throws Exception {
        ApproveRejectBeneRequest requestObj = new ApproveRejectBeneRequest();
        requestObj.setIsApproved(null);
        
        when(request.getParameter("plainPayload")).thenReturn("valid json");
        when(ManageBeneficiaryUtil.toObject(any(), any())).thenReturn(requestObj);
        
        ResponseEntity<SBIApplicationResponse> responseEntity = controller.approveOrRejectBeneficiary(request, response);
        
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
    }
}
