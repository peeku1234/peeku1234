package com.sbi.microservice.framework.repository;

import java.sql.Types;
import java.util.List;
import java.util.Optional;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import com.sbi.microservice.framework.model.Channel;
import com.sbi.microservice.framework.model.Endpoint;
import com.sbi.microservice.framework.model.Service;
/**
 *@author RX001020040
 */
@Repository
public class ServiceDAOImpl extends BaseDAO implements ServiceDAO {

	public ServiceDAOImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
		super(namedParameterJdbcTemplate);
	}

	@Override
	public List<Endpoint> getServiceEndpointList(String serviceId) {
		String sql="SELECT B.SERVICE_ID, A.SERVICE_NAME, B.ENDPOINT_ID, B.ENDPOINT_NAME, B.DESCRIPTION, B.STATUS, B.HAS_REQUEST_BODY, IS_ENCRYPTED, METHOD_TYPE, HAS_PATH_PARAMS, B.CATEGORY  FROM SBI_SERVICE_REGISTRY A, SBI_SERVICE_ENDPOINT_DETAILS B WHERE B.SERVICE_ID=:serviceId AND A.SERVICE_ID=B.SERVICE_ID";
		MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("serviceId", serviceId);
        
        RowMapper<Endpoint> rowMapper= (rs, rowNum) -> new Endpoint(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5),rs.getString(6),rs.getBoolean(7),rs.getBoolean(8),rs.getString(9),rs.getBoolean(10),rs.getString(11));
        
		return namedParameterJdbcTemplate.query(sql, params,rowMapper);
	}

	@Override
	public Optional<Service> getServiceDetails(String serviceName) {
		String sql="SELECT A.SERVICE_ID, A.SERVICE_NAME, A.SERVICE_TYPE,A.SERVICE_DESCRIPTION, A.ENV_DOMAIN, A.VERSION, A.ENCRYPTION_ALGO, A.HASH_ALGO, A.RSA_ALGO, A.RSA_KEY_PATH, A.CHARGES_AGGREGATOR, A.CHARGES_CORPORATE, A.STATUS FROM SBI_SERVICE_REGISTRY A, SBI_SERVICE_ENDPOINT_DETAILS B WHERE SERVICE_NAME=:serviceName AND A.SERVICE_ID=B.SERVICE_ID";
		MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("serviceName", serviceName);
        RowMapper<Service> rowMapper= (rs, rowNum) -> new Service(
        		rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getInt(11), rs.getInt(12), rs.getString(13), 
        		getChannelList(rs.getString(1)),getServiceEndpointList(rs.getString(1)));
        
		return namedParameterJdbcTemplate.query(sql, params,rowMapper).stream().findFirst();
	}

	@Override
	public Optional<Endpoint> getServiceEndpointDetails(String serviceId, String endPointName) {
		String sql="SELECT B.SERVICE_ID, A.SERVICE_NAME, B.ENDPOINT_ID, B.ENDPOINT_NAME, B.DESCRIPTION, B.STATUS, B.HAS_REQUEST_BODY, IS_ENCRYPTED, METHOD_TYPE, HAS_PATH_PARAMS, B.CATEGORY  FROM SBI_SERVICE_REGISTRY A, SBI_SERVICE_ENDPOINT_DETAILS B WHERE B.SERVICE_ID=:serviceId AND A.SERVICE_ID=B.SERVICE_ID AND B.ENDPOINT_NAME=:endpointName";
		MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("serviceId", serviceId);
        params.addValue("endpointName", endPointName);
        
        RowMapper<Endpoint> rowMapper= (rs, rowNum) -> new Endpoint(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5),rs.getString(6),rs.getBoolean(7),rs.getBoolean(8),rs.getString(9),rs.getBoolean(10),rs.getString(11));
        
		return namedParameterJdbcTemplate.query(sql, params,rowMapper).stream().findFirst();

	}

	@Override
	public List<Channel> getChannelList(String serviceId) {
		String sql="SELECT B.SERVICE_ID, A.CHANNEL_ID, A.CHANNEL_NAME, A.STATUS FROM SBI_CHANNEL_MASTER A, SBI_SERVICE_CHANNEL_MAPPING B WHERE B.SERVICE_ID=:serviceId AND A.CHANNEL_ID=B.CHANNEL_ID";
		MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("serviceId", serviceId);
        
        RowMapper<Channel> rowMapper= (rs, rowNum) -> new Channel(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4));
        
		return namedParameterJdbcTemplate.query(sql, params,rowMapper);

	}

	@Override
	public List<Channel> getChannelServiceMappingList(String channelId) {
		//String sql="SELECT B.SERVICE_ID, A.CHANNEL_ID, A.CHANNEL_NAME, A.STATUS FROM SBI_CHANNEL_MASTER A, SBI_SERVICE_CHANNEL_MAPPING B WHERE B.SERVICE_ID=:serviceId AND A.CHANNEL_ID=B.CHANNEL_ID";
		String sql="SELECT B.SERVICE_ID, A.CHANNEL_ID, A.CHANNEL_NAME, A.STATUS FROM SBI_CHANNEL_MASTER A, SBI_SERVICE_CHANNEL_MAPPING B WHERE B.SERVICE_ID=:serviceId AND A.CHANNEL_ID=B.CHANNEL_ID";
		MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("channelId", channelId);
        
        RowMapper<Channel> rowMapper= (rs, rowNum) -> new Channel(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4));
        
		return namedParameterJdbcTemplate.query(sql, params,rowMapper);
	}

	@Override
	public Optional<Endpoint> getEndpointDetails(String serviceId,String endpointUrl) {
		String sql="SELECT B.SERVICE_ID, A.SERVICE_NAME, B.ENDPOINT_ID, B.ENDPOINT_NAME, B.DESCRIPTION, B.STATUS, B.HAS_REQUEST_BODY, IS_ENCRYPTED, METHOD_TYPE, HAS_PATH_PARAMS, B.CATEGORY  FROM SBI_SERVICE_REGISTRY A, SBI_SERVICE_ENDPOINT_DETAILS B WHERE B.SERVICE_ID=:serviceId AND A.SERVICE_ID=B.SERVICE_ID AND B.API_URL=:endpointUrl";
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("serviceId", serviceId);
		params.addValue("endpointUrl", endpointUrl);

		RowMapper<Endpoint> rowMapper= (rs, rowNum) -> new Endpoint(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5),rs.getString(6),rs.getBoolean(7),rs.getBoolean(8),rs.getString(9),rs.getBoolean(10) ,rs.getString(11));

		return namedParameterJdbcTemplate.query(sql, params,rowMapper).stream().findFirst();

	}

	@Override
	public int getRBACCount(Optional<String> userName, int corpType, int userRole, String serviceId, String endpointId) {
		
		int mappedUserRole=userRole;
		if(userRole==8) { // ONLY FOR CORPORATE USER
			MapSqlParameterSource params = new MapSqlParameterSource();
			params.addValue("userName", userName.get(), Types.VARCHAR);
			mappedUserRole=namedParameterJdbcTemplate.queryForObject("SELECT to_number(nvl(DECODE(MAX(ACCESS_LEVEL),5,81,6,82,7,83),8)) MAPPED_ROLE "
					+ " FROM SBI_CUSTOMER_ACCOUNT_MAP WHERE USER_NAME=:userName AND ACCOUNT_NATURE=0 AND STATUS=1", params, Integer.class);
		}
		
		String sql="SELECT count(1) from SBI_SRV_ENDPOINT_RBAC B WHERE B.SERVICE_ID=:serviceId AND B.ENDPOINT_ID=:endpointId and (CORP_TYPE=:corpType OR CORP_TYPE=-1) and (USER_ROLE=:userRole OR USER_ROLE=:mappedUserRole OR USER_ROLE=-1)";
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("serviceId", serviceId);
		params.addValue("endpointId", endpointId);
		params.addValue("corpType", corpType);
		params.addValue("mappedUserRole", mappedUserRole);
		params.addValue("userRole", userRole);


		Integer mappedCount = namedParameterJdbcTemplate.queryForObject(sql, params, Integer.class);
		return mappedCount;
	}

}
