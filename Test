package com.sbi.yb.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.CommonRequestPayload;
import com.sbi.microservice.framework.model.SBIApplicationResponse;
import com.sbi.microservice.framework.model.Status;
import com.sbi.microservice.framework.utils.FrameworkUtils;
import com.sbi.yb.constants.ManageBeneStatusCode;
import com.sbi.yb.constants.UtilConstants;
import com.sbi.yb.model.*;
import com.sbi.yb.service.ManageFileBeneficiaryService;
import com.sbi.yb.util.ManageBeneficiaryUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

import static com.sbi.yb.util.ManageBeneficiaryUtil.getBeneTypeAndAction;
import static com.sbi.yb.util.ManageBeneficiaryUtil.safeGetParameter;

/*
 * This class {@code ManageFileBeneficiaryController} includes methods to manage beneficiaries(for file based)
 * @author V1017263
 */

@RestController
public class ManageFileBeneficiaryController {

  private static final Logger logger = LoggerFactory.getLogger(ManageFileBeneficiaryController.class);

  private ManageFileBeneficiaryService manageFileBeneficiaryService;

  private final FrameworkUtils frameworkUtils;

  public ManageFileBeneficiaryController(ManageFileBeneficiaryService manageFileBeneficiaryService, FrameworkUtils frameworkUtils) {
    this.manageFileBeneficiaryService = manageFileBeneficiaryService;
    this.frameworkUtils = frameworkUtils;
  }

  // For total count records
  AtomicInteger totalCount = new AtomicInteger(0);

  /*
   * This method is to take action such as approval or rejection on beneficiaries
   * @param httpServletRequest
   * @param httpServletResponse
   * @return ResponseEntity<SBIApplicationResponse>
   */

  @PostMapping(value = "/getFiles")
  public ResponseEntity<SBIApplicationResponse> getBeneficiaryFiles(
          HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws JsonProcessingException {


    ObjectMapper mapper = new ObjectMapper();

    Optional<String> plainPayload = safeGetParameter(httpServletRequest, "plainPayload");

    logger.info("plainPayload : {}", plainPayload);

    BeneficiaryFileRequest beneficiaryFileRequest;

    SBIApplicationResponse applicationResponse = new SBIApplicationResponse();

    try {
            /*
            Deserializing JSON content
             */
      beneficiaryFileRequest = (BeneficiaryFileRequest) ManageBeneficiaryUtil.toObject(plainPayload.orElseThrow(() ->
              new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request")), BeneficiaryFileRequest.class);

    } catch (JsonProcessingException jsonProcessingException) {
      logger.info("Request could not be parsed as JSON.");
      throw new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request");
    }

    plainPayload.ifPresent(payload -> logger.info("plainPayload: {}", payload));

    logger.info("Get Beneficiary File request : {}", beneficiaryFileRequest);

    if (Optional.ofNullable(beneficiaryFileRequest).isPresent()) {

      UploaderResponse uploaderResponse = manageFileBeneficiaryService
              .getUploaderList(beneficiaryFileRequest);

      if ((beneficiaryFileRequest.getTabName().equals(UtilConstants.APPROVE_TAB)
              && !uploaderResponse.getUploaders().isEmpty())
              || (beneficiaryFileRequest.getTabName().equals(UtilConstants.APPROVE_STATUS_TAB))
              || (beneficiaryFileRequest.getTabName().equals(UtilConstants.UPLOAD_TAB))
              || (beneficiaryFileRequest.getTabName().equals(UtilConstants.UPLOAD_STATUS_TAB))

      ) {
        List<BeneficiaryFile> files = manageFileBeneficiaryService
                .getFileListByTab(beneficiaryFileRequest, totalCount);

        GetFilesResponse getFilesResponse = new GetFilesResponse(files, totalCount.get());
        applicationResponse.setData(mapper.writeValueAsString(getFilesResponse));

      } else {
        applicationResponse.setData(mapper.writeValueAsString("No data found."));
      }

      applicationResponse.setStatus(Status.SUCCESS.getStatusValue());
      applicationResponse.setStatusCode(ManageBeneStatusCode.API000000);
    }
    logger.info("Get Beneficiary File response : {}", applicationResponse);
    return ResponseEntity.ok(applicationResponse);
  }

  @PostMapping(value = "/getFileDetails")
  public ResponseEntity<SBIApplicationResponse> getBeneficiaryDetails(
          HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws JsonProcessingException {


    ObjectMapper mapper = new ObjectMapper();

    Optional<String> plainPayload = safeGetParameter(httpServletRequest, "plainPayload");

    logger.info("plainPayload : {}", plainPayload);

    BeneficiaryDetailsRequest beneficiaryDetailsRequest;

    SBIApplicationResponse applicationResponse = new SBIApplicationResponse();

    try {
            /*
            Deserializing JSON content
             */
      beneficiaryDetailsRequest = (BeneficiaryDetailsRequest) ManageBeneficiaryUtil.toObject(plainPayload.orElseThrow(() ->
              new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request")), BeneficiaryDetailsRequest.class);

    } catch (JsonProcessingException jsonProcessingException) {
      logger.info("Request could not be parsed as JSON.");
      throw new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request");
    }

    plainPayload.ifPresent(payload -> logger.info("plainPayload: {}", payload));
    logger.info("Get Beneficiary Details request : {}", beneficiaryDetailsRequest);

    if (Optional.ofNullable(beneficiaryDetailsRequest).isPresent()) {

      BeneficiaryDetails beneficiaryDetails = manageFileBeneficiaryService
              .getFileDetailsByTab(beneficiaryDetailsRequest, totalCount);

      int count = totalCount.get();

      GetDetailsResponse getDetailsResponse = new GetDetailsResponse(beneficiaryDetails, count);

      applicationResponse.setData(mapper.writeValueAsString(getDetailsResponse));
      applicationResponse.setStatus(Status.SUCCESS.getStatusValue());
      applicationResponse.setStatusCode(ManageBeneStatusCode.API000000);
    }
    logger.info("GetBeneficiaryDetails response : {}", applicationResponse);
    return new ResponseEntity<>(applicationResponse, HttpStatus.OK);
  }

  @PostMapping(value = "/getUploaders")
  public ResponseEntity<SBIApplicationResponse> getUploader(
          HttpServletRequest request, HttpServletResponse response) throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();

    Optional<String> plainPayload = safeGetParameter(request, "plainPayload");

    CommonRequestPayload uploaderRequest = new CommonRequestPayload();

    SBIApplicationResponse applicationResponse = new SBIApplicationResponse();

    try {
            /*
            Deserializing JSON content
             */
      uploaderRequest = (CommonRequestPayload) ManageBeneficiaryUtil.toObject(plainPayload.orElseThrow(() ->
              new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request")), CommonRequestPayload.class);

    } catch (JsonProcessingException jsonProcessingException) {
      logger.info("Request could not be parsed as JSON.");
      throw new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request");
    }

    plainPayload.ifPresent(payload -> logger.info("plainPayload: {}", payload));
    logger.info("Get Uploader List request : {}", uploaderRequest);

    if (Optional.ofNullable(uploaderRequest).isPresent()) {

      UploaderResponse uploaderResponse = manageFileBeneficiaryService
              .getUploaderList(uploaderRequest);

      GetUploaderResponse getUploaderResponse = new GetUploaderResponse(uploaderResponse);

      applicationResponse.setData(mapper.writeValueAsString(getUploaderResponse));
      applicationResponse.setStatus(Status.SUCCESS.getStatusValue());
      applicationResponse.setStatusCode(ManageBeneStatusCode.API000000);

    }
    logger.info("getUploader response : {}", applicationResponse);
    return new ResponseEntity<>(applicationResponse, HttpStatus.OK);
  }


  @PostMapping(value = "/approveReject")
  public ResponseEntity<SBIApplicationResponse> approveOrRejectBeneficiary(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
    logger.info("approveOrRejectBeneficiary - starts");

    Optional<String> plainPayload = safeGetParameter(httpServletRequest, "plainPayload");

    logger.info("plainPayload : {}", plainPayload);

    ApproveRejectBeneRequest approveRejectBeneRequest = null;
    ApproveRejectBeneResponse approveRejectBeneResponse;
    int approvedOrRejectedCount = 0;
    SBIApplicationResponse sbiApplicationResponse = new SBIApplicationResponse();

    try {
            /*
            Deserializing JSON content
             */
      approveRejectBeneRequest = (ApproveRejectBeneRequest) ManageBeneficiaryUtil.toObject(plainPayload.orElseThrow(() ->
              new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request")), ApproveRejectBeneRequest.class);

    } catch (JsonProcessingException jsonProcessingException) {
      logger.info("Request could not be parsed as JSON.");
      throw new ValidationException(ManageBeneStatusCode.INVALID_REQUEST, "Invalid Request");
    }

    plainPayload.ifPresent(payload -> logger.info("plainPayload: {}", payload));
    logger.info("Approve or reject beneficiaries request : {}", approveRejectBeneRequest);

    if (Optional.ofNullable(approveRejectBeneRequest).isPresent() && Objects.nonNull(approveRejectBeneRequest.getIsApproved())) {

      //To Do
      //before approval or rejection check whether user has access to take action on bene
      // Cooling period approval & rejection method
      //check last mod time updated in DB
      //rejectionReason
      if (Boolean.TRUE.equals(approveRejectBeneRequest.getIsApproved())) {
        logger.info("Approval process starts");
        //Approve
        approvedOrRejectedCount = manageFileBeneficiaryService.approveBeneficiary(approveRejectBeneRequest);
      } else if (Boolean.FALSE.equals(approveRejectBeneRequest.getIsApproved())) {
        logger.info("Rejection process starts");
        //Reject
        approvedOrRejectedCount = manageFileBeneficiaryService.rejectBeneficiary(approveRejectBeneRequest);
      }

      approveRejectBeneResponse = new ApproveRejectBeneResponse(approveRejectBeneRequest.getFileReferenceNo(),
              approveRejectBeneRequest.getFileName(), getBeneTypeAndAction(approveRejectBeneRequest.getBeneTypeAction()),
              approvedOrRejectedCount, Boolean.FALSE.equals(approveRejectBeneRequest.getIsApproved()) ?
              approveRejectBeneRequest.getComments() : "");

      sbiApplicationResponse = ManageBeneficiaryUtil.buildSuccessResponse(approveRejectBeneResponse,
              ManageBeneStatusCode.APPROVE_OR_REJECT_SUCCESS);
    }
    logger.info("approveOrRejectBeneficiary - response : {}", sbiApplicationResponse);

    return new ResponseEntity<>(sbiApplicationResponse, HttpStatus.OK);
  }

}
