package com.sbi.microservice.framework.utils;

import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.IntegrationApiRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
public class RequestValidator {
    private static final Logger logger = LoggerFactory.getLogger(RequestValidator.class);

    public void validateRequest(
        Map<String, Object> inputParams,
        List<IntegrationApiRequest> validationRules
    ) {
        for (IntegrationApiRequest rule : validationRules) {
            String attribute = rule.attribute_name();
            String dataType = rule.data_type();
            boolean isMandatory = rule.is_mandatory();
            int exactLength = rule.exact_length();
            int maxLength = rule.max_length();

            validateAttribute(inputParams, attribute, dataType, isMandatory, exactLength, maxLength);
        }
    }

    private void validateAttribute(
        Map<String, Object> inputParams,
        String attribute,
        String dataType,
        boolean isMandatory,
        int exactLength,
        int maxLength
    ) {
        // Mandatory check
        if (isMandatory && !inputParams.containsKey(attribute)) {
            throw new ValidationException("400", attribute + " is mandatory");
        }

        // Skip if optional and not provided
        if (!inputParams.containsKey(attribute)) {
            return;
        }

        Object value = inputParams.get(attribute);

        // Type-specific validation
        switch (dataType.toUpperCase()) {
            case "STRING" -> validateString(value, attribute, exactLength, maxLength);
            case "LIST" -> validateList(value, attribute, maxLength);
            case "NUMBER" -> validateNumber(value, attribute);
            case "BOOLEAN" -> validateBoolean(value, attribute);
            default -> throw new ValidationException("400", 
                "Unsupported data type '" + dataType + "' for attribute: " + attribute);
        }
    }

    private void validateString(Object value, String attribute, int exactLength, int maxLength) {
        if (!(value instanceof String strValue)) {
            throw new ValidationException("400", attribute + " should be a string");
        }
        if (exactLength > 0 && strValue.length() != exactLength) {
            throw new ValidationException("400", 
                attribute + " must be exactly " + exactLength + " characters");
        }
        if (maxLength > 0 && strValue.length() > maxLength) {
            throw new ValidationException("400", 
                attribute + " exceeds max length of " + maxLength);
        }
    }

    private void validateList(Object value, String attribute, int maxLength) {
        if (!(value instanceof List<?> list)) {
            throw new ValidationException("400", attribute + " should be a list");
        }
        if (maxLength > 0 && list.size() > maxLength) {
            throw new ValidationException("400", 
                attribute + " exceeds max size of " + maxLength);
        }
    }

    private void validateNumber(Object value, String attribute) {
        if (!(value instanceof Number)) {
            throw new ValidationException("400", attribute + " should be a number");
        }
    }

    private void validateBoolean(Object value, String attribute) {
        if (!(value instanceof Boolean)) {
            throw new ValidationException("400", attribute + " should be a boolean");
        }
    }
}




package com.sbi.microservice.framework.integration;

import com.sbi.microservice.framework.constant.ErrorCodes;
import com.sbi.microservice.framework.exception.BusinessException;
import com.sbi.microservice.framework.model.IntegrationApiRequest;
import com.sbi.microservice.framework.model.IntegrationConfig;
import com.sbi.microservice.framework.repository.IntegrationDAO;
import com.sbi.microservice.framework.security.EISEncryptRequest;
import com.sbi.microservice.framework.utils.CoreDetails;
import com.sbi.microservice.framework.utils.RequestValidator;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Profile("!performance-test")
public class IntegrationService implements DownstreamIntegration {

    private static final Logger logger = LoggerFactory.getLogger(IntegrationService.class);

    @Value("${yono.eis.publicKey}") private String providerPublicKey;
    @Value("${yono.eis.privateKey}") private String consumerPrivateKey;
    @Value("${yono.eis.passwordPath}") private String passwordPath;
    @Value("${yono.eis.timeout}") private int timeout;

    private final IntegrationDAO integrationDAO;
    private final EISEncryptRequest eisEncryptRequest;
    private final CoreDetails coreDetails;
    private final RequestValidator requestValidator;
    private final CircuitBreakerFactoryService circuitBreakerFactoryService;

    public IntegrationService(
        IntegrationDAO integrationDAO,
        EISEncryptRequest eisEncryptRequest,
        CoreDetails coreDetails,
        RequestValidator requestValidator,
        CircuitBreakerFactoryService circuitBreakerFactoryService
    ) {
        this.integrationDAO = integrationDAO;
        this.eisEncryptRequest = eisEncryptRequest;
        this.coreDetails = coreDetails;
        this.requestValidator = requestValidator;
        this.circuitBreakerFactoryService = circuitBreakerFactoryService;
    }

    @Override
    public Map<String, Object> callDownstreamService(
        String serviceName, 
        Map<String, Object> inputParams
    ) {
        CircuitBreaker circuitBreaker = circuitBreakerFactoryService.getCircuitBreaker(serviceName);
        IntegrationConfig config = circuitBreakerFactoryService.getConfig();

        // 1. Get validation rules for this service
        List<IntegrationApiRequest> validationRules = integrationDAO.getAPIIntegrationDetail(serviceName);
        if (validationRules.isEmpty()) {
            throw new BusinessException(ErrorCodes.SERVICE_NOT_FOUND, 
                "No integration config found for service: " + serviceName);
        }

        // 2. Validate input parameters
        requestValidator.validateRequest(inputParams, validationRules);

        // 3. Prepare request map
        Map<String, Object> requestMap = prepareRequestMap(validationRules, inputParams);
        IntegrationApiRequest primaryRequest = validationRules.get(0);

        // 4. Execute based on protocol
        try {
            return switch (primaryRequest.protocol().toUpperCase()) {
                case "HTTP" -> makeHttpCall(primaryRequest.url(), requestMap, config);
                case "TCP" -> makeTcpCall(primaryRequest.host(), primaryRequest.port(), requestMap);
                default -> throw new BusinessException(ErrorCodes.UNSUPPORTED_PROTOCOL,
                    "Unsupported protocol: " + primaryRequest.protocol());
            };
        } catch (Exception e) {
            logger.error("Integration failed for service: {}", serviceName, e);
            throw new BusinessException(ErrorCodes.INTEGRATION_FAILED, 
                "Downstream service call failed: " + e.getMessage());
        }
    }

    private Map<String, Object> prepareRequestMap(
        List<IntegrationApiRequest> validationRules,
        Map<String, Object> inputParams
    ) {
        Map<String, Object> requestMap = new HashMap<>();
        validationRules.forEach(rule -> {
            String attribute = rule.attribute_name();
            if (inputParams.containsKey(attribute)) {
                requestMap.put(attribute, inputParams.get(attribute));
            } else if (rule.is_mandatory()) {
                throw new BusinessException(ErrorCodes.MISSING_PARAMETER,
                    "Required parameter missing: " + attribute);
            }
        });
        return requestMap;
    }

    private Map<String, Object> makeHttpCall(
        String url,
        Map<String, Object> requestMap,
        IntegrationConfig config
    ) {
        configureEncryption();
        return eisEncryptRequest.encryptDecryptReqResp(url, requestMap);
    }

    private Map<String, Object> makeTcpCall(
        String host,
        int port,
        Map<String, Object> requestMap
    ) {
        try {
            return coreDetails.getDataFromBankSystem(host, port, requestMap);
        } catch (Exception e) {
            throw new BusinessException(ErrorCodes.TCP_CONNECTION_FAILED,
                "TCP call failed to " + host + ":" + port);
        }
    }

    private void configureEncryption() {
        eisEncryptRequest.setProviderPublicKey(providerPublicKey);
        eisEncryptRequest.setConsumerPrivateKey(consumerPrivateKey);
        eisEncryptRequest.setPasswordPath(passwordPath);
        eisEncryptRequest.setConnectionTimeOut(timeout);
    }
}
