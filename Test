package com.sbi.yb.services.repository.impl;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.dao.QueryTimeoutException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@DisplayName("HolidayMasterDAOImpl Comprehensive Tests")
class HolidayMasterDAOImplComprehensiveTest {

    // ... (all the above tests can be organized in nested classes)

    @Nested
    @DisplayName("Exception Handling Tests")
    class ExceptionHandlingTests {
        
        @Test
        @DisplayName("Should handle DataAccessResourceFailureException")
        void testFindHoliday_WithDataAccessResourceFailureException() {
            // This test would be similar to the DataAccessException test
            // but specifically for different types of DataAccessException
        }

        @Test
        @DisplayName("Should handle QueryTimeoutException")
        void testFindHoliday_WithQueryTimeoutException() {
            // Test for specific timeout exceptions
        }
    }

    @Nested
    @DisplayName("Parameterized Merchant Code Tests")
    class ParameterizedMerchantCodeTests {
        
        @ParameterizedTest
        @ValueSource(strings = {"RTGS", "rtgs", "RtGs", "NEFT", "neft", "BANK_HOLIDAY", "bank_holiday"})
        @DisplayName("Should accept valid merchant codes case insensitively")
        void testFindHoliday_WithVariousValidMerchantCodes(String merchantCode) {
            // Parameterized test for different case variations
        }

        @ParameterizedTest
        @ValueSource(strings = {"INVALID", "TEST", "ABCD", "", " "})
        @DisplayName("Should return null for invalid merchant codes")
        void testFindHoliday_WithVariousInvalidMerchantCodes(String merchantCode) {
            // Parameterized test for invalid codes
        }
    }

    @Nested
    @DisplayName("SQL Injection Safety Tests")
    class SQLInjectionSafetyTests {
        
        @Test
        @DisplayName("Should handle potentially malicious merchant code")
        void testFindHoliday_WithSQLInjectionAttempt() {
            // Test that the code safely handles potential SQL injection attempts
        }
    }
}
