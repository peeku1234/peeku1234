package com.sbi.yb.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.microservice.framework.exception.ValidationException;
import com.sbi.microservice.framework.model.SBIApplicationResponse;
import com.sbi.microservice.framework.model.Status;
import com.sbi.microservice.framework.utils.FrameworkUtils;
import com.sbi.yb.constant.ErrorConstants;
import com.sbi.yb.constant.UtilsConstant;
import com.sbi.yb.model.*;
import com.sbi.yb.service.ApproveTestService;
import com.sbi.yb.service.FileStoreService;
import com.sbi.yb.service.ViewTransactionTestFileService;
import com.sbi.yb.util.ServiceUtils;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class UploadApproveTestFileControllerTest {

    @InjectMocks
    private UploadApproveTestFileController uploadApproveTestFileController;

    @Mock
    private FileStoreService fileStoreService;

    @Mock
    private ViewTransactionTestFileService viewTransactionTestFileService;

    @Mock
    private FrameworkUtils frameworkUtils;

    @Mock
    private ApproveTestService approveTestService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private HttpServletResponse httpServletResponse;

    private ObjectMapper objectMapper = new ObjectMapper();

    private TxnFileUploadRequest txnFileUploadRequest;
    private ViewTestFileRequest viewTestFileRequest;
    private ApproveTestFileRequest approveTestFileRequest;
    private SBIApplicationResponse mockAppResponse;

    @BeforeEach
    void setup() throws JsonProcessingException {
        // Setup test requests
        txnFileUploadRequest = new TxnFileUploadRequest();
        txnFileUploadRequest.setFileName("testfile.txt");
        txnFileUploadRequest.setFileType("TEST");

        viewTestFileRequest = new ViewTestFileRequest();
        viewTestFileRequest.setFileReferenceNo("123456");

        approveTestFileRequest = new ApproveTestFileRequest();
        approveTestFileRequest.setFileReferenceNo("123456");
        approveTestFileRequest.setStatus("APPROVED");

        // Setup mock response
        mockAppResponse = new SBIApplicationResponse();
        mockAppResponse.setStatus(Status.SUCCESS.getStatusValue());
        mockAppResponse.setStatusCode(UtilsConstant.SUCCESSCODE);
    }

    @Test
    void testUploadTestFile_Success() throws JsonProcessingException {
        TxnFileUploadResponse txnFileUploadResponse = new TxnFileUploadResponse();
        txnFileUploadResponse.setFileReferenceNo("101726");
        txnFileUploadResponse.setFileName("testfile.txt");
        
        String payload = objectMapper.writeValueAsString(txnFileUploadRequest);
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(payload);
        when(fileStoreService.uploadFileStore(any(TxnFileUploadRequest.class), anyString())).thenReturn(txnFileUploadResponse);
        when(frameworkUtils.buildSuccessResponse(any(), anyString())).thenReturn(mockAppResponse);

        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.uploadTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(UtilsConstant.SUCCESSCODE, response.getBody().getStatusCode());
        Assertions.assertEquals(Status.SUCCESS.getStatusValue(), response.getBody().getStatus());
    }

    @Test
    void testUploadTestFile_JsonProcessingException() throws JsonProcessingException {
        String invalidPayload = "invalid json";
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(invalidPayload);
        
        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.uploadTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(ErrorConstants.NO_VALID_INPUT, response.getBody().getStatusCode());
        Assertions.assertEquals(UtilsConstant.FAILURE, response.getBody().getStatus());
    }

    @Test
    void testUploadTestFile_ValidationException() {
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(null);
        
        Assertions.assertThrows(ValidationException.class, () -> 
            uploadApproveTestFileController.uploadTestFile(httpServletRequest, httpServletResponse));
    }

    @Test
    void testViewTestFile_Success() throws JsonProcessingException {
        ViewTestFileResponse response1 = new ViewTestFileResponse();
        response1.setFileReferenceNo("123456");
        ViewTestFileResponse response2 = new ViewTestFileResponse();
        response2.setFileReferenceNo("789012");
        List<ViewTestFileResponse> viewTestFileResponses = Arrays.asList(response1, response2);
        
        String payload = objectMapper.writeValueAsString(viewTestFileRequest);
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(payload);
        when(viewTransactionTestFileService.viewTransactionTestFileDetails(any(ViewTestFileRequest.class))).thenReturn(viewTestFileResponses);
        when(frameworkUtils.buildSuccessResponse(any(), anyString())).thenReturn(mockAppResponse);

        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.viewTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(UtilsConstant.SUCCESSCODE, response.getBody().getStatusCode());
        Assertions.assertEquals(Status.SUCCESS.getStatusValue(), response.getBody().getStatus());
    }

    @Test
    void testViewTestFile_JsonProcessingException() throws JsonProcessingException {
        String invalidPayload = "invalid json";
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(invalidPayload);
        
        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.viewTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(ErrorConstants.NO_VALID_INPUT, response.getBody().getStatusCode());
        Assertions.assertEquals(UtilsConstant.FAILURE, response.getBody().getStatus());
    }

    @Test
    void testViewTestFile_ValidationException() {
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn("");
        
        Assertions.assertThrows(ValidationException.class, () -> 
            uploadApproveTestFileController.viewTestFile(httpServletRequest, httpServletResponse));
    }

    @Test
    void testViewEchequeDetails_Success() throws JsonProcessingException {
        ViewTestFileEchequeListResponse echequeResponse = new ViewTestFileEchequeListResponse();
        echequeResponse.setTotalRecords(5);
        
        String payload = objectMapper.writeValueAsString(viewTestFileRequest);
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(payload);
        when(viewTransactionTestFileService.viewEchequeDetails(any(ViewTestFileRequest.class))).thenReturn(echequeResponse);
        when(frameworkUtils.buildSuccessResponse(any(), anyString())).thenReturn(mockAppResponse);

        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.viewEchequeDetails(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(UtilsConstant.SUCCESSCODE, response.getBody().getStatusCode());
        Assertions.assertEquals(Status.SUCCESS.getStatusValue(), response.getBody().getStatus());
    }

    @Test
    void testViewEchequeDetails_JsonProcessingException() throws JsonProcessingException {
        String invalidPayload = "invalid json";
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(invalidPayload);
        
        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.viewEchequeDetails(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(ErrorConstants.NO_VALID_INPUT, response.getBody().getStatusCode());
        Assertions.assertEquals(UtilsConstant.FAILURE, response.getBody().getStatus());
    }

    @Test
    void testViewEchequeDetails_ValidationException() {
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn("   ");
        
        Assertions.assertThrows(ValidationException.class, () -> 
            uploadApproveTestFileController.viewEchequeDetails(httpServletRequest, httpServletResponse));
    }

    @Test
    void testApproveTestFile_Success() throws JsonProcessingException {
        ApproveTestFileResponse approveResponse = new ApproveTestFileResponse();
        approveResponse.setStatus("APPROVED");
        approveResponse.setFileReferenceNo("123456");
        
        String payload = objectMapper.writeValueAsString(approveTestFileRequest);
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(payload);
        when(approveTestService.updateTestFileConfig(any(ApproveTestFileRequest.class))).thenReturn(approveResponse);
        when(frameworkUtils.buildSuccessResponse(any(), anyString())).thenReturn(mockAppResponse);

        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.approveTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(UtilsConstant.SUCCESSCODE, response.getBody().getStatusCode());
        Assertions.assertEquals(Status.SUCCESS.getStatusValue(), response.getBody().getStatus());
    }

    @Test
    void testApproveTestFile_JsonProcessingException() throws JsonProcessingException {
        String invalidPayload = "invalid json";
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(invalidPayload);
        
        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.approveTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertEquals(ErrorConstants.NO_VALID_INPUT, response.getBody().getStatusCode());
        Assertions.assertEquals(UtilsConstant.FAILURE, response.getBody().getStatus());
    }

    @Test
    void testApproveTestFile_ValidationException() {
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(null);
        
        Assertions.assertThrows(ValidationException.class, () -> 
            uploadApproveTestFileController.approveTestFile(httpServletRequest, httpServletResponse));
    }

    @Test
    void testApproveTestFile_NullServiceResponse() throws JsonProcessingException {
        String payload = objectMapper.writeValueAsString(approveTestFileRequest);
        
        when(ServiceUtils.safeGetParameter(httpServletRequest, UtilsConstant.PLAIN_PAYLOAD)).thenReturn(payload);
        when(approveTestService.updateTestFileConfig(any(ApproveTestFileRequest.class))).thenReturn(null);

        ResponseEntity<SBIApplicationResponse> response = uploadApproveTestFileController.approveTestFile(httpServletRequest, httpServletResponse);
        
        Assertions.assertNotNull(response);
        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
        Assertions.assertNull(response.getBody().getData());
    }
}
